(*Generated by Lem from fpSem.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasivesTheory libTheory fpValTreeTheory fpOptTheory machine_ieeeTheory;

val _ = numLib.prefer_num();



val _ = new_theory "fpSem"

(*
  Definitions of the floating point operations used in CakeML.
*)
(*open import Pervasives*)
(*open import Lib*)
(*open import FpOpt*)
(*open import FpValTree*)

(*open import {hol} `machine_ieeeTheory`*)
(*open import {isabelle} `IEEE_Floating_Point.FP64`*)

(*type rounding*)

(*val fp64_lessThan     : word64 -> word64 -> bool*)
(*val fp64_lessEqual    : word64 -> word64 -> bool*)
(*val fp64_greaterThan  : word64 -> word64 -> bool*)
(*val fp64_greaterEqual : word64 -> word64 -> bool*)
(*val fp64_equal        : word64 -> word64 -> bool*)

(*val fp64_isNan      :word64 -> bool*)

(*val fp64_abs    : word64 -> word64*)
(*val fp64_negate : word64 -> word64*)
(*val fp64_sqrt   : rounding -> word64 -> word64*)

(*val fp64_add : rounding -> word64 -> word64 -> word64*)
(*val fp64_sub : rounding -> word64 -> word64 -> word64*)
(*val fp64_mul : rounding -> word64 -> word64 -> word64*)
(*val fp64_div : rounding -> word64 -> word64 -> word64*)

(*val fp64_mul_add : rounding -> word64 -> word64 -> word64 -> word64*)

(*val roundTiesToEven : rounding*)

(*val fp_cmp : fp_cmp -> word64 -> word64 -> bool*)
val _ = Define `
 ((fp_cmp_comp:fp_cmp -> word64 -> word64 -> bool) fop=  ((case fop of
    FP_Less => fp64_lessThan
  | FP_LessEqual => fp64_lessEqual
  | FP_Greater => fp64_greaterThan
  | FP_GreaterEqual => fp64_greaterEqual
  | FP_Equal => fp64_equal
)))`;


(*val fp_pred: fp_pred -> word64 -> bool*)
val _ = Define `
 ((fp_pred_comp:fp_pred -> word64 -> bool) fp=  ((case fp of
    FP_NaN => fp64_isNan
)))`;


(*val fp_uop : fp_uop -> word64 -> word64*)
val _ = Define `
 ((fp_uop_comp:fp_uop -> word64 -> word64) fop=  ((case fop of
    FP_Abs => fp64_abs
  | FP_Neg => fp64_negate
  | FP_Sqrt => fp64_sqrt roundTiesToEven
)))`;


(*val fp_bop : fp_bop -> word64 -> word64 -> word64*)
val _ = Define `
 ((fp_bop_comp:fp_bop -> word64 -> word64 -> word64) fop=  ((case fop of
    FP_Add => fp64_add roundTiesToEven
  | FP_Sub => fp64_sub roundTiesToEven
  | FP_Mul => fp64_mul roundTiesToEven
  | FP_Div => fp64_div roundTiesToEven
)))`;


val _ = Define `
 ((fpfma:word64 -> word64 -> word64 -> word64) v1 v2 v3=  (fp64_mul_add roundTiesToEven v2 v3 v1))`;


(*val fp_top : fp_top -> word64 -> word64 -> word64 -> word64*)
val _ = Define `
 ((fp_top_comp:fp_top -> word64 -> word64 -> word64 -> word64) fop=  ((case fop of
    FP_Fma => fpfma
)))`;


(*val fp_sc : forall 'v. sc -> 'v -> 'v*)
val _ = Define `
 ((fp_sc_comp:sc -> 'a -> 'a) sc v=  ((case sc of
    Opt => v
)))`;


val _ = Hol_datatype `
 result =   Fp_bool of bool | Fp_word of word64`;


(*val compress: fp_val -> maybe result*)
 val compress_defn = Defn.Hol_multi_defns `
 ((compress:fp_val ->(result)option) (Fp_const w1)=  (SOME (Fp_word w1)))
    /\ ((compress:fp_val ->(result)option) (Fp_uop u1 v1)=
         ((case compress v1 of
          SOME (Fp_word w1) => SOME (Fp_word (fp_uop_comp u1 w1))
        | _ => NONE
        )))
    /\ ((compress:fp_val ->(result)option) (Fp_bop b v1 v2)=
         ((case (compress v1, compress v2) of
          (SOME (Fp_word w1), SOME (Fp_word w2)) =>
          SOME (Fp_word (fp_bop_comp b w1 w2))
        )))
    /\ ((compress:fp_val ->(result)option) (Fp_top t v1 v2 v3)=
         ((case (compress v1, compress v2, compress v3) of
          (SOME (Fp_word w1), SOME (Fp_word w2), SOME (Fp_word w3)) =>
          SOME (Fp_word (fp_top_comp t w1 w2 w3))
        )))
    /\ ((compress:fp_val ->(result)option) (Fp_pred p v1)=
         ((case compress v1 of
          SOME (Fp_word w1) => SOME (Fp_bool (fp_pred_comp p w1))
        | _ => NONE
        )))
    /\ ((compress:fp_val ->(result)option) (Fp_cmp cmp v1 v2)=
         ((case (compress v1, compress v2) of
          (SOME (Fp_word w1), SOME (Fp_word w2)) =>
          SOME (Fp_bool (fp_cmp_comp cmp w1 w2))
        )))
    /\ ((compress:fp_val ->(result)option) (Fp_sc sc v)=  (compress v))`;

val _ = Lib.with_flag (computeLib.auto_import_definitions, false) (List.map Defn.save_defn) compress_defn;

(*val eqvalTree: fp_val -> fp_val -> bool*)
 val _ = Define `
 ((eqValTree:fp_val -> fp_val -> bool) v1 v2=  (compress v1 = compress v2))`;
val _ = export_theory()

