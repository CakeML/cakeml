(*Generated by Lem from fpValTree.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasivesTheory libTheory;

val _ = numLib.prefer_num();



val _ = new_theory "fpValTree"

(*
  Definition of floating point value trees for CakeML
*)
(*open import Pervasives*)
(*open import Lib*)

val _ = Hol_datatype `
 sc =   Opt`;

val _ = Hol_datatype `
 fp_cmp = FP_Less | FP_LessEqual | FP_Greater | FP_GreaterEqual | FP_Equal`;

val _ = Hol_datatype `
 fp_pred =   FP_NaN`;

val _ = Hol_datatype `
 fp_uop = FP_Abs | FP_Neg | FP_Sqrt`;

val _ = Hol_datatype `
 fp_bop = FP_Add | FP_Sub | FP_Mul | FP_Div`;

val _ = Hol_datatype `
 fp_top =   FP_Fma`;


val _ = Hol_datatype `
 fp_word_val =
       Fp_const of word64
     | Fp_uop of fp_uop => fp_word_val
     | Fp_bop of fp_bop => fp_word_val => fp_word_val
     | Fp_top of fp_top => fp_word_val => fp_word_val => fp_word_val
     | Fp_wsc of sc => fp_word_val`;


val _ = Hol_datatype `
 fp_bool_val =
       Fp_pred of fp_pred => fp_word_val
     | Fp_cmp of fp_cmp => fp_word_val => fp_word_val
     | Fp_bsc of sc => fp_bool_val`;


(*val fp_pred: fp_pred -> fp_word_val -> fp_bool_val*)
val _ = Define `
 ((fp_pred:fp_pred -> fp_word_val -> fp_bool_val) fop f1=  (Fp_pred fop f1))`;


(*val fp_cmp : fp_cmp -> fp_word_val -> fp_word_val -> fp_bool_val*)
val _ = Define `
 ((fp_cmp:fp_cmp -> fp_word_val -> fp_word_val -> fp_bool_val) fop f1 f2=  (Fp_cmp fop f1 f2))`;


(*val fp_uop : fp_uop -> fp_word_val -> fp_word_val*)
val _ = Define `
 ((fp_uop:fp_uop -> fp_word_val -> fp_word_val) fop f1=  (Fp_uop fop f1))`;


(*val fp_bop : fp_bop -> fp_word_val -> fp_word_val -> fp_word_val*)
val _ = Define `
 ((fp_bop:fp_bop -> fp_word_val -> fp_word_val -> fp_word_val) fop f1 f2=  (Fp_bop fop f1 f2))`;


(*val fp_top : fp_top -> fp_word_val -> fp_word_val -> fp_word_val -> fp_word_val*)
val _ = Define `
 ((fp_top:fp_top -> fp_word_val -> fp_word_val -> fp_word_val -> fp_word_val) fop f1 f2 f3=  (Fp_top fop f1 f2 f3))`;
val _ = export_theory()

