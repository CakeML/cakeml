(*
  Functional big-step semantics for evaluation of CakeML programs.
*)
open import Pervasives_extra
open import Lib
open import Ast
open import Namespace
open import SemanticPrimitives
open import Ffi
open import FpValTree FpSem

(* The semantics is defined here using fix_clock so that HOL4 generates
 * provable termination conditions. However, after termination is proved, we
 * clean up the definition (in HOL4) to remove occurrences of fix_clock. *)

let fix_clock s (s', fps', res) =
  (<| s' with clock = if s'.clock <= s.clock
                     then s'.clock else s.clock |>, fps', res)

let dec_clock s = <| s with clock = s.clock - 1 |>

let shift_fp_opts fps = <| fps with opts = (fun x -> fps.opts (x + 1)); choices = fps.choices + 1|>

(* list_result is equivalent to map_result (\v. [v]) I, where map_result is
 * defined in evalPropsTheory *)
let rec
list_result (Rval v) = Rval [v]
and
list_result (Rerr e) = Rerr e

val evaluate : forall 'ffi. state 'ffi -> sem_env v -> fp_state -> list exp -> state 'ffi * fp_state * result (list v) v
val evaluate_match : forall 'ffi. state 'ffi -> sem_env v -> fp_state -> v -> list (pat * exp) -> v -> state 'ffi * fp_state * result (list v) v
let rec
evaluate st env fps [] = (st, fps, Rval [])
and
evaluate st env fps (e1::e2::es) =
  match fix_clock st (evaluate st env fps [e1]) with
  | (st', fps', Rval v1) ->
      match evaluate st' env fps' (e2::es) with
      | (st'', fps'', Rval vs) -> (st'', fps'', Rval (head v1::vs))
      | res -> res
      end
  | res -> res
  end
and
evaluate st env fps [Lit l] = (st, fps, Rval [Litv l])
and
evaluate st env fps [Raise e] =
  match evaluate st env fps [e] with
  | (st', fps', Rval v) -> (st', fps', Rerr (Rraise (head v)))
  | res -> res
  end
and
evaluate st env fps [Handle e pes] =
  match fix_clock st (evaluate st env fps [e]) with
  | (st', fps', Rerr (Rraise v)) -> evaluate_match st' env fps' v pes v
  | res -> res
  end
and
evaluate st env fps [Con cn es] =
  if do_con_check env.c cn (length es) then
    match evaluate st env fps (reverse es) with
    | (st', fps', Rval vs) ->
        match build_conv env.c cn (reverse vs) with
        | Just v -> (st', fps', Rval [v])
        | Nothing -> (st', fps', Rerr (Rabort Rtype_error))
        end
    | res -> res
    end
  else (st, fps, Rerr (Rabort Rtype_error))
and
evaluate st env fps [Var n] =
  match nsLookup env.v n with
  | Just v -> (st, fps, Rval [v])
  | Nothing -> (st, fps, Rerr (Rabort Rtype_error))
  end
and
evaluate st env fps [Fun x e] = (st, fps, Rval [Closure env x e])
and
evaluate st env fps [App op es] =
  match fix_clock st (evaluate st env fps (reverse es)) with
  | (st', fps', Rval vs) ->
      if op = Opapp then
        match do_opapp (reverse vs) with
        | Just (env',e) ->
            if st'.clock = 0 then
              (st', fps', Rerr (Rabort Rtimeout_error))
            else
              evaluate (dec_clock st') env' fps' [e]
        | Nothing -> (st', fps', Rerr (Rabort Rtype_error))
        end
      else
        match do_app (st'.refs,st'.ffi) op (reverse vs) with
        | Nothing -> (st', fps', Rerr (Rabort Rtype_error))
        | Just ((refs,ffi),r) ->
          if (isFpOp op)
          then
            let
              fp_opt =
                  if (fps'.canOpt)
                  then
                    match (do_fprw r (fps'.opts 0) (fps'.rws)) with
                    (* if it fails, just use the old value tree *)
                    | Nothing -> r
                    | Just r_opt -> r_opt
                    end
                  else r
              in
              let fp_res =
                if (isFpBool op)
                then match fp_opt with
                  | Rval (FP_BoolTree fv) -> Rval (Boolv (compress_bool fv))
                  | _ -> Rerr (Rabort Rtype_error)
                  end
                else fp_opt
            in ((<| st' with refs = refs; ffi = ffi |>), shift_fp_opts fps', list_result fp_res)
          else
            (<| st' with refs = refs; ffi = ffi |>, fps', list_result r)
        end
  | res -> res
  end
and
evaluate st env fps [Log lop e1 e2] =
  match fix_clock st (evaluate st env fps [e1]) with
  | (st', fps', Rval v1) ->
      match do_log lop (head v1) e2 with
      | Just (Exp e) -> evaluate st' env fps' [e]
      | Just (Val v) -> (st', fps', Rval [v])
      | Nothing -> (st', fps', Rerr (Rabort Rtype_error))
      end
  | res -> res
  end
and
evaluate st env fps [If e1 e2 e3] =
  match fix_clock st (evaluate st env fps [e1]) with
  | (st', fps', Rval v) ->
    match do_if (head v) e2 e3 with
    | Just e -> evaluate st' env fps' [e]
    | Nothing -> (st', fps', Rerr (Rabort Rtype_error))
    end
  | res -> res
  end
and
evaluate st env fps [Mat e pes] =
  match fix_clock st (evaluate st env fps [e]) with
  | (st', fps', Rval v) ->
      evaluate_match st' env fps' (head v) pes bind_exn_v
  | res -> res
  end
and
evaluate st env fps [Let xo e1 e2] =
  match fix_clock st (evaluate st env fps [e1]) with
  | (st', fps', Rval v) -> evaluate st' <| env with v = nsOptBind xo (head v) env.v |> fps' [e2]
  | res -> res
  end
and
evaluate st env fps [Letrec funs e] =
  if allDistinct (map (fun (x,y,z) -> x) funs) then
    evaluate st <| env with v = build_rec_env funs env env.v |> fps [e]
  else
    (st, fps, Rerr (Rabort Rtype_error))
and
evaluate st env fps [Tannot e t] =
  evaluate st env fps [e]
and
evaluate st env fps [Lannot e l] =
  evaluate st env fps [e]
and
evaluate st env fps [FpOptimise opt e] =
  match fix_clock st (evaluate st env (<| fps with canOpt = true |>) [e]) with
  | (st', fps', Rval vs) ->
    (st',
        <| fps' with canOpt = fps.canOpt |>,
        match (do_fpoptimise opt vs) with
        | Just v -> list_result (Rval v)
        | Nothing -> Rerr (Rabort Rtype_error)
        end)
  | (st', fps', Rerr e) ->
    (st', <| fps' with canOpt = fps.canOpt |>, Rerr e)
  | res -> res
  end
and
evaluate_match st env fps v [] err_v = (st, fps, Rerr (Rraise err_v))
and
evaluate_match st env fps v ((p,e)::pes) err_v  =
  if allDistinct (pat_bindings p []) then
    match pmatch env.c st.refs p v [] with
    | Match env_v' -> evaluate st <| env with v = nsAppend (alist_to_ns env_v') env.v |> fps [e]
    | No_match -> evaluate_match st env fps v pes err_v
    | Match_type_error -> (st, fps, Rerr (Rabort Rtype_error))
    end
  else (st, fps, Rerr (Rabort Rtype_error))

declare {isabelle} rename function evaluate = fun_evaluate
declare {isabelle} rename function evaluate_match = fun_evaluate_match

val evaluate_decs :
  forall 'ffi. state 'ffi -> sem_env v -> fp_state -> list dec -> state 'ffi * fp_state * result (sem_env v) v
let rec
  evaluate_decs st env fps [] = (st, fps, Rval <| v = nsEmpty; c = nsEmpty |>)
and
 evaluate_decs st env fps (d1::d2::ds) =
  match evaluate_decs st env fps [d1] with
  | (st1, fps1, Rval env1) ->
    match evaluate_decs st1 (extend_dec_env env1 env) fps1 (d2::ds) with
    | (st2, fps2, r) -> (st2, fps2, combine_dec_result env1 r)
    end
  | res -> res
  end
and
 evaluate_decs st env fps [Dlet locs p e] =
  if allDistinct (pat_bindings p []) then
    match evaluate st env fps [e] with
    | (st', fps', Rval v) ->
        (st', fps',
         match pmatch env.c st'.refs p (head v) [] with
         | Match new_vals -> Rval <| v = alist_to_ns new_vals; c = nsEmpty |>
         | No_match -> Rerr (Rraise bind_exn_v)
         | Match_type_error -> Rerr (Rabort Rtype_error)
         end)
    | (st', fps', Rerr err) -> (st', fps', Rerr err)
    end
  else
    (st, fps, Rerr (Rabort Rtype_error))
and
 evaluate_decs st env fps [Dletrec locs funs] =
  (st, fps,
   if allDistinct (map (fun (x,y,z) -> x) funs) then
     Rval <| v = build_rec_env funs env nsEmpty; c = nsEmpty |>
   else
     Rerr (Rabort Rtype_error))
and
 evaluate_decs st env fps [Dtype locs tds] =
  if List.all check_dup_ctors tds then
    (<| st with next_type_stamp = st.next_type_stamp + List.length tds |>,
     fps,
     Rval <| v = nsEmpty; c = build_tdefs st.next_type_stamp tds |>)
  else
    (st, fps, Rerr (Rabort Rtype_error))
and
 evaluate_decs st env fps [Dtabbrev locs tvs tn t] =
  (st, fps, Rval <| v = nsEmpty; c = nsEmpty |>)
and
 evaluate_decs st env fps [Dexn locs cn ts] =
  (<| st with next_exn_stamp = st.next_exn_stamp + 1 |>,
   fps,
   Rval <| v = nsEmpty; c = nsSing cn (length ts, ExnStamp st.next_exn_stamp) |>)
and
 evaluate_decs st env fps [Dmod mn ds] =
  match  evaluate_decs st env fps ds with
  | (st', fps', r) ->
      (st', fps',
       match r with
       | Rval env' -> Rval <| v = nsLift mn env'.v; c = nsLift mn env'.c |>
       | Rerr err -> Rerr err
       end)
  end
and
 evaluate_decs st env fps [Dlocal lds ds] =
  match evaluate_decs st env fps lds with
  | (st1, fps1, Rval env1) ->
    evaluate_decs st1 (extend_dec_env env1 env) fps1 ds
  | res -> res
  end

declare {isabelle} rename function evaluate_decs = fun_evaluate_decs
