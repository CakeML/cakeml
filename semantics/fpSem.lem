(*
  Definitions of the floating point operations used in CakeML.
*)
open import Pervasives
open import Lib
open import FpOpt
open import FpValTree

open import {hol} `machine_ieeeTheory`
open import {isabelle} `IEEE_Floating_Point.FP64`

type rounding
declare hol target_rep type rounding = `rounding`
declare isabelle target_rep type rounding = `roundmode`

val fp64_lessThan     : word64 -> word64 -> bool
val fp64_lessEqual    : word64 -> word64 -> bool
val fp64_greaterThan  : word64 -> word64 -> bool
val fp64_greaterEqual : word64 -> word64 -> bool
val fp64_equal        : word64 -> word64 -> bool
declare hol    target_rep function fp64_lessThan = `fp64_lessThan`
declare hol    target_rep function fp64_lessEqual = `fp64_lessEqual`
declare hol    target_rep function fp64_greaterThan = `fp64_greaterThan`
declare hol    target_rep function fp64_greaterEqual = `fp64_greaterEqual`
declare hol    target_rep function fp64_equal = `fp64_equal`
declare isabelle    target_rep function fp64_lessThan = `fp64_lessThan`
declare isabelle    target_rep function fp64_lessEqual = `fp64_lessEqual`
declare isabelle    target_rep function fp64_greaterThan = `fp64_greaterThan`
declare isabelle    target_rep function fp64_greaterEqual = `fp64_greaterEqual`
declare isabelle    target_rep function fp64_equal = `fp64_equal`

val fp64_isNan      :word64 -> bool
declare hol         target_rep function fp64_isNan = `fp64_isNan`
declare isabelle    target_rep function fp64_isNan = `fp64_isNan`

val fp64_abs    : word64 -> word64
val fp64_negate : word64 -> word64
val fp64_sqrt   : rounding -> word64 -> word64
declare hol    target_rep function fp64_abs = `fp64_abs`
declare hol    target_rep function fp64_negate = `fp64_negate`
declare hol    target_rep function fp64_sqrt = `fp64_sqrt`
declare isabelle    target_rep function fp64_abs = `fp64_abs`
declare isabelle    target_rep function fp64_negate = `fp64_negate`
declare isabelle    target_rep function fp64_sqrt = `fp64_sqrt`

val fp64_add : rounding -> word64 -> word64 -> word64
val fp64_sub : rounding -> word64 -> word64 -> word64
val fp64_mul : rounding -> word64 -> word64 -> word64
val fp64_div : rounding -> word64 -> word64 -> word64
declare hol    target_rep function fp64_add = `fp64_add`
declare hol    target_rep function fp64_sub = `fp64_sub`
declare hol    target_rep function fp64_mul = `fp64_mul`
declare hol    target_rep function fp64_div = `fp64_div`
declare isabelle    target_rep function fp64_add = `fp64_add`
declare isabelle    target_rep function fp64_sub = `fp64_sub`
declare isabelle    target_rep function fp64_mul = `fp64_mul`
declare isabelle    target_rep function fp64_div = `fp64_div`

val fp64_mul_add : rounding -> word64 -> word64 -> word64 -> word64
declare hol    target_rep function fp64_mul_add = `fp64_mul_add`
declare isabelle    target_rep function fp64_mul_add = `fp64_mul_add`

val roundTiesToEven : rounding
declare hol    target_rep function roundTiesToEven = `roundTiesToEven`
declare isabelle    target_rep function roundTiesToEven = `To_nearest`

val fp_cmp : fp_cmp -> word64 -> word64 -> bool
let fp_cmp_comp fop = match fop with
  | FP_Less -> fp64_lessThan
  | FP_LessEqual -> fp64_lessEqual
  | FP_Greater -> fp64_greaterThan
  | FP_GreaterEqual -> fp64_greaterEqual
  | FP_Equal -> fp64_equal
end

val fp_pred: fp_pred -> word64 -> bool
let fp_pred_comp fp = match fp with
  | FP_NaN -> fp64_isNan
end

val fp_uop : fp_uop -> word64 -> word64
let fp_uop_comp fop = match fop with
  | FP_Abs -> fp64_abs
  | FP_Neg -> fp64_negate
  | FP_Sqrt -> fp64_sqrt roundTiesToEven
end

val fp_bop : fp_bop -> word64 -> word64 -> word64
let fp_bop_comp fop = match fop with
  | FP_Add -> fp64_add roundTiesToEven
  | FP_Sub -> fp64_sub roundTiesToEven
  | FP_Mul -> fp64_mul roundTiesToEven
  | FP_Div -> fp64_div roundTiesToEven
end

let fpfma v1 v2 v3 = fp64_mul_add roundTiesToEven v2 v3 v1

val fp_top : fp_top -> word64 -> word64 -> word64 -> word64
let fp_top_comp fop = match fop with
  | FP_Fma -> fpfma
end

val fp_sc : forall 'v. sc -> 'v -> 'v
let fp_sc_comp sc v = match sc with
  | Opt -> v
end

type result = | Fp_bool of bool | Fp_word of word64

val compress: fp_val -> maybe result
let rec compress (Fp_const w1) = Just (Fp_word w1)
    and compress (Fp_uop u1 v1) =
        match compress v1 with
        | Just (Fp_word w1) -> Just (Fp_word (fp_uop_comp u1 w1))
        | _ -> Nothing
        end
    and compress (Fp_bop b v1 v2) =
        match (compress v1, compress v2) with
        | (Just (Fp_word w1), Just (Fp_word w2)) ->
          Just (Fp_word (fp_bop_comp b w1 w2))
        end
    and compress (Fp_top t v1 v2 v3) =
        match (compress v1, compress v2, compress v3) with
        | (Just (Fp_word w1), Just (Fp_word w2), Just (Fp_word w3)) ->
          Just (Fp_word (fp_top_comp t w1 w2 w3))
        end
    and compress (Fp_pred p v1) =
        match compress v1 with
        | Just (Fp_word w1) -> Just (Fp_bool (fp_pred_comp p w1))
        | _ -> Nothing
        end
    and compress (Fp_cmp cmp v1 v2) =
        match (compress v1, compress v2) with
        | (Just (Fp_word w1), Just (Fp_word w2)) ->
          Just (Fp_bool (fp_cmp_comp cmp w1 w2))
        end
    and compress (Fp_sc sc v) = compress v

val eqvalTree: fp_val -> fp_val -> bool
let rec eqValTree v1 v2 = (compress v1 = compress v2)