(*
  Definitions of the floating point operations used in CakeML.
*)
open import Pervasives
open import Lib
open import FpOpt
open import FpValTree

open import {hol} `machine_ieeeTheory`
open import {isabelle} `IEEE_Floating_Point.FP64`

type rounding
declare hol target_rep type rounding = `rounding`
declare isabelle target_rep type rounding = `roundmode`

declare {isabelle} rename type fp_cmp = fp_cmp_op
declare {isabelle} rename type fp_uop = fp_uop_op
declare {isabelle} rename type fp_bop = fp_bop_op
declare {isabelle} rename type fp_top = fp_top_op

(**
  This defines the floating-point semantics operating on 64-bit words
**)
val fp64_lessThan     : word64 -> word64 -> bool
val fp64_lessEqual    : word64 -> word64 -> bool
val fp64_greaterThan  : word64 -> word64 -> bool
val fp64_greaterEqual : word64 -> word64 -> bool
val fp64_equal        : word64 -> word64 -> bool
declare hol    target_rep function fp64_lessThan = `fp64_lessThan`
declare hol    target_rep function fp64_lessEqual = `fp64_lessEqual`
declare hol    target_rep function fp64_greaterThan = `fp64_greaterThan`
declare hol    target_rep function fp64_greaterEqual = `fp64_greaterEqual`
declare hol    target_rep function fp64_equal = `fp64_equal`
declare isabelle    target_rep function fp64_lessThan = `fp64_lessThan`
declare isabelle    target_rep function fp64_lessEqual = `fp64_lessEqual`
declare isabelle    target_rep function fp64_greaterThan = `fp64_greaterThan`
declare isabelle    target_rep function fp64_greaterEqual = `fp64_greaterEqual`
declare isabelle    target_rep function fp64_equal = `fp64_equal`

val fp64_isNan      :word64 -> bool
declare hol         target_rep function fp64_isNan = `fp64_isNan`
declare isabelle    target_rep function fp64_isNan = `fp64_isNan`

val fp64_abs    : word64 -> word64
val fp64_negate : word64 -> word64
val fp64_sqrt   : rounding -> word64 -> word64
declare hol    target_rep function fp64_abs = `fp64_abs`
declare hol    target_rep function fp64_negate = `fp64_negate`
declare hol    target_rep function fp64_sqrt = `fp64_sqrt`
declare isabelle    target_rep function fp64_abs = `fp64_abs`
declare isabelle    target_rep function fp64_negate = `fp64_negate`
declare isabelle    target_rep function fp64_sqrt = `fp64_sqrt`

val fp64_add : rounding -> word64 -> word64 -> word64
val fp64_sub : rounding -> word64 -> word64 -> word64
val fp64_mul : rounding -> word64 -> word64 -> word64
val fp64_div : rounding -> word64 -> word64 -> word64
declare hol    target_rep function fp64_add = `fp64_add`
declare hol    target_rep function fp64_sub = `fp64_sub`
declare hol    target_rep function fp64_mul = `fp64_mul`
declare hol    target_rep function fp64_div = `fp64_div`
declare isabelle    target_rep function fp64_add = `fp64_add`
declare isabelle    target_rep function fp64_sub = `fp64_sub`
declare isabelle    target_rep function fp64_mul = `fp64_mul`
declare isabelle    target_rep function fp64_div = `fp64_div`

val fp64_mul_add : rounding -> word64 -> word64 -> word64 -> word64
declare hol    target_rep function fp64_mul_add = `fp64_mul_add`
declare isabelle    target_rep function fp64_mul_add = `fp64_mul_add`

val roundTiesToEven : rounding
declare hol    target_rep function roundTiesToEven = `roundTiesToEven`
declare isabelle    target_rep function roundTiesToEven = `To_nearest`

val fp_cmp_comp : fp_cmp -> word64 -> word64 -> bool
let fp_cmp_comp fop = match fop with
  | FP_Less -> fp64_lessThan
  | FP_LessEqual -> fp64_lessEqual
  | FP_Greater -> fp64_greaterThan
  | FP_GreaterEqual -> fp64_greaterEqual
  | FP_Equal -> fp64_equal
end

val fp_pred_comp : fp_pred -> word64 -> bool
let fp_pred_comp fp = match fp with
  | FP_NaN -> fp64_isNan
end

val fp_uop_comp : fp_uop -> word64 -> word64
let fp_uop_comp fop = match fop with
  | FP_Abs -> fp64_abs
  | FP_Neg -> fp64_negate
  | FP_Sqrt -> fp64_sqrt roundTiesToEven
end

val fp_bop_comp : fp_bop -> word64 -> word64 -> word64
let fp_bop_comp fop = match fop with
  | FP_Add -> fp64_add roundTiesToEven
  | FP_Sub -> fp64_sub roundTiesToEven
  | FP_Mul -> fp64_mul roundTiesToEven
  | FP_Div -> fp64_div roundTiesToEven
end

let fpfma v1 v2 v3 = fp64_mul_add roundTiesToEven v2 v3 v1

val fp_top_comp : fp_top -> word64 -> word64 -> word64 -> word64
let fp_top_comp fop = match fop with
  | FP_Fma -> fpfma
end

val fp_opt_comp: forall 'v. fp_opt -> 'v -> 'v
let fp_opt_comp sc v = match sc with
  | Opt -> v
end

(* Compression function for value trees,
   evaluating lazy trees into word64 or bool *)
val compress_word: fp_word_val -> word64
let rec compress_word (Fp_const w1) = w1
    and compress_word (Fp_uop u1 v1) = fp_uop_comp u1 (compress_word v1)
    and compress_word (Fp_bop b v1 v2) =
        fp_bop_comp b (compress_word v1) (compress_word v2)
    and compress_word (Fp_top t v1 v2 v3) =
        (fp_top_comp t (compress_word v1) (compress_word v2) (compress_word v3))
    and compress_word (Fp_wopt sc v) = compress_word v

val compress_bool : fp_bool_val -> bool
let rec compress_bool (Fp_pred p v1) = fp_pred_comp p (compress_word v1)
    and compress_bool (Fp_cmp cmp v1 v2) =
        fp_cmp_comp cmp (compress_word v1) (compress_word v2)
    and compress_bool (Fp_bopt sc v) = compress_bool v

val eqWordTree: fp_word_val -> fp_word_val -> bool
let rec eqWordTree (Fp_const w1) (Fp_const w2) = (w1 = w2)
    and eqWordTree (Fp_uop u1 v1) (Fp_uop u2 v2) = (u1 = u2 && eqWordTree v1 v2)
    and eqWordTree (Fp_bop b1 v11 v12) (Fp_bop b2 v21 v22) =
        (b1 = b2 && eqWordTree v11 v21 && eqWordTree v12 v22)
    and eqWordTree (Fp_top t1 v11 v12 v13) (Fp_top t2 v21 v22 v23) =
        (t1 = t2 && eqWordTree v11 v21 && eqWordTree v12 v22 && eqWordTree v13 v23)
    and eqWordTree (Fp_wopt sc1 v1) (Fp_wopt sc2 v2) = (sc1 = sc2 && eqWordTree v1 v2)
    and eqWordTree _ _ = false

val eqBoolTree: fp_bool_val -> fp_bool_val -> bool
let rec eqBoolTree (Fp_pred p1 v1) (Fp_pred p2 v2) = (p1 = p2 && eqWordTree v1 v2)
    and eqBoolTree (Fp_cmp cmp1 v11 v12) (Fp_cmp cmp2 v21 v22) =
        (cmp1 = cmp2 && eqWordTree v11 v21 && eqWordTree v12 v22)
    and eqBoolTree (Fp_bopt sc1 v1) (Fp_bopt sc2 v2) = (sc1 = sc2 && eqBoolTree v1 v2)
    and eqBoolTree _ _ = false
