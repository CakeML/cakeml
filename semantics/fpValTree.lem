(*
  Definition of floating point value trees for CakeML
*)
open import Pervasives
open import Lib

type sc = | Opt
type fp_cmp = FP_Less | FP_LessEqual | FP_Greater | FP_GreaterEqual | FP_Equal
type fp_pred = | FP_NaN
type fp_uop = FP_Abs | FP_Neg | FP_Sqrt
type fp_bop = FP_Add | FP_Sub | FP_Mul | FP_Div
type fp_top = | FP_Fma

declare {isabelle} rename type fp_cmp = fp_cmp_op
declare {isabelle} rename type fp_uop = fp_uop_op
declare {isabelle} rename type fp_bop = fp_bop_op
declare {isabelle} rename type fp_top = fp_top_op

type fp_val =
     | Fp_const of word64
     | Fp_pred of fp_pred * fp_val
     | Fp_cmp of fp_cmp * fp_val * fp_val
     | Fp_uop of fp_uop * fp_val
     | Fp_bop of fp_bop * fp_val * fp_val
     | Fp_top of fp_top * fp_val * fp_val * fp_val
     | Fp_sc of sc * fp_val

val fp_pred: fp_pred -> fp_val -> fp_val
let fp_pred fop f1 = Fp_pred fop f1

val fp_cmp : fp_cmp -> fp_val -> fp_val -> fp_val
let fp_cmp fop f1 f2 = Fp_cmp fop f1 f2

val fp_uop : fp_uop -> fp_val -> fp_val
let fp_uop fop f1 = Fp_uop fop f1

val fp_bop : fp_bop -> fp_val -> fp_val -> fp_val
let fp_bop fop f1 f2 = Fp_bop fop f1 f2

val fp_top : fp_top -> fp_val -> fp_val -> fp_val -> fp_val
let fp_top fop f1 f2 f3 = Fp_top fop f1 f2 f3

val isFpWordOp: fp_val -> bool
let rec isFpWordOp (Fp_const _) = true
    and isFpWordOp (Fp_uop _ v) = isFpWordOp v
    and isFpWordOp (Fp_bop _ v1 v2) = isFpWordOp v1 && isFpWordOp v2
    and isFpWordOp (Fp_top _ v1 v2 v3) =
      isFpWordOp v1 && isFpWordOp v2 && isFpWordOp v3
    and isFpWordOp (Fp_sc _ v) = isFpWordOp v
    and isFpWordOp _ = false

val isFpBoolOp: fp_val -> bool
let rec isFpBoolOp (Fp_pred _ v) = isFpWordOp v
    and isFpBoolOp (Fp_cmp _ v1 v2) = isFpWordOp v1 && isFpWordOp v2
    and isFpBoolOp (Fp_sc _ v) = isFpBoolOp v
    and isFpBoolOp _ = false