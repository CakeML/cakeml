INCLUDES = $(HOLDIR)/examples/formal-languages/context-free\
					 $(HOLDIR)/examples/fun-op-sem/lprefix_lub\
					 $(CAKEMLDIR)/developers $(CAKEMLDIR)/misc\
					 ffi

all: $(DEFAULT_TARGETS) README.md addancs
.PHONY: all

#LEM_OPT = -wl_pat_comp ign  -wl_pat_exh  ign -wl_pat_fail ign -wl_unused_vars ign
LEM_OPT = -wl_unused_vars ign -suppress_renaming -auxiliary_level none

SRC = fpSem semanticPrimitives evaluate typeSystem primTypes
LEMS = $(patsubst %,%.lem,$(SRC))
GENS = $(patsubst %,%Script.sml,$(SRC))
all: $(GENS)

LEMLIB = $(CAKEMLDIR)/misc/lem_lib_stub/lib.lem

LEM_CMD = lem $(LEM_OPT) -i $(LEMLIB) -i ffi/ffi.lem -hol

$(GENS): $(LEMS) $(LEMLIB) ffi/ffi.lem
	if type lem;\
	then $(LEM_CMD) $(LEMS);\
	else touch $(GENS); fi

astScript.sml: ast.lem namespace.lem $(LEMLIB) ffi/ffi.lem addancs
	if type lem; then \
          $(LEM_CMD) $< && ./addancs $@ integer words string namespace location; \
        else touch astScript.sml ; fi
all: astScript.sml

tokensScript.sml: tokens.lem $(LEMLIB) ffi/ffi.lem addancs
	if type lem; then \
          $(LEM_CMD) $< && ./addancs $@ integer string ; \
        else touch $@ ; fi
all: tokensScript.sml

namespaceScript.sml: namespace.lem $(LEMLIB) ffi/ffi.lem addancs
	if type lem; then \
          $(LEM_CMD) $< && ./addancs $@ alist ; \
        else touch namespaceScript.sml ; fi
all: namespaceScript.sml

OTHER_SCRIPTS = cmlPtreeConversion gram lexer_fun semantics termination tokenUtils

README_SOURCES = grammar.txt addancs.sml astPP.sml\
	$(patsubst %,%Script.sml,$(OTHER_SCRIPTS))\
	$(wildcard *Syntax.sml) $(wildcard *Lib.sml) $(wildcard *.lem)
DIRS = $(wildcard */)
README.md: $(CAKEMLDIR)/developers/readme_gen readmePrefix $(patsubst %,%readmePrefix,$(DIRS)) $(README_SOURCES)
	$(protect $(CAKEMLDIR)/developers/readme_gen) $(README_SOURCES)

ifdef POLY

EXTRA_CLEANS = addancs

ifdef RELOCBUILD
RELOC_FIXUP = $(protect $(HOLDIR)/tools/set_mtime/set_mtime.exe) addancs addancs.sml
else
RELOC_FIXUP = :
endif

addancs: addancs.sml
	$(POLYC) -o $@ $< && $(RELOC_FIXUP)

endif
