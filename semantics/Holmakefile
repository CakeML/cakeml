OPTIONS = QUIT_ON_FAILURE
INCLUDES = ../misc $(HOLDIR)/examples/formal-languages/context-free $(HOLDIR)/examples/fun-op-sem/lprefix_lub ffi

THYFILES = $(patsubst %Script.sml,%Theory.uo,$(wildcard *.sml))
TARGETS0 = $(patsubst %Theory.sml,,$(THYFILES))
TARGETS = $(patsubst %.sml,%.uo,$(TARGETS0))
all: $(TARGETS) addancs
.PHONY: all

#LEM_OPT = -wl_pat_comp ign  -wl_pat_exh  ign -wl_pat_fail ign -wl_unused_vars ign
LEM_OPT = -wl_unused_vars ign

SRC = fpSem semanticPrimitives evaluate typeSystem primTypes
LEMS = $(patsubst %,%.lem,$(SRC))
GENS = $(patsubst %,%Script.sml,$(SRC))

LEMLIB = ../misc/lem_lib_stub/lib.lem

LEM_CMD = lem $(LEM_OPT) -suppress_renaming -auxiliary_level none -i $(LEMLIB) -i ffi/ffi.lem -hol

$(GENS): $(LEMS) $(LEMLIB) ffi/ffi.lem
	if type lem;\
	then $(LEM_CMD) $(LEMS);\
	else touch $(GENS); fi

astScript.sml: ast.lem namespace.lem $(LEMLIB) ffi/ffi.lem addancs
	if type lem; then \
          $(LEM_CMD) $< && ./addancs $@ integer words string namespace location; \
        else touch astScript.sml ; fi

tokensScript.sml: tokens.lem $(LEMLIB) ffi/ffi.lem addancs
	if type lem; then \
          $(LEM_CMD) $< && ./addancs $@ integer string ; \
        else touch $@ ; fi

namespaceScript.sml: namespace.lem $(LEMLIB) ffi/ffi.lem addancs
	if type lem; then \
          $(LEM_CMD) $< && ./addancs $@ integer words string alist; \
        else touch namespaceScript.sml ; fi

ifdef POLY
HOLHEAP = heap
EXTRA_CLEANS = $(HOLHEAP) $(HOLHEAP).o addancs

GRAMMAR_DEPS0 = peg pegexec
GRAMMAR_DEPS = $(patsubst %,$(HOLDIR)/examples/formal-languages/context-free/%Theory,$(GRAMMAR_DEPS0))

BARE_THYS = ../misc/preamble $(GRAMMAR_DEPS) ../misc/basicComputeLib ffi/ffiTheory
DEPS = $(patsubst %,%.uo,$(BARE_THYS))

ifdef RELOCBUILD
RELOC_FIXUP = $(protect $(HOLDIR)/tools/set_mtime/set_mtime.exe) addancs addancs.sml
else
RELOC_FIXUP = :
endif

all: $(HOLHEAP)

addancs: addancs.sml
	$(POLYC) -o $@ $< && $(RELOC_FIXUP)



$(HOLHEAP): $(DEPS)
	$(protect $(HOLDIR)/bin/buildheap) -o $(HOLHEAP) $(BARE_THYS) ASCIInumbersTheory
endif
