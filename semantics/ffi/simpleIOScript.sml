(*Generated by Lem from simpleIO.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasivesTheory lem_pervasives_extraTheory libTheory ffiTheory;

val _ = numLib.prefer_num();



val _ = new_theory "simpleIO"

(*
  A simple instantiation of the ffi type.
*)
(*open import Pervasives*)
(*open import Pervasives_extra*)
(*open import Lib*)
(*open import Ffi*)

val _ = Hol_datatype `
 simpleIO = <| input :  word8 llist; output :  word8 llist |>`;

val _ = Define `simpleSigs =
  [<| mlname := "isEof"; 
      cname  := "ffiisEof";
      retty  := SOME C_bool;
      args := [] |>;
   <| mlname := "getChar"; 
      cname  := "ffigetChar";
      retty  := SOME C_int;
      args := [] |>;
   <| mlname := "putChar"; 
      cname  := "ffiputChar";
      retty  := NONE;
      args := [C_array <| mutable := F ; with_length := F|> ] |>;
   <| mlname := "exit"; 
      cname  := "ffiexit";
      retty  := NONE;
      args := []|> ]`

(*val isEof : oracle_function simpleIO*)
val _ = Define `
 (isEof st input=
 (Oracle_return st [] (SOME (C_boolv (st.input = LNIL)))))`;

(*val getChar : oracle_function simpleIO*)
val _ = Define `
 (getChar st input=  
 (case LHD st.input of
      SOME y => Oracle_return (( st with<| input := (THE (LTL st.input)) |>)) []
                              (SOME (C_intv (w2i y)))
      | _ => Oracle_final FFI_failed
      ))`;

(*val putChar : oracle_function simpleIO*)
val _ = Define `
 (putChar st [C_arrayv input] =  
 ((case input of
    [] => Oracle_final FFI_failed
    | x::_ => Oracle_return (( st with<| output := (LCONS x st.output) |>)) [] NONE)))
/\ (putChar st _ = Oracle_final FFI_failed)`;

(*val exit : oracle_function simpleIO*)
val _ = Define `
 (exit st input=  Oracle_final FFI_diverged)`;

(*val simpleIO_oracle : oracle simpleIO*)
val _ = Define `
 ((simpleIO_oracle:string -> simpleIO ->(c_value)list ->(simpleIO)oracle_result) s st input=
   (if s = "isEof" then
    isEof st input
  else if s = "getChar" then
    getChar st input
  else if s = "putChar" then
    putChar st input
  else if s = "exit" then
    exit st input
  else
    Oracle_final FFI_failed))`;

val _ = export_theory()

