OPTIONS = QUIT_ON_FAILURE
INCLUDES = .. ../../misc ../../misc/lem_lib_stub ../ffi

all: $(DEFAULT_TARGETS) README.md

THYFILES = $(patsubst %Script.sml,%Theory.uo,$(wildcard *.sml))
TARGETS0 = $(patsubst %Theory.sml,,$(THYFILES))
TARGETS = $(patsubst %.sml,%.uo,$(TARGETS0))

all: $(TARGETS)
.PHONY: all

#LEM_OPT = -wl_pat_comp ign  -wl_pat_exh  ign -wl_pat_fail ign -wl_unused_vars ign
LEM_OPT = -wl_unused_vars ign

SRC = bigStep smallStep
LEMS = $(patsubst %,%.lem,$(SRC))
GENS = $(patsubst %,%Script.sml,$(SRC))

$(GENS): $(LEMS) ../../misc/lem_lib_stub/lib.lem ../ffi/ffi.lem ../semanticPrimitives.lem ../ast.lem
	if type lem;\
	then lem $(LEM_OPT) -suppress_renaming -auxiliary_level none -i ../../misc/lem_lib_stub/lib.lem -i ../ffi/ffi.lem -i ../ast.lem -i ../semanticPrimitives.lem -hol $(LEMS);\
	else touch $(GENS); fi

README_SOURCES = $(wildcard *Script.sml) $(wildcard *Lib.sml) $(wildcard *Syntax.sml) $(wildcard *.lem)
DIRS = $(wildcard */)
README.md: $(CAKEMLDIR)/developers/readme_gen readmePrefix $(patsubst %,%readmePrefix,$(DIRS)) $(README_SOURCES)
	$(CAKEMLDIR)/developers/readme_gen $(README_SOURCES)

ifdef POLY
HOLHEAP = heap
EXTRA_CLEANS = $(HOLHEAP) $(HOLHEAP).o

BARE_THYS = ../semanticPrimitivesTheory
DEPS = $(patsubst %,%.uo,$(BARE_THYS))

all: $(HOLHEAP)

$(HOLHEAP): $(DEPS)
	$(protect $(HOLDIR)/bin/buildheap) -o $(HOLHEAP) -b ../heap
endif
