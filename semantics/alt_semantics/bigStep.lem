open import Pervasives_extra
open import Lib
open import Namespace
open import Ast
open import SemanticPrimitives
open import Ffi

(* To get the definition of expression divergence to use in defining definition
 * divergence *)
open import SmallStep

(* ------------------------ Big step semantics -------------------------- *)

(* If the first argument is true, the big step semantics counts down how many
   functions applications have happened, and raises an exception when the counter
   runs out. *)

indreln [evaluate : forall 'ffi. bool -> sem_env v -> state 'ffi -> exp -> state 'ffi * result v v -> bool]
and [evaluate_list : forall 'ffi. bool -> sem_env v -> state 'ffi -> list exp -> state 'ffi * result (list v) v -> bool]
and [evaluate_match : forall 'ffi. bool -> sem_env v -> state 'ffi -> v -> list (pat * exp) -> v -> state 'ffi * result v v -> bool]

lit : forall ck env l s.
true
==>
evaluate ck env s (Lit l) (s, Rval (Litv l))

and

raise1 : forall ck env e s1 s2 v.
evaluate ck s1 env e (s2, Rval v)
==>
evaluate ck s1 env (Raise e) (s2, Rerr (Rraise v))

and

raise2 : forall ck env e s1 s2 err.
evaluate ck s1 env e (s2, Rerr err)
==>
evaluate ck s1 env (Raise e) (s2, Rerr err)

and

handle1 : forall ck s1 s2 env e v pes.
evaluate ck s1 env e (s2, Rval v)
==>
evaluate ck s1 env (Handle e pes) (s2, Rval v)

and

handle2 : forall ck s1 s2 env e pes v bv.
evaluate ck env s1 e (s2, Rerr (Rraise v)) &&
evaluate_match ck env s2 v pes v bv
==>
evaluate ck env s1 (Handle e pes) bv

and

handle3 : forall ck s1 s2 env e pes a.
evaluate ck env s1 e (s2, Rerr (Rabort a))
==>
evaluate ck env s1 (Handle e pes) (s2, Rerr (Rabort a))

and

con1 : forall ck env cn es vs s s' v.
do_con_check env.c cn (List.length es) &&
build_conv env.c cn (List.reverse vs) = Just v &&
evaluate_list ck env s (List.reverse es) (s', Rval vs)
==>
evaluate ck env s (Con cn es) (s', Rval v)

and

con2 : forall ck env cn es s.
not (do_con_check env.c cn (List.length es))
==>
evaluate ck env s (Con cn es) (s, Rerr (Rabort Rtype_error))

and

con3 : forall ck env cn es err s s'.
do_con_check env.c cn (List.length es) &&
evaluate_list ck env s (List.reverse es) (s', Rerr err)
==>
evaluate ck env s (Con cn es) (s', Rerr err)

and

var1 : forall ck env n v s.
nsLookup env.v n = Just v
==>
evaluate ck env s (Var n) (s, Rval v)

and

var2 : forall ck env n s.
nsLookup env.v n = Nothing
==>
evaluate ck env s (Var n) (s, Rerr (Rabort Rtype_error))

and

fn : forall ck env n e s.
true
==>
evaluate ck env s (Fun n e) (s, Rval (Closure env n e))

and

app1 : forall ck env es vs env' e bv s1 s2.
evaluate_list ck env s1 (List.reverse es) (s2, Rval vs) &&
do_opapp (List.reverse vs) = Just (env', e) &&
(ck --> s2.clock <> 0) &&
evaluate ck env' (if ck then <| s2 with clock = s2.clock - 1 |> else s2) e bv
==>
evaluate ck env s1 (App Opapp es) bv

and

app2 : forall ck env es vs env' e s1 s2.
evaluate_list ck env s1 (List.reverse es) (s2, Rval vs) &&
do_opapp (List.reverse vs) = Just (env', e) &&
s2.clock = 0 &&
ck
==>
evaluate ck env s1 (App Opapp es) (s2, Rerr (Rabort Rtimeout_error))

and

app3 : forall ck env es vs s1 s2.
evaluate_list ck env s1 (List.reverse es) (s2, Rval vs) &&
do_opapp (List.reverse vs) = Nothing
==>
evaluate ck env s1 (App Opapp es) (s2, Rerr (Rabort Rtype_error))

and

app4 : forall ck env op es vs res s1 s2 refs' ffi'.
evaluate_list ck env s1 (List.reverse es) (s2, Rval vs) &&
do_app (s2.refs,s2.ffi) op (List.reverse vs) = Just ((refs',ffi'), res) &&
op <> Opapp
==>
evaluate ck env s1 (App op es) (<| s2 with refs = refs'; ffi =ffi' |>, res)

and

app5 : forall ck env op es vs s1 s2.
evaluate_list ck env s1 (List.reverse es) (s2, Rval vs) &&
do_app (s2.refs,s2.ffi) op (List.reverse vs) = Nothing &&
op <> Opapp
==>
evaluate ck env s1 (App op es) (s2, Rerr (Rabort Rtype_error))

and

app6 : forall ck env op es err s1 s2.
evaluate_list ck env s1 (List.reverse es) (s2, Rerr err)
==>
evaluate ck env s1 (App op es) (s2, Rerr err)

and

log1 : forall ck env op e1 e2 v e' bv s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
do_log op v e2 = Just (Exp e') &&
evaluate ck env s2 e' bv
==>
evaluate ck env s1 (Log op e1 e2) bv

and

log2 : forall ck env op e1 e2 v bv s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
do_log op v e2 = Just (Val bv)
==>
evaluate ck env s1 (Log op e1 e2) (s2, Rval bv)

and

log3 : forall ck env op e1 e2 v s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
(do_log op v e2 = Nothing)
==>
evaluate ck env s1 (Log op e1 e2) (s2, Rerr (Rabort Rtype_error))

and

log4 : forall ck env op e1 e2 err s s'.
evaluate ck env s e1 (s', Rerr err)
==>
evaluate ck env s (Log op e1 e2) (s', Rerr err)

and

if1 : forall ck env e1 e2 e3 v e' bv s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
do_if v e2 e3 = Just e' &&
evaluate ck env s2 e' bv
==>
evaluate ck env s1 (If e1 e2 e3) bv

and

if2 : forall ck env e1 e2 e3 v s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
do_if v e2 e3 = Nothing
==>
evaluate ck env s1 (If e1 e2 e3) (s2, Rerr (Rabort Rtype_error))

and

if3 : forall ck env e1 e2 e3 err s s'.
evaluate ck env s e1 (s', Rerr err)
==>
evaluate ck env s (If e1 e2 e3) (s', Rerr err)

and

mat1 : forall ck env e pes v bv s1 s2.
evaluate ck env s1 e (s2, Rval v) &&
evaluate_match ck env s2 v pes bind_exn_v bv
==>
evaluate ck env s1 (Mat e pes) bv

and

mat2 : forall ck env e pes err s s'.
evaluate ck env s e (s', Rerr err)
==>
evaluate ck env s (Mat e pes) (s', Rerr err)

and

let1 : forall ck env n e1 e2 v bv s1 s2.
evaluate ck env s1 e1 (s2, Rval v) &&
evaluate ck <| env with v = nsOptBind n v env.v |> s2 e2 bv
==>
evaluate ck env s1 (Let n e1 e2) bv

and

let2 : forall ck env n e1 e2 err s s'.
evaluate ck env s e1 (s', Rerr err)
==>
evaluate ck env s (Let n e1 e2) (s', Rerr err)

and

letrec1 : forall ck env funs e bv s.
List.allDistinct (List.map (fun (x,y,z) -> x) funs) &&
evaluate ck <| env with v = build_rec_env funs env env.v |> s e bv
==>
evaluate ck env s (Letrec funs e) bv

and

letrec2 : forall ck env funs e s.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate ck env s (Letrec funs e) (s, Rerr (Rabort Rtype_error))

and

tannot : forall ck env e t s bv.
evaluate ck env s e bv
==>
evaluate ck env s (Tannot e t) bv

and

locannot : forall ck env e l s bv.
evaluate ck env s e bv
==>
evaluate ck env s (Lannot e l) bv

and

empty : forall ck env s.
true
==>
evaluate_list ck env s [] (s, Rval [])

and

cons1 : forall ck env e es v vs s1 s2 s3.
evaluate ck env s1 e (s2, Rval v) &&
evaluate_list ck env s2 es (s3, Rval vs)
==>
evaluate_list ck env s1 (e::es) (s3, Rval (v::vs))

and

cons2 : forall ck env e es err s s'.
evaluate ck env s e (s', Rerr err)
==>
evaluate_list ck env s (e::es) (s', Rerr err)

and

cons3 : forall ck env e es v err s1 s2 s3.
evaluate ck env s1 e (s2, Rval v) &&
evaluate_list ck env s2 es (s3, Rerr err)
==>
evaluate_list ck env s1 (e::es) (s3, Rerr err)

and

mat_empty : forall ck env v err_v s.
true
==>
evaluate_match ck env s v [] err_v (s, Rerr (Rraise err_v))

and

mat_cons1 : forall ck env env' v p pes e bv err_v s.
List.allDistinct (pat_bindings p []) &&
pmatch env.c s.refs p v [] = Match env' &&
evaluate ck <| env with v = nsAppend (alist_to_ns env') env.v |> s e bv
==>
evaluate_match ck env s v ((p,e)::pes) err_v bv

and

mat_cons2 : forall ck env v p e pes bv s err_v.
List.allDistinct (pat_bindings p []) &&
pmatch env.c s.refs p v [] = No_match &&
evaluate_match ck env s v pes err_v bv
==>
evaluate_match ck env s v ((p,e)::pes) err_v bv

and

mat_cons3 : forall ck env v p e pes s err_v.
pmatch env.c s.refs p v [] = Match_type_error
==>
evaluate_match ck env s v ((p,e)::pes) err_v (s, Rerr (Rabort Rtype_error))

and

mat_cons4 : forall ck env v p e pes s err_v.
not (List.allDistinct (pat_bindings p []))
==>
evaluate_match ck env s v ((p,e)::pes) err_v (s, Rerr (Rabort Rtype_error))

(* The set tid_or_exn part of the state tracks all of the types and exceptions
 * that have been declared *)
indreln [evaluate_dec : forall 'ffi. bool -> sem_env v -> state 'ffi -> dec ->
                state 'ffi * result (sem_env v) v -> bool]
and [evaluate_decs : forall 'ffi. bool -> sem_env v -> state 'ffi -> list dec ->
            state 'ffi * result (sem_env v) v -> bool]

dlet1 : forall ck env p e v env' s1 s2 locs.
evaluate ck env s1 e (s2, Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch env.c s2.refs p v [] = Match env'
==>
evaluate_dec ck env s1 (Dlet locs p e) (s2, Rval <| v = alist_to_ns env'; c = nsEmpty |>)

and

dlet2 : forall ck env p e v s1 s2 locs.
evaluate ck env s1 e (s2, Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch env.c s2.refs p v [] = No_match
==>
evaluate_dec ck env s1 (Dlet locs p e) (s2, Rerr (Rraise bind_exn_v))

and

dlet3 : forall ck env p e v s1 s2 locs.
evaluate ck env s1 e (s2, Rval v) &&
List.allDistinct (pat_bindings p []) &&
pmatch env.c s2.refs p v [] = Match_type_error
==>
evaluate_dec ck env s1 (Dlet locs p e) (s2, Rerr (Rabort Rtype_error))

and

dlet4 : forall ck env p e s locs.
not (List.allDistinct (pat_bindings p []))
==>
evaluate_dec ck env s (Dlet locs p e) (s, Rerr (Rabort Rtype_error))

and

dlet5 : forall ck env p e err s s' locs.
evaluate ck env s e (s', Rerr err) &&
List.allDistinct (pat_bindings p [])
==>
evaluate_dec ck env s (Dlet locs p e) (s', Rerr err)

and

dletrec1 : forall ck env funs s locs.
List.allDistinct (List.map (fun (x,y,z) -> x) funs)
==>
evaluate_dec ck env s (Dletrec locs funs) (s, Rval <| v = build_rec_env funs env nsEmpty; c = nsEmpty |>)

and

dletrec2 : forall ck env funs s locs.
not (List.allDistinct (List.map (fun (x,y,z) -> x) funs))
==>
evaluate_dec ck env s (Dletrec locs funs) (s, Rerr (Rabort Rtype_error))

and

dtype1 : forall ck env tds s locs.
List.all check_dup_ctors tds
==>
evaluate_dec ck env s (Dtype locs tds)
    (<| s with next_type_stamp = s.next_type_stamp + List.length tds |>,
     Rval <| v = nsEmpty; c = build_tdefs s.next_type_stamp tds |>)

and

dtype2 : forall ck env tds s locs.
not (List.all check_dup_ctors tds)
==>
evaluate_dec ck env s (Dtype locs tds) (s, Rerr (Rabort Rtype_error))

and

dtabbrev : forall ck env tvs tn t s locs.
true
==>
evaluate_dec ck env s (Dtabbrev locs tvs tn t) (s, Rval <| v = nsEmpty; c = nsEmpty |>)

and

dexn : forall ck env cn ts s locs.
true
==>
evaluate_dec ck env s (Dexn locs cn ts)
    (<| s with next_exn_stamp = s.next_exn_stamp + 1 |>,
     Rval  <| v = nsEmpty; c = nsSing cn (length ts, ExnStamp s.next_exn_stamp) |>)

and

dmod1 : forall ck s1 s2 env ds mn new_env.
evaluate_decs ck env s1 ds (s2, Rval new_env)
==>
evaluate_dec ck env s1 (Dmod mn ds) (s2, Rval <| v = nsLift mn new_env.v; c = nsLift mn new_env.c |>)

and

dmod2 : forall ck s1 s2 env ds mn err.
evaluate_decs ck env s1 ds (s2, Rerr err)
==>
evaluate_dec ck env s1 (Dmod mn ds) (s2, Rerr err)

and

empty : forall ck env s.
true
==>
evaluate_decs ck env s [] (s, Rval <| v = nsEmpty; c = nsEmpty |>)

and

cons1 : forall ck s1 s2 env d ds e.
evaluate_dec ck env s1 d (s2, Rerr e)
==>
evaluate_decs ck env s1 (d::ds) (s2, Rerr e)

and

cons2 : forall ck s1 s2 s3 env d ds new_env r.
evaluate_dec ck env s1 d (s2, Rval new_env) &&
evaluate_decs ck (extend_dec_env new_env env) s2 ds (s3, r)
==>
evaluate_decs ck env s1 (d::ds) (s3, combine_dec_result new_env r)

(*
indreln [evaluate_top : forall 'ffi. bool -> sem_env v -> state 'ffi -> top ->
              state 'ffi * result (sem_env v) v -> bool]

tdec1 : forall ck s1 s2 env d new_env.
evaluate_dec ck env s1 d (s2, Rval new_env)
==>
evaluate_top ck env s1 (Tdec d) (s2, Rval new_env)
and

tdec2 : forall ck s1 s2 env d err.
evaluate_dec ck env s1 d (s2, Rerr err)
==>
evaluate_top ck env s1 (Tdec d) (s2, Rerr err)

and

tmod1 : forall ck s1 s2 env ds mn specs new_env.
evaluate_decs ck env s1 ds (s2, Rval new_env)
==>
evaluate_top ck env s1 (Tmod mn specs ds) (s2, Rval <| v = nsLift mn new_env.v; c = nsLift mn new_env.c |>)

and

tmod2 : forall ck s1 s2 env ds mn specs err.
evaluate_decs ck env s1 ds (s2, Rerr err)
==>
evaluate_top ck env s1 (Tmod mn specs ds) (s2, Rerr err)

indreln [evaluate_prog : forall 'ffi. bool -> sem_env v -> state 'ffi -> prog ->
             state 'ffi * result (sem_env v) v -> bool]

empty : forall ck env s.
true
==>
evaluate_prog ck env s [] (s, Rval <| v = nsEmpty; c = nsEmpty |>)

and

cons1 : forall ck s1 s2 s3 env top tops new_env r.
evaluate_top ck env s1 top (s2, Rval new_env) &&
evaluate_prog ck (extend_dec_env new_env env) s2 tops (s3,r)
==>
evaluate_prog ck env s1 (top::tops) (s3, combine_dec_result new_env r)

and

cons2 : forall ck s1 s2 env top tops err.
evaluate_top ck env s1 top (s2, Rerr err)
==>
evaluate_prog ck env s1 (top::tops) (s2, Rerr err)
*)

indreln [dec_diverges : forall 'ffi. sem_env v -> state 'ffi -> dec -> bool]
and [decs_diverges : forall 'ffi. sem_env v -> state 'ffi -> list dec -> bool]

dlet : forall env st locs p e.
List.allDistinct (pat_bindings p []) && e_diverges env (st.refs, st.ffi) e
==>
dec_diverges env st (Dlet locs p e)

and

dmod : forall st env ds mn.
decs_diverges env st ds
==>
dec_diverges env st (Dmod mn ds)

and

cons1 : forall st env d ds.
dec_diverges env st d
==>
decs_diverges env st (d::ds)

and

cons2 : forall s1 s2 env d ds new_env.
evaluate_dec false env s1 d (s2, Rval new_env) &&
decs_diverges (extend_dec_env new_env env) s2 ds
==>
decs_diverges env s1 (d::ds)

(*
indreln [top_diverges : forall 'ffi. sem_env v -> state 'ffi -> top -> bool]

tdec : forall st env d.
dec_diverges env st d
==>
top_diverges env st (Tdec d)

and

tmod : forall env s1 ds mn specs.
decs_diverges env s1 ds
==>
top_diverges env s1 (Tmod mn specs ds)

indreln [prog_diverges : forall 'ffi. sem_env v -> state 'ffi -> prog -> bool]

cons1 : forall st env top tops.
top_diverges env st top
==>
prog_diverges env st (top::tops)

and

cons2 : forall s1 s2 env top tops new_env.
evaluate_top false env s1 top (s2, Rval new_env) &&
prog_diverges (extend_dec_env new_env env) s2 tops
==>
prog_diverges env s1 (top::tops)
*)
