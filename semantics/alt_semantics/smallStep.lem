open import Pervasives_extra
open import Lib
open import Ast
open import Namespace
open import SemanticPrimitives
open import Ffi

(* Small-step semantics for expression only.  Modules and definitions have
 * big-step semantics only *)

(* Evaluation contexts
 * The hole is denoted by the unit type
 * The env argument contains bindings for the free variables of expressions in
     the context *)
type ctxt_frame =
  | Craise of unit
  | Chandle of unit * list (pat * exp)
  | Capp of op * list v * unit * list exp
  | Clog of lop * unit * exp
  | Cif of unit * exp * exp
  (* The value is raised if none of the patterns match *)
  | Cmat of unit * list (pat * exp) * v
  | Clet of maybe varN * unit * exp
  (* Evaluating a constructor's arguments
   * The v list should be in reverse order. *)
  | Ccon of maybe (id modN conN) * list v * unit * list exp
  | Ctannot of unit * ast_t
  | Clannot of unit * locs
type ctxt = ctxt_frame * sem_env v

(* State for CEK-style expression evaluation
 * - constructor data
 * - the store
 * - the environment for the free variables of the current expression
 * - the current expression to evaluate, or a value if finished
 * - the context stack (continuation) of what to do once the current expression
 *   is finished.  Each entry has an environment for it's free variables *)

type small_state 'ffi = sem_env v * store_ffi 'ffi v * exp_or_val * list ctxt

type e_step_result 'ffi =
  | Estep of small_state 'ffi
  | Eabort of abort
  | Estuck

(* The semantics are deterministic, and presented functionally instead of
 * relationally for proof rather that readability; the steps are very small: we
 * push individual frames onto the context stack instead of finding a redex in a
 * single step *)

val push : forall 'ffi. sem_env v -> store_ffi 'ffi v -> exp -> ctxt_frame -> list ctxt -> e_step_result 'ffi
let push env s e c' cs = Estep (env, s, Exp e, ((c',env)::cs))

val return : forall 'ffi. sem_env v -> store_ffi 'ffi v -> v -> list ctxt -> e_step_result 'ffi
let return env s v c = Estep (env, s, Val v, c)

val application : forall 'ffi. op -> sem_env v -> store_ffi 'ffi v -> list v -> list ctxt -> e_step_result 'ffi
let application op env s vs c =
  match op with
    | Opapp ->
      match do_opapp vs with
        | Just (env,e) -> Estep (env, s, Exp e, c)
        | Nothing -> Eabort Rtype_error
      end
    | _ ->
      match do_app s op vs with
        | Just (s',r) ->
          match r with
            | Rerr (Rraise v) -> Estep (env,s',Val v,((Craise (),env)::c))
            | Rerr (Rabort a) -> Eabort a
            | Rval v -> return env s' v c
          end
        | Nothing -> Eabort Rtype_error
      end
    end

(* apply a context to a value *)
val continue : forall 'ffi. store_ffi 'ffi v -> v -> list ctxt -> e_step_result 'ffi
let continue s v cs =
  match cs with
    | [] -> Estuck
    | (Craise (), env) :: c->
        match c with
          | [] -> Estuck
          | ((Chandle () pes,env') :: c) ->
              Estep (env,s,Val v,((Cmat () pes v, env')::c))
          | _::c -> Estep (env,s,Val v,((Craise (),env)::c))
        end
    | (Chandle () pes, env) :: c ->
        return env s v c
    | (Capp op vs () [], env) :: c ->
        application op env s (v::vs) c
    | (Capp op vs () (e::es), env) :: c ->
        push env s e (Capp op (v::vs) () es) c
    | (Clog l () e, env) :: c ->
        match do_log l v e with
          | Just (Exp e) -> Estep (env, s, Exp e, c)
          | Just (Val v) -> return env s v c
          | Nothing -> Eabort Rtype_error
        end
    | (Cif () e1 e2, env) :: c ->
        match do_if v e1 e2 with
          | Just e -> Estep (env, s, Exp e, c)
          | Nothing -> Eabort Rtype_error
        end
    | (Cmat () [] err_v, env) :: c ->
        Estep (env, s, Val err_v, ((Craise (), env) ::c))
    | (Cmat () ((p,e)::pes) err_v, env) :: c ->
        if List.allDistinct (pat_bindings p []) then
          match pmatch env.c (fst s) p v [] with
            | Match_type_error -> Eabort Rtype_error
            | No_match -> Estep (env, s, Val v, ((Cmat () pes err_v,env)::c))
            | Match env' -> Estep (<| env with v = nsAppend (alist_to_ns env') env.v |>, s, Exp e, c)
          end
        else
          Eabort Rtype_error
    | (Clet n () e, env) :: c ->
        Estep (<| env with v = nsOptBind n v env.v |>, s, Exp e, c)
    | (Ccon n vs () [], env) :: c ->
        if do_con_check env.c n (List.length vs + 1) then
           match build_conv env.c n (v::vs) with
             | Nothing -> Eabort Rtype_error
             | Just v -> return env s v c
           end
        else
          Eabort Rtype_error
    | (Ccon n vs () (e::es), env) :: c ->
        if do_con_check env.c n (List.length vs + 1 + 1 + List.length es) then
          push env s e (Ccon n (v::vs) () es) c
        else
          Eabort Rtype_error
    | (Ctannot () t, env) :: c ->
        return env s v c
    | (Clannot () l, env) :: c ->
        return env s v c
  end

(* The single step expression evaluator.  Returns None if there is nothing to
 * do, but no type error.  Returns Type_error on encountering free variables,
 * mis-applied (or non-existent) constructors, and when the wrong kind of value
 * if given to a primitive.  Returns Bind_error when no pattern in a match
 * matches the value.  Otherwise it returns the next state *)

val e_step : forall 'ffi. small_state 'ffi -> e_step_result 'ffi
let e_step (env, s, ev, c) =
  match ev with
    | Val v  ->
        continue s v c
    | Exp e ->
        match e with
          | Lit l -> return env s (Litv l) c
          | Raise e ->
              push env s e (Craise ()) c
          | Handle e pes ->
              push env s e (Chandle () pes) c
          | Con n es ->
              if do_con_check env.c n (List.length es) then
                match List.reverse es with
                  | [] ->
                      match build_conv env.c n [] with
                        | Nothing -> Eabort Rtype_error
                        | Just v -> return env s v c
                      end
                  | e::es ->
                      push env s e (Ccon n [] () es) c
                end
              else
                Eabort Rtype_error
          | Var n ->
              match nsLookup env.v n with
                | Nothing -> Eabort Rtype_error
                | Just v ->
                    return env s v c
              end
          | Fun n e -> return env s (Closure env n e) c
          | App op es ->
              match List.reverse es with
                | [] -> application op env s [] c
                | (e::es) -> push env s e (Capp op [] () es) c
              end
          | Log l e1 e2 -> push env s e1 (Clog l () e2) c
          | If e1 e2 e3 -> push env s e1 (Cif () e2 e3) c
          | Mat e pes -> push env s e (Cmat () pes bind_exn_v) c
          | Let n e1 e2 -> push env s e1 (Clet n () e2) c
          | Letrec funs e ->
              if not (allDistinct (List.map (fun (x,y,z) -> x) funs)) then
                Eabort Rtype_error
              else
                Estep (<| env with v = build_rec_env funs env env.v |>,
                       s, Exp e, c)
          | Tannot e t -> push env s e (Ctannot () t) c
          | Lannot e l -> push env s e (Clannot () l) c
        end
  end

(* Define a semantic function using the steps *)

val e_step_reln : forall 'ffi. small_state 'ffi -> small_state 'ffi -> bool
val small_eval : forall 'ffi. sem_env v -> store_ffi 'ffi v -> exp -> list ctxt -> store_ffi 'ffi v * result v v -> bool

let e_step_reln st1 st2 =
  (e_step st1 = Estep st2)

let rec
small_eval env s e c (s', Rval v) =
  exists env'. (rtc (e_step_reln)) (env,s,Exp e,c) (env',s',Val v,[])
and
small_eval env s e c (s', Rerr (Rraise v)) =
  exists env' env''. (rtc (e_step_reln)) (env,s,Exp e,c) (env',s',Val v,[(Craise (), env'')])
and
small_eval env s e c (s', Rerr (Rabort a)) =
  exists env' e' c'.
    (rtc (e_step_reln)) (env,s,Exp e,c) (env',s',e',c') &&
    (e_step (env',s',e',c') = Eabort a)

val e_diverges : forall 'ffi. sem_env v -> store_ffi 'ffi v -> exp -> bool
let e_diverges env s e =
  forall env' s' e' c'.
    (rtc (e_step_reln)) (env,s,Exp e,[]) (env',s',e',c')
    -->
(exists env'' s'' e'' c''.
      e_step_reln (env',s',e',c') (env'',s'',e'',c''))
