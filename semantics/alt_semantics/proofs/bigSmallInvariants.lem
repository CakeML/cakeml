open import Pervasives
open import Lib
open import Namespace
open import Ast
open import SemanticPrimitives
open import SmallStep
open import BigStep

(* ------ Auxiliary relations for proving big/small step equivalence ------ *)

indreln
[evaluate_ctxt : forall 'ffi. sem_env v -> state 'ffi -> ctxt_frame -> v -> state 'ffi * result v v -> bool]

raise : forall env s v.
true
==>
evaluate_ctxt env s (Craise ()) v (s, Rerr (Rraise v))

and

handle : forall env s v pes.
true
==>
evaluate_ctxt env s (Chandle () pes) v (s, Rval v)

and

app1 : forall env e v vs1 vs2 es env' bv s1 s2.
evaluate_list false env s1 es (s2, Rval vs2) &&
do_opapp (List.reverse vs2 ++ [v] ++ vs1) = Just (env',e) &&
evaluate false env' s2 e bv
==>
evaluate_ctxt env s1 (Capp Opapp vs1 () es) v bv

and

app2 : forall env v vs1 vs2 es s1 s2.
evaluate_list false env s1 es (s2, Rval vs2) &&
do_opapp (List.reverse vs2 ++ [v] ++ vs1) = Nothing
==>
evaluate_ctxt env s1 (Capp Opapp vs1 () es) v (s2, Rerr (Rabort Rtype_error))

and

app3 : forall env op v vs1 vs2 es res s1 s2 new_refs new_ffi.
op <> Opapp &&
evaluate_list false env s1 es (s2, Rval vs2) &&
do_app (s2.refs,s2.ffi) op (List.reverse vs2 ++ [v] ++ vs1) = Just ((new_refs, new_ffi) ,res)
==>
evaluate_ctxt env s1 (Capp op vs1 () es) v (<| s2 with ffi = new_ffi; refs = new_refs |>, res)

and

app4 : forall env op v vs1 vs2 es s1 s2.
op <> Opapp &&
evaluate_list false env s1 es (s2, Rval vs2) &&
do_app (s2.refs, s2.ffi) op (List.reverse vs2 ++ [v] ++ vs1) = Nothing
==>
evaluate_ctxt env s1 (Capp op vs1 () es) v (s2, Rerr (Rabort Rtype_error))

and

app5 : forall env op es vs v err s s'.
evaluate_list false env s es (s', Rerr err)
==>
evaluate_ctxt env s (Capp op vs () es) v (s', Rerr err)

and

log1 : forall env op e2 v e' bv s.
do_log op v e2 = Just (Exp e') &&
evaluate false env s e' bv
==>
evaluate_ctxt env s (Clog op () e2) v bv

and

log2 : forall env op e2 v v' s.
do_log op v e2 = Just (Val v')
==>
evaluate_ctxt env s (Clog op () e2) v (s, Rval v')

and

log3 : forall env op e2 v s.
(do_log op v e2 = Nothing)
==>
evaluate_ctxt env s (Clog op () e2) v (s, Rerr (Rabort Rtype_error))

and
if1 : forall env e2 e3 v e' bv s.
do_if v e2 e3 = Just e' &&
evaluate false env s e' bv
==>
evaluate_ctxt env s (Cif () e2 e3) v bv

and

if2 : forall env e2 e3 v s.
do_if v e2 e3 = Nothing
==>
evaluate_ctxt env s (Cif () e2 e3) v (s, Rerr (Rabort Rtype_error))

and

mat : forall env pes v bv s err_v.
evaluate_match false env s v pes err_v bv
==>
evaluate_ctxt env s (Cmat () pes err_v) v bv

and

lt : forall env n e2 v bv s.
evaluate false <| env with v = nsOptBind n v env.v |> s e2 bv
==>
evaluate_ctxt env s (Clet n () e2) v bv

and

con1 : forall env cn es vs v vs' s1 s2 v'.
do_con_check env.c cn (List.length vs + List.length es + 1) &&
build_conv env.c cn (List.reverse vs' ++ [v] ++ vs) = Just v' &&
evaluate_list false env s1 es (s2, Rval vs')
==>
evaluate_ctxt env s1 (Ccon cn vs () es) v (s2, Rval v')

and

con2 : forall env cn es vs v s.
not (do_con_check env.c cn (List.length vs + List.length es + 1))
==>
evaluate_ctxt env s (Ccon cn vs () es) v (s, Rerr (Rabort Rtype_error))

and

con3 : forall env cn es vs v err s s'.
do_con_check env.c cn (List.length vs + List.length es + 1) &&
evaluate_list false env s es (s', Rerr err)
==>
evaluate_ctxt env s (Ccon cn vs () es) v (s', Rerr err)

and

tannot : forall env v s t.
true
==>
evaluate_ctxt env s (Ctannot () t) v (s, Rval v)

and

tannot : forall env v s l.
true
==>
evaluate_ctxt env s (Clannot () l) v (s, Rval v)

indreln
[evaluate_ctxts : forall 'ffi. state 'ffi -> list ctxt -> result v v -> state 'ffi * result v v -> bool]

empty : forall res s.
true
==>
evaluate_ctxts s [] res (s, res)

and

cons_val : forall c cs env v res bv s1 s2.
evaluate_ctxt env s1 c v (s2, res) &&
evaluate_ctxts s2 cs res bv
==>
evaluate_ctxts s1 ((c,env)::cs) (Rval v) bv

and

cons_err : forall c cs env err s bv.
evaluate_ctxts s cs (Rerr err) bv &&
((forall pes. c <> Chandle () pes) ||
 (forall v. err <> Rraise v))
==>
evaluate_ctxts s ((c,env)::cs) (Rerr err) bv

and

cons_handle : forall cs env s s' res1 res2 pes v.
evaluate_match false env s v pes v (s', res1) &&
evaluate_ctxts s' cs res1 res2
==>
evaluate_ctxts s ((Chandle () pes,env)::cs) (Rerr (Rraise v)) res2

indreln
[evaluate_state : forall 'ffi. small_state 'ffi -> state 'ffi * result v v -> bool]

exp : forall env e c res bv ffi refs st.
evaluate false env <| ffi = ffi; clock = 0; refs = refs; next_type_stamp = 0; next_exn_stamp = 0 |> e (st, res) &&
evaluate_ctxts st c res bv
==>
evaluate_state (env, (refs, ffi), Exp e, c) bv

and

vl : forall env ffi refs v c bv.
evaluate_ctxts <| ffi = ffi; clock = 0; refs = refs; next_type_stamp = 0; next_exn_stamp = 0 |> c (Rval v) bv
==>
evaluate_state (env, (refs, ffi), Val v, c) bv
