open import Pervasives_extra
open import Lib
open import Ast
open import Namespace
open import SemanticPrimitives

type type_ident = nat

(* Types *)
type t =
  (* Type variables that the user writes down ('a, 'b, etc.) *)
  | Tvar of tvarN
  (* deBruijn indexed type variables. *)
  | Tvar_db of nat
  (* Type applications *)
  | Tapp of list t * type_ident

(* Some abbreviations *)
let Tarray_num : type_ident = 0
let Tbool_num : type_ident = 1
let Tchar_num : type_ident = 2
let Texn_num : type_ident = 3
let Tfn_num : type_ident = 4
let Tint_num : type_ident = 5
let Tlist_num : type_ident = 6
let Tref_num : type_ident = 7
let Tstring_num : type_ident = 8
let Ttup_num : type_ident = 9
let Tvector_num : type_ident = 10
let Tword64_num : type_ident = 11
let Tword8_num : type_ident = 12
let Tword8array_num : type_ident = 13

(* The numbers for the primitive types *)
let prim_type_nums =
  [Tarray_num; Tchar_num; Texn_num; Tfn_num; Tint_num; Tref_num; Tstring_num; Ttup_num;
   Tvector_num; Tword64_num; Tword8_num; Tword8array_num]

let Tarray t = Tapp [t] Tarray_num
let Tbool = Tapp [] Tbool_num
let Tchar = Tapp [] Tchar_num
let Texn = Tapp [] Texn_num
let Tfn t1 t2 = Tapp [t1;t2] Tfn_num
let Tint = Tapp [] Tint_num
let Tlist t = Tapp [t] Tlist_num
let Tref t = Tapp [t] Tref_num
let Tstring = Tapp [] Tstring_num
let Ttup ts = Tapp ts Ttup_num
let Tvector t = Tapp [t] Tvector_num
let Tword64 = Tapp [] Tword64_num
let Tword8 = Tapp [] Tword8_num
let Tword8array = Tapp [] Tword8array_num

(* Check that the free type variables are in the given list. Every deBruijn
 * variable must be smaller than the first argument. So if it is 0, no deBruijn
 * indices are permitted. *)
val check_freevars : nat -> list tvarN -> t -> bool
let rec
check_freevars dbmax tvs (Tvar tv) =
  elem tv tvs
and
check_freevars dbmax tvs (Tapp ts tn) =
  List.all (check_freevars dbmax tvs) ts
and
check_freevars dbmax tvs (Tvar_db n) = n < dbmax

val check_freevars_ast : list tvarN -> ast_t -> bool
let rec
check_freevars_ast tvs (Atvar tv) =
  elem tv tvs
and
check_freevars_ast tvs (Attup ts) =
  List.all (check_freevars_ast tvs) ts
and
check_freevars_ast tvs (Atfun t1 t2) =
  check_freevars_ast tvs t1 && check_freevars_ast tvs t2
and
check_freevars_ast tvs (Atapp ts tn) =
  List.all (check_freevars_ast tvs) ts

(* Simultaneous substitution of types for type variables in a type *)
val type_subst : Map.map tvarN t -> t -> t
let rec
type_subst s (Tvar tv) =
  match Map.lookup tv s with
    | Nothing -> Tvar tv
    | Just(t) -> t
  end
and
type_subst s (Tapp ts tn) =
  Tapp (List.map (type_subst s) ts) tn
and
type_subst s (Tvar_db n) = Tvar_db n

(* Increment the deBruijn indices in a type by n levels, skipping all levels
 * less than skip. *)
val deBruijn_inc : nat -> nat -> t -> t
let rec
deBruijn_inc skip n (Tvar tv) = Tvar tv
and
deBruijn_inc skip n (Tvar_db m) =
  if m < skip then
    Tvar_db m
  else
    Tvar_db (m + n)
and
deBruijn_inc skip n (Tapp ts tn) = Tapp (List.map (deBruijn_inc skip n) ts) tn

(* skip the lowest given indices and replace the next (LENGTH ts) with the given types and reduce all the higher ones *)
val deBruijn_subst : nat -> list t -> t -> t
let rec
deBruijn_subst skip ts (Tvar tv) = Tvar tv
and
deBruijn_subst skip ts (Tvar_db n) =
  if not (n < skip) && (n < List.length ts + skip) then
    List_extra.nth ts (n - skip)
  else if not (n < skip) then
    Tvar_db (n - List.length ts)
  else
    Tvar_db n
and
deBruijn_subst skip ts (Tapp ts' tn) =
  Tapp (List.map (deBruijn_subst skip ts) ts') tn

(* Type environments *)
type tenv_val_exp =
  | Empty
  (* Binds several de Bruijn type variables *)
  | Bind_tvar of nat * tenv_val_exp
  (* The number is how many de Bruijn type variables the typescheme binds *)
  | Bind_name of varN * nat * t * tenv_val_exp

val bind_tvar : nat -> tenv_val_exp -> tenv_val_exp
let bind_tvar tvs tenvE = if tvs = 0 then tenvE else Bind_tvar tvs tenvE

val opt_bind_name : maybe varN -> nat -> t -> tenv_val_exp -> tenv_val_exp
let opt_bind_name n tvs t tenvE =
  match n with
    | Nothing -> tenvE
    | Just n' -> Bind_name n' tvs t tenvE
  end

val tveLookup : varN -> nat -> tenv_val_exp -> maybe (nat * t)
let rec
tveLookup n inc Empty = Nothing
and
tveLookup n inc (Bind_tvar tvs tenvE) = tveLookup n (inc + tvs) tenvE
and
tveLookup n inc (Bind_name n' tvs t tenvE) =
  if n' = n then
    Just (tvs, deBruijn_inc tvs inc t)
  else
    tveLookup n inc tenvE
declare termination_argument tveLookup = automatic

type tenv_abbrev = namespace modN typeN (list tvarN * t)
type tenv_ctor = namespace modN conN (list tvarN * list t * type_ident)
type tenv_val = namespace modN varN (nat * t)

type type_env =
  <| v : tenv_val
   ; c : tenv_ctor
   ; t : tenv_abbrev
   ; s : namespace modN sigN (list type_ident * list (list tvarN * type_ident) * type_env)
   |>

(* A signature is a type_env containing the things specified in the signature,
   paired with two lists of type_identifiers that the signature generated. The
   first for datatypes, and the second for opaque types. Where the signature is
   used, the first should be replaced with real type identifiers that are valid
   at the usage site, and the second with real types valid at the usage site. *)
type tenv_sig = namespace modN sigN (list type_ident * list (list tvarN * type_ident) * type_env)

val extend_dec_tenv : type_env -> type_env -> type_env
let extend_dec_tenv tenv' tenv =
  <| v = nsAppend tenv'.v tenv.v;
     c = nsAppend tenv'.c tenv.c;
     t = nsAppend tenv'.t tenv.t;
     s = nsAppend tenv'.s tenv.s |>

val lookup_varE : id modN varN -> tenv_val_exp -> maybe (nat * t)
let lookup_varE id tenvE =
  match id with
  | Short x -> tveLookup x 0 tenvE
  | _ -> Nothing
  end

val lookup_var : id modN varN -> tenv_val_exp -> type_env -> maybe (nat * t)
let lookup_var id tenvE tenv =
  match lookup_varE id tenvE with
  | Just x -> Just x
  | Nothing -> nsLookup tenv.v id
  end

val num_tvs : tenv_val_exp -> nat
let rec
num_tvs Empty = 0
and
num_tvs (Bind_tvar tvs tenvE) = tvs + num_tvs tenvE
and
num_tvs (Bind_name n tvs t tenvE) = num_tvs tenvE

declare termination_argument num_tvs = automatic

val bind_var_list : nat -> list (varN * t) -> tenv_val_exp -> tenv_val_exp
let rec
bind_var_list tvs [] tenvE = tenvE
and
bind_var_list tvs ((n,t)::binds) tenvE =
  Bind_name n tvs t (bind_var_list tvs binds tenvE)

declare termination_argument bind_var_list = automatic

(* Substitute for the type_identifiers in a type with other type identifiers
 * (subst1) and types (subst2) *)
val type_ident_subst : Map.map type_ident type_ident -> Map.map type_ident (list tvarN * t) -> t -> t
let rec type_ident_subst subst1 subst2 (Tvar tv) = Tvar tv
and type_ident_subst subst1 subst2 (Tvar_db v) = Tvar_db v
and type_ident_subst subst1 subst2 (Tapp ts tid) =
  let ts' = List.map (type_ident_subst subst1 subst2) ts in
  match Map.lookup tid subst1 with
  | Nothing ->
    match Map.lookup tid subst2 with
    | Nothing -> Tapp ts' tid
    | Just (tvs,t) -> type_subst (Map.fromList (List_extra.zipSameLength tvs ts')) t
    end
  | Just tid' -> Tapp ts' tid'
  end

(* Instantiate a signature with the given substitutions for its datatype and
 * opaque type identifiers *)
val sig_instantiate : Map.map type_ident type_ident -> Map.map type_ident (list tvarN * t) -> type_env -> type_env
let sig_instantiate subst1 subst2 tenv =
  <| v = nsMap (fun (tvs, t) -> (tvs, type_ident_subst subst1 subst2 t)) tenv.v;
     c = nsMap (fun (tvs, ts, tid) ->
       (tvs, List.map (type_ident_subst subst1 subst2) ts,
        match Map.lookup tid subst1 with
        | Nothing -> tid
        | Just tid' -> tid'
        end)) tenv.c;
     t = nsMap (fun (tvs, t) -> (tvs, type_ident_subst subst1 subst2 t)) tenv.t;
     (* The following will need updating once we support nested signatures *)
     s = tenv.s |>

(* A pattern matches values of a certain type and extends the type environment
 * with the pattern's binders. The number is the maximum deBruijn type variable
 * allowed. *)
val type_p : nat -> type_env -> pat -> t -> list (varN * t) -> bool

(* An expression has a type *)
val type_e : type_env -> tenv_val_exp -> exp -> t -> bool

(* A list of expressions has a list of types *)
val type_es : type_env -> tenv_val_exp -> list exp -> list t -> bool

(* Type a mutually recursive bundle of functions.  Unlike pattern typing, the
 * resulting environment does not extend the input environment, but just
 * represents the functions *)
val type_funs : type_env -> tenv_val_exp -> list (varN * varN * exp) -> list (varN * t) -> bool

(* Check a declaration and update the top-level environments
 * The arguments are in order:
 * - whether to do extra checks
 * - the type environment
 * - the declaration
 * - the set of type identity stamps defined here
 * - the environment of new stuff declared here *)

val type_d : bool -> type_env -> dec -> set nat -> type_env -> bool
val type_ds : bool -> type_env -> list dec -> set nat -> type_env -> bool

(* Check that the operator can have type (t1 -> ... -> tn -> t) *)
val type_op : op -> list t -> t -> bool
let type_op op ts t =
  match (op,ts) with
    | (Opapp, [t1; t2]) -> t1 = Tfn t2 t
    | (Opn _, [t1; t2]) -> t1 = Tint && t2 = Tint && t = Tint
    | (Opb _, [t1; t2]) -> t1 = Tint && t2 = Tint && t = Tbool
    | (Opw W8 _, [t1; t2]) -> t1 = Tword8 && t2 = Tword8 && t = Tword8
    | (Opw W64 _, [t1; t2]) -> t1 = Tword64 && t2 = Tword64 && t = Tword64
    | (FP_bop _, [t1; t2]) -> t1 = Tword64 && t2 = Tword64 && t = Tword64
    | (FP_uop _, [t1]) ->  t1 = Tword64 && t = Tword64
    | (FP_cmp _, [t1; t2]) ->  t1 = Tword64 && t2 = Tword64 && t = Tbool
    | (Shift W8 _ _, [t1]) -> t1 = Tword8 && t = Tword8
    | (Shift W64 _ _, [t1]) -> t1 = Tword64 && t = Tword64
    | (Equality, [t1; t2]) -> t1 = t2 && t = Tbool
    | (Opassign, [t1; t2]) -> t1 = Tref t2 && t = Ttup []
    | (Opref, [t1]) -> t = Tref t1
    | (Opderef, [t1]) -> t1 = Tref t
    | (Aw8alloc, [t1; t2]) -> t1 = Tint && t2 = Tword8 && t = Tword8array
    | (Aw8sub, [t1; t2]) -> t1 = Tword8array && t2 = Tint && t = Tword8
    | (Aw8length, [t1]) -> t1 = Tword8array && t = Tint
    | (Aw8update, [t1; t2; t3]) -> t1 = Tword8array && t2 = Tint && t3 = Tword8 && t = Ttup []
    | (WordFromInt W8, [t1]) -> t1 = Tint && t = Tword8
    | (WordToInt W8, [t1]) -> t1 = Tword8 && t = Tint
    | (WordFromInt W64, [t1]) -> t1 = Tint && t = Tword64
    | (WordToInt W64, [t1]) -> t1 = Tword64 && t = Tint
    | (CopyStrStr, [t1; t2; t3]) -> t1 = Tstring && t2 = Tint && t3 = Tint && t = Tstring
    | (CopyStrAw8, [t1; t2; t3; t4; t5]) ->
      t1 = Tstring && t2 = Tint && t3 = Tint && t4 = Tword8array && t5 = Tint && t = Ttup []
    | (CopyAw8Str, [t1; t2; t3]) -> t1 = Tword8array && t2 = Tint && t3 = Tint && t = Tstring
    | (CopyAw8Aw8, [t1; t2; t3; t4; t5]) ->
      t1 = Tword8array && t2 = Tint && t3 = Tint && t4 = Tword8array && t5 = Tint && t = Ttup []
    | (Chr, [t1]) -> t1 = Tint && t = Tchar
    | (Ord, [t1]) -> t1 = Tchar && t = Tint
    | (Chopb _, [t1; t2]) -> t1 = Tchar && t2 = Tchar && t = Tbool
    | (Implode, [t1]) -> t1 = Tlist Tchar && t = Tstring
    | (Strsub, [t1; t2]) -> t1 = Tstring && t2 = Tint && t = Tchar
    | (Strlen, [t1]) -> t1 = Tstring && t = Tint
    | (Strcat, [t1]) -> t1 = Tlist Tstring && t = Tstring
    | (VfromList, [Tapp [t1] ctor]) -> ctor = Tlist_num && t = Tvector t1
    | (Vsub, [t1; t2]) -> t2 = Tint && Tvector t = t1
    | (Vlength, [Tapp [t1] ctor]) -> ctor = Tvector_num && t = Tint
    | (Aalloc, [t1; t2]) -> t1 = Tint && t = Tarray t2
    | (AallocEmpty, [t1]) -> t1 = Ttup [] && exists t2. t = Tarray t2
    | (Asub, [t1; t2]) -> t2 = Tint && Tarray t = t1
    | (Alength, [Tapp [t1] ctor]) -> ctor = Tarray_num && t = Tint
    | (Aupdate, [t1; t2; t3]) -> t1 = Tarray t3 && t2 = Tint && t = Ttup []
    | (ConfigGC, [t1;t2]) -> t1 = Tint && t2 = Tint && t = Ttup []
    | (FFI n, [t1;t2]) -> t1 = Tstring && t2 = Tword8array && t = Ttup []
    | (ListAppend, [Tapp [t1] ctor; t2]) -> ctor = Tlist_num && t2 = Tapp [t1] ctor && t = t2
    | _ -> false
  end

val check_type_names : tenv_abbrev -> ast_t -> bool
let rec
check_type_names tenvT (Atvar tv) =
  true
and
check_type_names tenvT (Attup ts) =
  List.all (check_type_names tenvT) ts
and
check_type_names tenvT (Atfun t1 t2) =
  check_type_names tenvT t1 && check_type_names tenvT t2
and
check_type_names tenvT (Atapp ts tn) =
  match nsLookup tenvT tn with
  | Just (tvs, _) -> List.length tvs = List.length ts
  | Nothing -> false
  end &&
  List.all (check_type_names tenvT) ts

(* Substitution of type names for the type they abbreviate *)
val type_name_subst : tenv_abbrev -> ast_t -> t
let rec
type_name_subst tenvT (Atvar tv) = Tvar tv
and
type_name_subst tenvT (Attup ts) =
  Ttup (List.map (type_name_subst tenvT) ts)
and
type_name_subst tenvT (Atfun t1 t2) =
  Tfn (type_name_subst tenvT t1) (type_name_subst tenvT t2)
and
type_name_subst tenvT (Atapp ts tc) =
  let args = List.map (type_name_subst tenvT) ts in
  match nsLookup tenvT tc with
  | Just (tvs, t) -> type_subst (alistToFmap (List_extra.zipSameLength tvs args)) t
  | Nothing -> Ttup args (* can't happen, for a type that passes the check *)
  end

(* Check that a type definition defines no already defined types or duplicate
 * constructors, and that the free type variables of each constructor argument
 * type are included in the type's type parameters. Also check that all of the
 * types mentioned are in scope. *)
val check_ctor_tenv : tenv_abbrev -> list (list tvarN * typeN * list (conN * list ast_t)) -> bool
let rec check_ctor_tenv tenvT [] = true
and check_ctor_tenv tenvT ((tvs,tn,ctors)::tds) =
  check_dup_ctors (tvs,tn,ctors) &&
  List.allDistinct tvs &&
  List.all
    (fun (cn,ts) -> List.all (check_freevars_ast tvs) ts && List.all (check_type_names tenvT) ts)
    ctors &&
  not (List.elem tn (List.map (fun (_,tn,_) -> tn) tds)) &&
  check_ctor_tenv tenvT tds
declare termination_argument check_ctor_tenv = automatic

val build_ctor_tenv : tenv_abbrev -> list (list tvarN * typeN * list (conN * list ast_t)) -> list nat -> tenv_ctor
let rec build_ctor_tenv tenvT [] [] = alist_to_ns []
and build_ctor_tenv tenvT ((tvs,tn,ctors)::tds) (id::ids) =
  nsAppend
    (build_ctor_tenv tenvT tds ids)
    (alist_to_ns
      (List.reverse
        (List.map
          (fun (cn,ts) -> (cn,(tvs,List.map (type_name_subst tenvT) ts, id)))
          ctors)))
declare termination_argument build_ctor_tenv = automatic

(* For the value restriction on let-based polymorphism *)
val is_value : exp -> bool
let rec
is_value (Lit _) = true
and
is_value (Con _ es) = List.all is_value es
and
is_value (Var _) = true
and
is_value (Fun _ _) = true
and
is_value (Tannot e _) = is_value e
and
is_value (Lannot e _) = is_value e
and
is_value _ = false

indreln [type_p : nat -> type_env -> pat -> t -> list (varN * t) -> bool]
and [type_ps : nat -> type_env -> list pat -> list t -> list (varN * t) -> bool]

pany : forall tvs tenv t.
check_freevars tvs [] t
==>
type_p tvs tenv Pany t []

and

pvar : forall tvs tenv n t.
check_freevars tvs [] t
==>
type_p tvs tenv (Pvar n) t [(n,t)]

and

plit_int : forall tvs tenv n.
true
==>
type_p tvs tenv (Plit (IntLit n)) Tint []

and

plit_char : forall tvs tenv c.
true
==>
type_p tvs tenv (Plit (Char c)) Tchar []

and

plit_string : forall tvs tenv s.
true
==>
type_p tvs tenv (Plit (StrLit s)) Tstring []

and

plit_word8 : forall tvs tenv w.
true
==>
type_p tvs tenv (Plit (Word8 w)) Tword8 []

and

plit_word64 : forall tvs tenv w.
true
==>
type_p tvs tenv (Plit (Word64 w)) Tword64 []

and

pcon_some : forall tvs tenv cn ps ts tvs' tn ts' bindings.
List.all (check_freevars tvs []) ts' &&
List.length ts' = List.length tvs' &&
type_ps tvs tenv ps (List.map (type_subst (alistToFmap (List_extra.zipSameLength tvs' ts'))) ts) bindings &&
nsLookup tenv.c cn = Just (tvs', ts, tn)
==>
type_p tvs tenv (Pcon (Just cn) ps) (Tapp ts' tn) bindings

and

pcon_none : forall tvs tenv ps ts bindings.
type_ps tvs tenv ps ts bindings
==>
type_p tvs tenv (Pcon Nothing ps) (Ttup ts) bindings

and

pref : forall tvs tenv p t bindings.
type_p tvs tenv p t bindings
==>
type_p tvs tenv (Pref p) (Tref t) bindings

and

ptypeannot : forall tvs tenv p t bindings.
check_freevars_ast [] t &&
check_type_names tenv.t t &&
type_p tvs tenv p (type_name_subst tenv.t t) bindings
==>
type_p tvs tenv (Ptannot p t) (type_name_subst tenv.t t) bindings

and

empty : forall tvs tenv.
true
==>
type_ps tvs tenv [] [] []

and

cons : forall tvs tenv p ps t ts bindings bindings'.
type_p tvs tenv p t bindings &&
type_ps tvs tenv ps ts bindings'
==>
type_ps tvs tenv (p::ps) (t::ts) (bindings'++bindings)

indreln [type_e : type_env -> tenv_val_exp -> exp -> t -> bool]
and [type_es : type_env -> tenv_val_exp -> list exp -> list t -> bool]
and [type_funs : type_env -> tenv_val_exp -> list (varN * varN * exp) -> list (varN * t) -> bool]

lit_int : forall tenv tenvE n.
true
==>
type_e tenv tenvE (Lit (IntLit n)) Tint

and

lit_char : forall tenv tenvE c.
true
==>
type_e tenv tenvE (Lit (Char c)) Tchar

and

lit_string : forall tenv tenvE s.
true
==>
type_e tenv tenvE (Lit (StrLit s)) Tstring

and

lit_word8 : forall tenv tenvE w.
true
==>
type_e tenv tenvE (Lit (Word8 w)) Tword8

and

lit_word64 : forall tenv tenvE w.
true
==>
type_e tenv tenvE (Lit (Word64 w)) Tword64

and

raise : forall tenv tenvE e t.
check_freevars (num_tvs tenvE) [] t &&
type_e tenv tenvE e Texn
==>
type_e tenv tenvE (Raise e) t


and

handle : forall tenv tenvE e pes t.
type_e tenv tenvE e t &&
pes <> [] &&
(forall ((p,e) MEM pes). exists bindings.
   List.allDistinct (pat_bindings p []) &&
   type_p (num_tvs tenvE) tenv p Texn bindings &&
   type_e tenv (bind_var_list 0 bindings tenvE) e t)
==>
type_e tenv tenvE (Handle e pes) t

and

con_some : forall tenv tenvE cn es tvs tn ts' ts.
List.all (check_freevars (num_tvs tenvE) []) ts' &&
List.length tvs = List.length ts' &&
type_es tenv tenvE es (List.map (type_subst (alistToFmap (List_extra.zipSameLength tvs ts'))) ts) &&
nsLookup tenv.c cn = Just (tvs, ts, tn)
==>
type_e tenv tenvE (Con (Just cn) es) (Tapp ts' tn)

and

con_none : forall tenv tenvE es ts.
type_es tenv tenvE es ts
==>
type_e tenv tenvE (Con Nothing es) (Ttup ts)

and

var : forall tenv tenvE n t targs tvs.
tvs = List.length targs &&
List.all (check_freevars (num_tvs tenvE) []) targs &&
lookup_var n tenvE tenv = Just (tvs,t)
==>
type_e tenv tenvE (Var n) (deBruijn_subst 0 targs t)

and

fn : forall tenv tenvE n e t1 t2.
check_freevars (num_tvs tenvE) [] t1 &&
type_e tenv (Bind_name n 0 t1 tenvE) e t2
==>
type_e tenv tenvE (Fun n e) (Tfn t1 t2)

and

app : forall tenv tenvE op es ts t.
type_es tenv tenvE es ts &&
type_op op ts t &&
check_freevars (num_tvs tenvE) [] t
==>
type_e tenv tenvE (App op es) t

and

log : forall tenv tenvE l e1 e2.
type_e tenv tenvE e1 Tbool &&
type_e tenv tenvE e2 Tbool
==>
type_e tenv tenvE (Log l e1 e2) Tbool

and

if' : forall tenv tenvE e1 e2 e3 t.
type_e tenv tenvE e1 Tbool &&
type_e tenv tenvE e2 t &&
type_e tenv tenvE e3 t
==>
type_e tenv tenvE (If e1 e2 e3) t

and

mat : forall tenv tenvE e pes t1 t2.
type_e tenv tenvE e t1 &&
pes <> [] &&
(forall ((p,e) MEM pes) . exists bindings.
   List.allDistinct (pat_bindings p []) &&
   type_p (num_tvs tenvE) tenv p t1 bindings &&
   type_e tenv (bind_var_list 0 bindings tenvE) e t2)
==>
type_e tenv tenvE (Mat e pes) t2

and

(*
let_poly : forall tenv tenvE n e1 e2 t1 t2 tvs.
is_value e1 &&
type_e tenv (bind_tvar tvs tenvE) e1 t1 &&
type_e tenv (opt_bind_name n tvs t1 tenvE) e2 t2
==>
type_e tenv tenvE (Let n e1 e2) t2

and
*)

let_mono : forall tenv tenvE n e1 e2 t1 t2.
type_e tenv tenvE e1 t1 &&
type_e tenv (opt_bind_name n 0 t1 tenvE) e2 t2
==>
type_e tenv tenvE (Let n e1 e2) t2

(*
and

letrec : forall tenv tenvE funs e t tenv' tvs.
type_funs tenv (bind_var_list 0 tenv' (bind_tvar tvs tenvE)) funs tenv' &&
type_e tenv (bind_var_list tvs tenv' tenvE) e t
==>
type_e tenv tenvE (Letrec funs e) t
*)

and

letrec : forall tenv tenvE funs e t bindings.
type_funs tenv (bind_var_list 0 bindings tenvE) funs bindings &&
type_e tenv (bind_var_list 0 bindings tenvE) e t
==>
type_e tenv tenvE (Letrec funs e) t

and

typeannot: forall tenv tenvE e t.
check_freevars_ast [] t &&
check_type_names tenv.t t &&
type_e tenv tenvE e (type_name_subst tenv.t t)
==>
type_e tenv tenvE (Tannot e t) (type_name_subst tenv.t t)

and

locannot: forall tenv tenvE e l t.
type_e tenv tenvE e t
==>
type_e tenv tenvE (Lannot e l) t

and

empty : forall tenv tenvE.
true
==>
type_es tenv tenvE [] []

and

cons : forall tenv tenvE e es t ts.
type_e tenv tenvE e t &&
type_es tenv tenvE es ts
==>
type_es tenv tenvE (e::es) (t::ts)

and

no_funs : forall tenv tenvE.
true
==>
type_funs tenv tenvE [] []

and

funs : forall tenv tenvE fn n e funs bindings t1 t2.
check_freevars (num_tvs tenvE) [] (Tfn t1 t2) &&
type_e tenv (Bind_name n 0 t1 tenvE) e t2 &&
type_funs tenv tenvE funs bindings &&
lookup fn bindings = Nothing
==>
type_funs tenv tenvE ((fn, n, e)::funs) ((fn, Tfn t1 t2)::bindings)

val tenv_add_tvs : nat -> alist varN t -> alist varN (nat * t)
let tenv_add_tvs tvs bindings =
  List.map (fun (n,t) -> (n,(tvs,t))) bindings

val type_pe_determ : type_env -> tenv_val_exp -> pat -> exp -> bool
let type_pe_determ tenv tenvE p e =
  forall t1 tenv1 t2 tenv2.
    type_p 0 tenv p t1 tenv1 && type_e tenv tenvE e t1 &&
    type_p 0 tenv p t2 tenv2 && type_e tenv tenvE e t2
    -->
    tenv1 = tenv2

val tscheme_inst : (nat * t) -> (nat * t) -> bool
let tscheme_inst (tvs_spec, t_spec) (tvs_impl, t_impl) =
  exists subst.
    List.length subst = tvs_impl &&
    check_freevars tvs_impl [] t_impl &&
    List.all (check_freevars tvs_spec []) subst &&
    deBruijn_subst 0 subst t_impl = t_spec

let tenvLift mn tenv =
  <| v = nsLift mn tenv.v; c = nsLift mn tenv.c; t = nsLift mn tenv.t;
     s = nsLift mn tenv.s |>

val type_tdefs : type_env -> type_def -> list type_ident -> maybe type_env
let type_tdefs tenv tdef tids =
  if List.length tids = List.length tdef &&
     List.allDistinct tids &&
     disjoint (Set.fromList tids)
              (Set.fromList (Tlist_num :: Tbool_num :: prim_type_nums))
  then
    let tenvT =
      alist_to_ns (Lib.map2 (fun (tvs,tn,ctors) i -> (tn, (tvs, Tapp (List.map Tvar tvs) i)))
                      tdef tids)
    in
    if check_ctor_tenv (nsAppend tenvT tenv.t) tdef then
      Just <| v = nsEmpty;
              c = build_ctor_tenv (nsAppend tenvT tenv.t) tdef tids;
              t = tenvT;
              s = nsEmpty |>
    else
      Nothing
  else
    Nothing

let tscheme_inst2 _ ts1 ts2 = tscheme_inst ts1 ts2

let ctor_inst _ (tvs_spec, ts_spec, tid_spec) (tvs_impl, ts_impl, tid_impl) =
  List.length tvs_spec = List.length tvs_impl &&
  let subst = Map.fromList (List_extra.zipSameLength tvs_impl (List.map Tvar tvs_spec)) in
    ts_spec = List.map (type_subst subst) ts_impl

let type_def_inst _ (tvs_spec, t_spec) (tvs_impl, t_impl) =
  List.length tvs_spec = List.length tvs_impl &&
  let subst = Map.fromList (List_extra.zipSameLength tvs_impl (List.map Tvar tvs_spec)) in
    t_spec = type_subst subst t_impl

(* Will need to add something for nested signature declarations *)
val weak_tenv : type_env -> type_env -> bool
let weak_tenv tenv_impl tenv_spec =
  nsSub tscheme_inst2 tenv_spec.v tenv_impl.v &&
  nsSub ctor_inst tenv_spec.c tenv_impl.c &&
  nsSub type_def_inst tenv_spec.t tenv_impl.t

val sig_rename_tids :  list type_ident -> list (list tvarN * type_ident) -> type_env -> list type_ident -> list (list tvarN * type_ident) -> type_env -> bool
(* Checks whether the tids' can be substituted for the tids in tenv to form tenv' *)
let sig_rename_tids datatype_tids opaque_tids tenv datatype_tids' opaque_tids' tenv' =
  List.length datatype_tids = List.length datatype_tids' &&
  List.length opaque_tids = List.length opaque_tids' &&
  List.allDistinct (datatype_tids' ++ List.map snd opaque_tids') &&
  List.map fst opaque_tids = List.map fst opaque_tids' &&
  tenv' =
   (sig_instantiate
    (alistToFmap (List_extra.zipSameLength datatype_tids datatype_tids'))
    (alistToFmap (List_extra.zipSameLength
                  (List.map snd opaque_tids)
                  (List.map (fun (tvs, tid) -> (tvs, Tapp (List.map Tvar tvs) tid))
                   opaque_tids')))
    tenv)

indreln [type_sp : type_env -> spec -> set type_ident -> set (list tvarN * type_ident) -> type_env -> bool] and
        [type_sps : type_env -> list spec -> set type_ident -> set (list tvarN * type_ident) -> type_env -> bool]

sval : forall tenv x t fvs subst.
check_freevars_ast fvs t &&
check_type_names tenv.t t &&
subst = alistToFmap (List_extra.zipSameLength fvs (List.map Tvar_db (genlist (fun x -> x) (List.length fvs))))
==>
type_sp tenv (Sval x t) {} {}
  <| v = nsSing x (List.length fvs, type_subst subst (type_name_subst tenv.t t));
     c = nsEmpty;
     t = nsEmpty;
     s = nsEmpty |>

and

stype : forall tenv tdefs tids tenv'.
type_tdefs tenv tdefs tids = Just tenv'
==>
type_sp tenv (Stype tdefs) (Set.fromList tids) {} tenv'

and

stype_opq : forall tenv tvs tn type_ident.
true
==>
type_sp tenv (Stype_opq tvs tn) {} { (tvs, type_ident) }
  <| v = nsEmpty;
     c = nsEmpty;
     t = nsSing tn (tvs, Tapp (List.map Tvar tvs) type_ident);
     s = nsEmpty |>

and

stabbrev : forall tenv tvs tn t.
check_freevars_ast tvs t &&
check_type_names tenv.t t &&
List.allDistinct tvs
==>
type_sp tenv (Stabbrev tvs tn t) {} {}
  <| v = nsEmpty; c = nsEmpty; t = nsSing tn (tvs,type_name_subst tenv.t t); s = nsEmpty |>

and

sexn : forall tenv cn ts.
List.all (check_freevars_ast []) ts &&
List.all (check_type_names tenv.t) ts
==>
type_sp tenv (Sexn cn ts) {} {}
  <| v = nsEmpty;
     c = nsSing cn ([], List.map (type_name_subst tenv.t) ts, Texn_num);
     t = nsEmpty;
     s = nsEmpty |>

and

smod : forall tenv mn tenv_sig sn datatype_tids opaque_tids datatype_tids' opaque_tids' tenv_sig'.
nsLookup tenv.s sn = Just (datatype_tids, opaque_tids, tenv_sig) &&
sig_rename_tids datatype_tids opaque_tids tenv_sig datatype_tids' opaque_tids' tenv_sig'
==>
type_sp tenv (Smod mn sn) (Set.fromList datatype_tids') (Set.fromList opaque_tids')
  (tenvLift mn tenv_sig')

and

(* Nested signature definitions are not supported yet.
ssig : forall tenv sn sps tids tenv_sig.
type_sps tenv sps (Set.fromList tids) tenv_sig
==>
type_sp tenv (Ssig sn sps) (Set.fromList tids)
  <| v = nsEmpty;
     c = nsEmpty;
     t = nsEmpty;
     s = nsSing sn (tids, tenv_sig) |>

and
*)

empty : forall tenv.
true
==>
type_sps tenv [] {} {} <| v = nsEmpty; c = nsEmpty; t = nsEmpty; s = nsEmpty |>

and

cons : forall tenv sp sps tenv1 tenv2 datatype_tids1 datatype_tids2 opaque_tids1 opaque_tids2.
type_sp tenv sp datatype_tids1 opaque_tids1 tenv1 &&
type_sps (extend_dec_tenv tenv1 tenv) sps datatype_tids1 opaque_tids1 tenv2 &&
disjoint datatype_tids1 datatype_tids2 &&
disjoint (Set.map snd opaque_tids1) (Set.map snd opaque_tids2) &&
disjoint datatype_tids1 (Set.map snd opaque_tids2) &&
disjoint (Set.map snd opaque_tids1) datatype_tids2
==>
type_sps tenv (sp::sps) (datatype_tids1 union datatype_tids2) (opaque_tids1 union opaque_tids2) (extend_dec_tenv tenv2 tenv1)

indreln [check_sig : type_env -> maybe (id modN sigN) -> type_env -> set type_ident -> type_env -> bool]

cs_none: forall tenv tenv_mod.
true
==>
check_sig tenv Nothing tenv_mod {} tenv_mod

and

cs_some: forall tenv sn tenv_mod tids ts datatype_tids opaque_tids tenv_sig datatype_tids' opaque_tids' tenv_sig' tenv_sig1.
nsLookup tenv.s sn = Just (datatype_tids, opaque_tids, tenv_sig) &&
List.length datatype_tids = List.length tids &&
List.length opaque_tids = List.length ts &&
List.map fst opaque_tids = List.map fst ts &&
List.all (fun (tvs,t) -> (check_freevars 0 tvs t)) ts &&
List.allDistinct tids &&
tenv_sig1 = sig_instantiate
                   (alistToFmap (List_extra.zipSameLength datatype_tids tids))
                   (alistToFmap (List_extra.zipSameLength (List.map snd opaque_tids) ts))
                   tenv_sig &&
weak_tenv tenv_mod tenv_sig1 &&
sig_rename_tids datatype_tids opaque_tids tenv_sig datatype_tids' opaque_tids' tenv_sig'
==>
check_sig tenv (Just sn) tenv_mod (Set.fromList (datatype_tids' ++ List.map snd opaque_tids')) tenv_sig'

indreln [type_d : bool -> type_env -> dec -> set nat -> type_env -> bool] and
        [type_ds : bool -> type_env -> list dec -> set nat -> type_env -> bool]

dlet_poly : forall extra_checks tvs tenv p e t bindings locs.
is_value e &&
List.allDistinct (pat_bindings p []) &&
type_p tvs tenv p t bindings &&
type_e tenv (bind_tvar tvs Empty) e t &&
(extra_checks -->
  forall tvs' bindings' t'.
    type_p tvs' tenv p t' bindings' &&
    type_e tenv (bind_tvar tvs' Empty) e t' -->
      all2 tscheme_inst (List.map snd (tenv_add_tvs tvs' bindings')) (List.map snd (tenv_add_tvs tvs bindings)))
==>
type_d extra_checks tenv (Dlet locs p e)
  {}
  <| v = alist_to_ns (tenv_add_tvs tvs bindings); c = nsEmpty; t = nsEmpty; s = nsEmpty |>

and

dlet_mono : forall extra_checks tenv p e t bindings locs.
(* The following line makes sure that when the value restriction prohibits
   generalisation, a type error is given rather than picking an arbitrary
   instantiation. However, we should only do the check when the extra_checks
   argument tells us to. *)
(extra_checks --> not (is_value e) && type_pe_determ tenv Empty p e) &&
List.allDistinct (pat_bindings p []) &&
type_p 0 tenv p t bindings &&
type_e tenv Empty e t
==>
type_d extra_checks tenv (Dlet locs p e)
  {} <| v = alist_to_ns (tenv_add_tvs 0 bindings); c = nsEmpty; t = nsEmpty; s = nsEmpty |>

and

dletrec : forall extra_checks tenv funs bindings tvs locs.
type_funs tenv (bind_var_list 0 bindings (bind_tvar tvs Empty)) funs bindings &&
(extra_checks -->
  forall tvs' bindings'.
    type_funs tenv (bind_var_list 0 bindings' (bind_tvar tvs' Empty)) funs bindings' -->
      all2 tscheme_inst (List.map snd (tenv_add_tvs tvs' bindings')) (List.map snd (tenv_add_tvs tvs bindings)))
==>
type_d extra_checks tenv (Dletrec locs funs)
  {} <| v = alist_to_ns (tenv_add_tvs tvs bindings); c = nsEmpty; t = nsEmpty; s = nsEmpty |>

and

dtype : forall extra_checks tenv tdefs tids tenv' locs.
type_tdefs tenv tdefs tids = Just tenv'
==>
type_d extra_checks tenv (Dtype locs tdefs) (Set.fromList tids) tenv'

and

dtabbrev : forall extra_checks tenv tvs tn t locs.
check_freevars_ast tvs t &&
check_type_names tenv.t t &&
List.allDistinct tvs
==>
type_d extra_checks tenv (Dtabbrev locs tvs tn t)
  {}
  <| v = nsEmpty; c = nsEmpty; t = nsSing tn (tvs,type_name_subst tenv.t t); s = nsEmpty |>

and

dexn : forall extra_checks tenv cn ts locs.
List.all (check_freevars_ast []) ts &&
List.all (check_type_names tenv.t) ts
==>
type_d extra_checks tenv (Dexn locs cn ts)
  {}
  <| v = nsEmpty;
     c = nsSing cn ([], List.map (type_name_subst tenv.t) ts, Texn_num);
     t = nsEmpty;
     s = nsEmpty |>

and

dmod : forall extra_checks tenv mn ds decls1 decls2 tenv' tenv_sig sn_opt.
disjoint decls1 decls2 &&
type_ds extra_checks tenv ds decls1 tenv' &&
check_sig tenv sn_opt tenv' decls2 tenv_sig
==>
type_d extra_checks tenv (Dmod mn sn_opt ds) (decls1 union decls2) (tenvLift mn tenv_sig)

and

dsig : forall extra_checks tenv sn sps datatype_tids opaque_tids tenv_sig.
type_sps tenv sps (Set.fromList datatype_tids) (Set.fromList opaque_tids) tenv_sig
==>
type_d extra_checks tenv (Dsig sn sps) {}
  <| v = nsEmpty;
     c = nsEmpty;
     t = nsEmpty;
     s = nsSing sn (datatype_tids, opaque_tids, tenv_sig) |>

and

empty : forall extra_checks tenv.
true
==>
type_ds extra_checks tenv []
  {}
  <| v = nsEmpty; c = nsEmpty; t = nsEmpty; s = nsEmpty |>

and

cons : forall extra_checks tenv d ds tenv1 tenv2 decls1 decls2.
type_d extra_checks tenv d decls1 tenv1 &&
type_ds extra_checks (extend_dec_tenv tenv1 tenv) ds decls2 tenv2 &&
disjoint decls1 decls2
==>
type_ds extra_checks tenv (d::ds)
  (decls1 union decls2) (extend_dec_tenv tenv2 tenv1)
