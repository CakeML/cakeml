(*
  A small-step semantics for CakeML. This semantics is no longer used
  in the main CakeML development, but is used in PureCake and choreographies.
*)
open import Pervasives_extra
open import Lib
open import Ast
open import Namespace
open import SemanticPrimitives
open import Ffi

(* Small-step semantics for expressions, modules, and definitions *)

(* Evaluation contexts
 * The hole is denoted by the unit type
 * The env argument contains bindings for the free variables of expressions in
     the context *)
type ctxt_frame =
  | Craise of unit
  | Chandle of unit * list (pat * exp)
  | Capp of op * list v * unit * list exp
  | Clog of lop * unit * exp
  | Cif of unit * exp * exp
  (* The value is raised if none of the patterns match *)
  | Cmat_check of unit * list (pat * exp) * v
  | Cmat of unit * list (pat * exp) * v
  | Clet of maybe varN * unit * exp
  (* Evaluating a constructor's arguments
   * The v list should be in reverse order. *)
  | Ccon of maybe (id modN conN) * list v * unit * list exp
  | Ctannot of unit * ast_t
  | Clannot of unit * locs
type ctxt = ctxt_frame * sem_env v

(* State for CEK-style expression evaluation
 * - constructor data
 * - the store
 * - the environment for the free variables of the current expression
 * - the current expression to evaluate, or a value if finished
 * - the context stack (continuation) of what to do once the current expression
 *   is finished.  Each entry has an environment for it's free variables *)

type small_state 'ffi = sem_env v * store_ffi 'ffi v * exp_or_val * list ctxt

type e_step_result 'ffi =
  | Estep of small_state 'ffi
  | Eabort of abort
  | Estuck

(* The semantics are deterministic, and presented functionally instead of
 * relationally for proof rather that readability; the steps are very small: we
 * push individual frames onto the context stack instead of finding a redex in a
 * single step *)

val push : forall 'ffi. sem_env v -> store_ffi 'ffi v -> exp -> ctxt_frame -> list ctxt -> e_step_result 'ffi
let push env s e c' cs = Estep (env, s, Exp e, ((c',env)::cs))

val return : forall 'ffi. sem_env v -> store_ffi 'ffi v -> v -> list ctxt -> e_step_result 'ffi
let return env s v c = Estep (env, s, Val v, c)

val application : forall 'ffi. op -> sem_env v -> store_ffi 'ffi v -> list v -> list ctxt -> e_step_result 'ffi
let application op env s vs c =
  match op with
    | Opapp ->
      match do_opapp vs with
        | Just (env,e) -> Estep (env, s, Exp e, c)
        | Nothing -> Eabort Rtype_error
      end
    | _ ->
      match do_app s op vs with
        | Just (s',r) ->
          match r with
            | Rerr (Rraise v) -> Estep (env,s',Val v,((Craise (),env)::c))
            | Rerr (Rabort a) -> Eabort a
            | Rval v -> return env s' v c
          end
        | Nothing -> Eabort Rtype_error
      end
    end

(* apply a context to a value *)
val continue : forall 'ffi. store_ffi 'ffi v -> v -> list ctxt -> e_step_result 'ffi
let continue s v cs =
  match cs with
    | [] -> Estuck
    | (Craise (), env) :: c->
        match c with
          | [] -> Estuck
          | ((Chandle () pes,env') :: c) ->
              Estep (env,s,Val v,((Cmat_check () pes v, env')::c))
          | _::c -> Estep (env,s,Val v,((Craise (),env)::c))
        end
    | (Chandle () pes, env) :: c ->
        return env s v c
    | (Capp op vs () [], env) :: c ->
        application op env s (v::vs) c
    | (Capp op vs () (e::es), env) :: c ->
        push env s e (Capp op (v::vs) () es) c
    | (Clog l () e, env) :: c ->
        match do_log l v e with
          | Just (Exp e) -> Estep (env, s, Exp e, c)
          | Just (Val v) -> return env s v c
          | Nothing -> Eabort Rtype_error
        end
    | (Cif () e1 e2, env) :: c ->
        match do_if v e1 e2 with
          | Just e -> Estep (env, s, Exp e, c)
          | Nothing -> Eabort Rtype_error
        end
    | (Cmat_check () pes err_v, env) :: c ->
        if can_pmatch_all env.c (fst s) (List.map fst pes) v then
          Estep (env, s, Val v, ((Cmat () pes err_v,env)::c))
        else
          Eabort Rtype_error
    | (Cmat () [] err_v, env) :: c ->
        Estep (env, s, Val err_v, ((Craise (), env) ::c))
    | (Cmat () ((p,e)::pes) err_v, env) :: c ->
        if List.allDistinct (pat_bindings p []) then
          match pmatch env.c (fst s) p v [] with
            | Match_type_error -> Eabort Rtype_error
            | No_match -> Estep (env, s, Val v, ((Cmat () pes err_v,env)::c))
            | Match env' -> Estep (<| env with v = nsAppend (alist_to_ns env') env.v |>, s, Exp e, c)
          end
        else
          Eabort Rtype_error
    | (Clet n () e, env) :: c ->
        Estep (<| env with v = nsOptBind n v env.v |>, s, Exp e, c)
    | (Ccon n vs () [], env) :: c ->
        if do_con_check env.c n (List.length vs + 1) then
           match build_conv env.c n (v::vs) with
             | Nothing -> Eabort Rtype_error
             | Just v -> return env s v c
           end
        else
          Eabort Rtype_error
    | (Ccon n vs () (e::es), env) :: c ->
        if do_con_check env.c n (List.length vs + 1 + 1 + List.length es) then
          push env s e (Ccon n (v::vs) () es) c
        else
          Eabort Rtype_error
    | (Ctannot () t, env) :: c ->
        return env s v c
    | (Clannot () l, env) :: c ->
        return env s v c
  end

(* The single step expression evaluator.  Returns None if there is nothing to
 * do, but no type error.  Returns Type_error on encountering free variables,
 * mis-applied (or non-existent) constructors, and when the wrong kind of value
 * if given to a primitive.  Returns Bind_error when no pattern in a match
 * matches the value.  Otherwise it returns the next state *)

val e_step : forall 'ffi. small_state 'ffi -> e_step_result 'ffi
let e_step (env, s, ev, c) =
  match ev with
    | Val v  ->
        continue s v c
    | Exp e ->
        match e with
          | Lit l -> return env s (Litv l) c
          | Raise e ->
              push env s e (Craise ()) c
          | Handle e pes ->
              push env s e (Chandle () pes) c
          | Con n es ->
              if do_con_check env.c n (List.length es) then
                match List.reverse es with
                  | [] ->
                      match build_conv env.c n [] with
                        | Nothing -> Eabort Rtype_error
                        | Just v -> return env s v c
                      end
                  | e::es ->
                      push env s e (Ccon n [] () es) c
                end
              else
                Eabort Rtype_error
          | Var n ->
              match nsLookup env.v n with
                | Nothing -> Eabort Rtype_error
                | Just v ->
                    return env s v c
              end
          | Fun n e -> return env s (Closure env n e) c
          | App op es ->
              match List.reverse es with
                | [] -> application op env s [] c
                | (e::es) -> push env s e (Capp op [] () es) c
              end
          | Log l e1 e2 -> push env s e1 (Clog l () e2) c
          | If e1 e2 e3 -> push env s e1 (Cif () e2 e3) c
          | Mat e pes -> push env s e (Cmat_check () pes bind_exn_v) c
          | Let n e1 e2 -> push env s e1 (Clet n () e2) c
          | Letrec funs e ->
              if not (allDistinct (List.map (fun (x,y,z) -> x) funs)) then
                Eabort Rtype_error
              else
                Estep (<| env with v = build_rec_env funs env env.v |>,
                       s, Exp e, c)
          | Tannot e t -> push env s e (Ctannot () t) c
          | Lannot e l -> push env s e (Clannot () l) c
        end
  end

(* Define a semantic function using the steps *)

val e_step_reln : forall 'ffi. small_state 'ffi -> small_state 'ffi -> bool
val small_eval : forall 'ffi. sem_env v -> store_ffi 'ffi v -> exp -> list ctxt -> store_ffi 'ffi v * result v v -> bool

let e_step_reln st1 st2 =
  (e_step st1 = Estep st2)

let rec
small_eval env s e c (s', Rval v) =
  exists env'. (rtc (e_step_reln)) (env,s,Exp e,c) (env',s',Val v,[])
and
small_eval env s e c (s', Rerr (Rraise v)) =
  exists env' env''. (rtc (e_step_reln)) (env,s,Exp e,c) (env',s',Val v,[(Craise (), env'')])
and
small_eval env s e c (s', Rerr (Rabort a)) =
  exists env' e' c'.
    (rtc (e_step_reln)) (env,s,Exp e,c) (env',s',e',c') &&
    (e_step (env',s',e',c') = Eabort a)

val e_diverges : forall 'ffi. sem_env v -> store_ffi 'ffi v -> exp -> bool
let e_diverges env s e =
  forall env' s' e' c'.
    (rtc (e_step_reln)) (env,s,Exp e,[]) (env',s',e',c')
    -->
(exists env'' s'' e'' c''.
      e_step_reln (env',s',e',c') (env'',s'',e'',c''))


(* Evaluation contexts for declarations *)

type decl_ctxt_frame =
  | Cdmod of modN * sem_env v * list dec
  | CdlocalL of sem_env v * list dec * list dec (* local env, local and global decs *)
  | CdlocalG of sem_env v * sem_env v * list dec (* local and global envs, global decs *)

type decl_ctxt = list decl_ctxt_frame

type decl_eval =
  | Decl of dec (* a declaration to evaluate *)
  | ExpVal of sem_env v * exp_or_val * list ctxt * locs * pat (* a Dlet under evaluation *)
  | Env of sem_env v (* an environment to return to parent declaration *)

type small_decl_state 'ffi = state 'ffi * decl_eval * decl_ctxt

type decl_step_result 'ffi =
  | Dstep of small_decl_state 'ffi
  | Dabort of abort
  | Ddone
  | Draise of v


(* Helper functions *)

val empty_dec_env : forall 'v. sem_env 'v
let empty_dec_env = <| v = nsEmpty ; c = nsEmpty |>

val lift_dec_env : forall 'v. modN -> sem_env 'v -> sem_env 'v
let lift_dec_env mn env = <| v = nsLift mn env.v ; c = nsLift mn env.c |>

(* Get the "current" sem_env given the context *)
val collapse_env : sem_env v -> decl_ctxt -> sem_env v
let rec collapse_env base c =
  match c with
  | [] -> base
  | Cdmod mn env ds :: cs -> extend_dec_env env (collapse_env base cs)
  | CdlocalL lenv lds gds :: cs ->
      extend_dec_env lenv (collapse_env base cs)
  | CdlocalG lenv genv gds :: cs ->
      extend_dec_env (extend_dec_env genv lenv) (collapse_env base cs)
  end
declare termination_argument collapse_env = automatic


(* Apply a context to the env resulting from evaluating a declaration *)
val decl_continue : forall 'ffi. sem_env v -> state 'ffi -> decl_ctxt -> decl_step_result 'ffi
let decl_continue env' st c =
  match c with
  | [] -> Ddone
  | Cdmod mn env [] :: cs ->
      Dstep (st, Env (lift_dec_env mn (extend_dec_env env' env)), cs)
  | Cdmod mn env (d::ds) :: cs ->
      Dstep (st, Decl d, Cdmod mn (extend_dec_env env' env) ds :: cs)
  | CdlocalL lenv [] gds :: cs ->
      Dstep (st, Env empty_dec_env,
             CdlocalG (extend_dec_env env' lenv) empty_dec_env gds :: cs)
  | CdlocalL lenv (ld::lds) gds :: cs ->
      Dstep (st, Decl ld, CdlocalL (extend_dec_env env' lenv) lds gds :: cs)
  | CdlocalG lenv genv [] :: cs -> Dstep (st, Env (extend_dec_env env' genv), cs)
  | CdlocalG lenv genv (gd::gds) :: cs ->
      Dstep (st, Decl gd, CdlocalG lenv (extend_dec_env env' genv) gds :: cs)
  end

val decl_step : forall 'ffi. sem_env v -> small_decl_state 'ffi -> decl_step_result 'ffi
let decl_step benv (st, dev, c) =
  match dev with
  | Decl d ->
      match d with
      | Dlet locs p e ->
          if allDistinct (pat_bindings p []) then
            Dstep (st, ExpVal (collapse_env benv c) (Exp e) [] locs p, c)
          else Dabort Rtype_error
      | Dletrec locs funs ->
          if allDistinct (map (fun (x,y,z) -> x) funs) then
            Dstep (st,
              Env <| v = build_rec_env funs (collapse_env benv c) nsEmpty; c = nsEmpty |>,
              c)
          else Dabort Rtype_error
      | Dtype locs tds ->
          if List.all check_dup_ctors tds then
            Dstep (
              <| st with next_type_stamp = st.next_type_stamp + List.length tds |>,
              Env <| v = nsEmpty; c = build_tdefs st.next_type_stamp tds |>,
              c)
          else Dabort Rtype_error
      | Dtabbrev locs tvs n t -> Dstep (st, Env empty_dec_env, c)
      | Dexn locs cn ts ->
          Dstep (
            <| st with next_exn_stamp = st.next_exn_stamp + 1 |>,
            Env <| v = nsEmpty; c = nsSing cn (length ts, ExnStamp st.next_exn_stamp) |>,
            c)
      | Dmod mn ds ->
          Dstep (st, Env empty_dec_env, Cdmod mn empty_dec_env ds :: c)
      | Dlocal lds gds ->
          Dstep (st, Env empty_dec_env, CdlocalL empty_dec_env lds gds :: c)
      | Denv n ->
          match declare_env st.eval_state (collapse_env benv c) with
          | Just (x, es') ->
             Dstep (<| st with eval_state = es' |>,
              Env <| v = nsSing n x ; c = nsEmpty |>, c)
          | Nothing -> Dabort Rtype_error
          end
      end

  | Env env -> decl_continue env st c

  | ExpVal env ev ec locs p ->
      match (ev, ec) with
      | (Val v, []) ->
          if allDistinct (pat_bindings p []) then
            match pmatch (collapse_env benv c).c st.refs p v [] with
            | Match new_vals ->
                Dstep (st, Env <| v = alist_to_ns new_vals; c = nsEmpty |>, c)
            | No_match -> Draise bind_exn_v
            | Match_type_error -> Dabort Rtype_error
            end
          else Dabort Rtype_error
      | (Val v, ((Craise (), env')::[])) -> Draise v
      | _ ->
        match e_step (env, (st.refs, st.ffi), ev, ec) with
        | Estep (env', (refs', ffi'), ev', ec') ->
            Dstep (<| st with refs = refs' ; ffi = ffi' |>,
              ExpVal env' ev' ec' locs p, c)
        | Eabort a -> Dabort a
        | Estuck -> Ddone (* cannot happen *)
        end
      end
  end

val decl_step_reln : forall 'ffi. sem_env v -> small_decl_state 'ffi -> small_decl_state 'ffi -> bool

val small_eval_dec : forall 'ffi. sem_env v -> small_decl_state 'ffi -> state 'ffi * result (sem_env v) v -> bool

let decl_step_reln env st1 st2 =
  (decl_step env st1 = Dstep st2)

let rec
small_eval_dec env dst (st, Rval e) =
  (rtc (decl_step_reln env)) dst (st, Env e, [])
and
small_eval_dec env dst (st, Rerr (Rraise v)) =
  (exists dev' dcs'.
    (rtc (decl_step_reln env)) dst (st, dev', dcs') &&
    decl_step env (st, dev', dcs') = Draise v)
and
small_eval_dec env dst (st, Rerr (Rabort v)) =
  (exists dev' dcs'.
    (rtc (decl_step_reln env)) dst (st, dev', dcs') &&
    decl_step env (st, dev', dcs') = Dabort v)

val small_decl_diverges : forall 'ffi. sem_env v -> small_decl_state 'ffi -> bool
let small_decl_diverges env a =
  forall b.
    (rtc (decl_step_reln env)) a b
    -->
  (exists c.  decl_step_reln env b c)

