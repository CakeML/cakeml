// // undeclared func
// fun f () {
//     foo();
//     return 1;
// }

// // undeclared var
// fun f () {
//     return x;
// }

// // redeclared var
// fun f () {
//     var x = 0;
//     var x = 0;
//     var y = 0;
//     var 1 y = f();
//     return 1;
// }

// // redeclared func
// fun f () {
//     return 1;
// }
// fun f () {
//     return 1;
// }
// fun g () {
//     return 1;
// }
// fun g () {
//     return 1;
// }

// // main with args
// fun main (1 a) {
//     return 1;
// }

// // exported main
// export fun main () {
//     return 1;
// }

// // exported func with >4 args
// export fun f (1 a, 1 b, 1 c, 1 d) {
//     return a;
// }
// export fun g (1 a, 1 b, 1 c, 1 d, 1 e) {
//     return 1;
// }

// // missing return statement
// fun f () {
//     skip;
// }
// fun f () {
//     var x = 0;
//     x = 1;
// }
// fun f () {
//     var x = 0;
//     if true {
//         return 1;
//     } else {
//         x = 1;
//     }
// }
// fun f () {
//     while (1) {
//         return 1;
//     }
// }
// fun g () {
//     if true {
//         return 1;
//     } else {
//         return 1;
//     }
// }

// // statements after return
// fun a () {
//     var x = 0;
//     return 1;
//     skip;
// }
// fun b () {
//     return b();
//     skip;
// }
// fun c () {
//     raise Err 1;
//     skip;
// }
// fun d () {
//     return 1;
//     raise Err 0;
//     skip;
// }
// fun e () {
//     var x = 0;
//     if true {
//         return 1;
//         skip;
//     } else {
//         return 1;
//     }
// }
// fun f () {
//     var x = 0;
//     if true {
//         return 1;
//         skip; // warns here
//     } else {
//         return 1;
//     }
//     return 1; // warns here
//     skip;
// }
// fun f2 () {
//     var x = 0;
//     if true {
//         return 1;
//         skip; // warns here
//     } else {
//         return 1;
//     }
//     skip; // warns here
// }
// fun f3 () {
//     var x = 0;
//     if true {
//         return 1;
//         skip; // warns here
//     } else {
//         return 1;
//         skip; // warns here
//     }
//     return 1; // warns here
//     skip;
// }
// fun g () {
//     var x = 0;
//     if true {
//         return 1;
//         skip; // warns here
//     } else {
//         skip;
//     }
//     return 1;
//     skip; // warns here
// }
// fun g2 () {
//     var x = 0;
//     if true {
//         return 1;
//         skip; // warns here
//     } else {
//         skip;
//     }
//     skip;
//     return 1;
// }
// fun f0 () {
//     var x = 0;
//     if true {
//         return 1;
//     } else {
//         return 1;
//     }
//     skip; // warns here
// }
// fun h () {
//     var x = 0;
//     if true {
//         return 1;
//     } else {
//         return f();
//     }
//     skip;
// }
// fun i () {
//     var x = 12;
//     {
//         x = 0;
//         return x;
//     };
//     return 1;
//     skip;
// }
// fun j () {
//     return 1;
//     /*@ annot @*/
//     /*@ annot @*/
//     /*@ annot @*/
// }
// fun k () {
//     return 1;
//     /*@ annot @*/
//     /*@ annot @*/
//     skip;
//     /*@ annot @*/
// }
// fun l () {
//     while (1) {
//         break;
//         skip;
//     }
//     return 1;
// }
// fun m () {
//     while (1) {
//         continue;
//         skip;
//     }
//     return 1;
// }
// fun n () {
//     while (1) {
//         break;
//         return 1;
//     }
//     skip;
//     return 1;
// }
// fun o () {
//     while (1) {
//         var x = 0;
//         if true {
//             break;
//             skip;
//         } else {
//             break;
//         }
//     }
//     return 1;
// }
// fun p () {
//     while (1) {
//         var x = 0;
//         if true {
//             break;
//         } else {
//             continue;
//         }
//         skip;
//     }
//     return 1;
// }
// fun q () {
//     while (1) {
//         var x = 12;
//         {
//             x = 0;
//             break;
//         };
//         continue;
//         skip;
//     }
//     return 1;
// }
// fun z () {
//     return 1;
//     skip;
//     skip;
//     skip;
//     skip;
//     skip;
// }
// fun f2 () {
//     var x = 0;
//     while (1) {
//         if true {
//             break;
//             /*@ annot @*/
//         } else {
//             continue;
//             skip; // definitely warn here
//         }
//         return 1; // warn here? indeed after a confirmed double return branch, but also there was previously a warning in BOTH branches
//         skip;
//     }
//     return 1;
// }


// // rogue break/continue
// fun f () {
//     break;
// }
// fun f () {
//     continue;
// }
// fun f () {
//     while true {
//         continue;
//         while true {
//             continue;
//         }
//         continue;
//     }
//     break;
// }
// fun f () {
//     while true {
//         break;
//         while true {
//             break;
//         }
//         break;
//     }
//     continue;
// }

// // memory address basedness
// fun a () {
//     var y = lds 1 0;
//     y = ld8 0;
//     st 0, y;
//     st8 0, y;
//     !ldw y, 0;
//     !stw 0, y;

//     return 1;
// }
// fun b () {
//     var y = lds 1 @base;
//     y = ld8 @base;
//     st @base, y;
//     st8 @base, y;
//     !ldw y, @base;
//     !stw @base, y;

//     return 1;
// }
// fun c () {
//     var x = 0 + 1;

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     x = @base + 1;

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     x = @base + @base;

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun d () {
//     var 1 x = foo();

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     x = foo();

//     y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun e (1 a) {

//     var y = lds 1 a;
//     y = ld8 a;
//     st a, y;
//     st8 a, y;

//     y = lds 1 y;
//     y = ld8 y;
//     st y, y;
//     st8 y, y;
//     !ldw y, y;
//     !stw y, y;

//     !ldw y, a;
//     !stw a, y;

//     y = ld8 y;
//     st y, y;
//     st8 y, y;
//     !ldw y, y;
//     !stw y, y;

//     return 1;
// }
// fun f () {
//     var x = 0;
//     if (1) {
//         x = x + 1;
//     } else {
//         x = x + 1;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun g () {
//     var x = 0;
//     if (1) {
//         x = x + @base;
//     } else {
//         x = x + @base;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun h () {
//     var x = 0;
//     if (1) {
//         x = x + @base;
//     } else {
//         x = x + 1;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     x = x + 1;

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     x = x + @base;

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     x = x + 1;

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun i () {
//     var x = 0;
//     if (1) {
//         x = 1;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun j () {
//     var x = 0;
//     if (1) {
//         x = x + @base;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun k () {
//     var x = @base;
//     if (1) {
//         x = x + 1;
//     } else {
//         x = x + 1;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun l () {
//     var x = @base;
//     if (1) {
//         x = x + @base;
//     } else {
//         x = x + @base;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun m () {
//     var x = @base;
//     if (1) {
//         x = x + @base;
//     } else {
//         x = x + 1;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun n () {
//     var x = @base;
//     if (1) {
//         x = 1;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun o () {
//     var x = @base;
//     if (1) {
//         x = x + @base;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun p () {
//     var x = 0;
//     while (1) {
//         x = x + 1;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun q () {
//     var x = 0;
//     while (1) {
//         x = x + @base;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun r () {
//     var x = @base;
//     while (1) {
//         x = x + 1;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun s () {
//     var x = @base;
//     while (1) {
//         x = x + @base;
//     }

//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun t () {
//     var x = @base;
    
//     {
//         var x = 1;
        
//         var y = lds 1 x;
//         y = ld8 x;
//         st x, y;
//         st8 x, y;
//         !ldw y, x;
//         !stw x, y;
//     };
    
//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun u () {
//     var x = @base;
    
//     while (1) {
//         var x = 1;
        
//         var y = lds 1 x;
//         y = ld8 x;
//         st x, y;
//         st8 x, y;
//         !ldw y, x;
//         !stw x, y;
//     }
    
//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun v (1 a) {
//     var x = @base;
    
//     if (1) {
//         var x = 1;
        
//         var y = lds 1 x;
//         y = ld8 x;
//         st x, y;
//         st8 x, y;
//         !ldw y, x;
//         !stw x, y;
//     } else {
//         var x = a;
        
//         var y = lds 1 x;
//         y = ld8 x;
//         st x, y;
//         st8 x, y;
//         !ldw y, x;
//         !stw x, y;
//     }
    
//     var y = lds 1 x;
//     y = ld8 x;
//     st x, y;
//     st8 x, y;
//     !ldw y, x;
//     !stw x, y;

//     return 1;
// }
// fun foo () {
//     return 1;
// }

// // repeated param names
// fun f (1 a, 1 a) {
//     return 1;
// }
// fun f (1 a, 1 b, 1 a) {
//     return 1;
// }
// fun f (1 b, 1 a, 1 a, 1 b) {
//     return 1;
// }
// fun f (1 a, 1 a, 1 a, 1 a) {
//     return 1;
// }

// // base for incorrect op arg ASTs
// fun f () {
//     return 1 ^ 1 ^ 1;
// }
// fun g () {
//     return 1 * 1 * 1;
// }
// fun h () {
//     return 1 - 1 - 1;
// }

// // some fucked up unreachable examples to show when warning stops
// fun f () {
//     if 1 {
//         if 1 {
//             return 1;
//             skip;
//         } else {
//             skip;
//         }
//         if 1 {
//             return 1;
//             skip;
//         } else {
//             return 1;
//             skip;
//         }
//         return 1;
//         skip;
//         if 1 {
//             return 1;
//             skip;
//         } else {
//             skip;
//         }
//     } else {
//         skip;
//     }
//     return 1;
//     skip;
// }
// fun f () {
//     {
//         {
//             return 1;
//             skip; // warns here
//         };
//         return 1; // warns here
//         skip;
//         {
//             return 1;
//             skip;
//         };
//     };
//     return 1; // warns here
//     skip;
// }

// fp syntax notes
// fun f () {
//     var x = &f + 1;
//     *(x+1)();
//     return x;
// }

// field access order
// fun main() {
//     var o = < 1, < 3, 4 >, 7 >;
//     @f0(0, o.0, 0, 0);
//     @f0(0, o.0.1, 0, 0);
//     @f0(0, o.1.1, 0, 0);
//     @f0(0, o.2, 0, 0);
//     return 0;
// }
