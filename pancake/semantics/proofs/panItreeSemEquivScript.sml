(*
    Proof of correspondence between functional big-step
    and itree semantics for Pancake.
*)

open preamble panLangTheory;
local open alignmentTheory
           miscTheory     (* for read_bytearray *)
           wordLangTheory (* for word_op and word_sh *)
           ffiTheory
           itreeTauTheory
           panSemTheory
           panItreeSemTheory in end;

val _ = new_theory "panItreeSemEquiv";

Definition query_oracle_def[nocompute]:
  query_oracle ffis (FFI_call s conf bytes) =
  case call_FFI ffis s conf bytes of
    FFI_return ffis' bytes => (FFI_return ffis' bytes,ffis')
  | FFI_final e => (FFI_final e,ffis)
End

Definition make_io_event_def[nocompute]:
  make_io_event (FFI_call s conf bytes) rbytes =
                IO_event s conf (ZIP (bytes,rbytes))
End

val t = “t:('a,'b,'c) itree”;


(*
    TODO: itree_evaluate, mrec and the like do not have their own induction (coinduction) theorems
    generated by HOL4 because they're not seen as recurisve functions.
 *)

(* mrec induction principle *)
Theorem mrec_induction:
  ∀P. (∀rh seed k. Q (rh seed) ⇒ P (Tau (itree_bind (rh seed) k)) ⇒ P (Vis (INL seed) k))
  (* ∀P. (∀r. P (Ret r)) ∧ *)
  (*     (∀rh seed k. P (Tau (itree_bind (rh seed) k)) ⇒ *)
  (*                  P (Vis (INL seed) k)) ∧ *)
  (*     (∀u. P u ⇒ P (Tau u)) ∧ *)
  (*     (∀e a k. P (k a) ⇒ P (Vis (INR e) k)) *)
Proof
  cheat
QED

(* Path over semtrees:
 - states consist of (ffi_state x 'a result option) pairs,
 - transition labels have type: 'b sem_vis_event option
 *)
Definition semtree_path_def:
  semtree_path f s ^t =
  unfold (λ(t,s1). case t of
                     Ret r => (s1,SOME r)
                   | Tau u => (s1,NONE)
                   | Vis e k => let (a,s1') = (f s1 e) in (s1',NONE))
         (λ(t,s1). case t of
                     Ret r => NONE
                   | Tau u => SOME ((u,s1),NONE)
                   | Vis e k => let (a,s1') = (f s1 e) in
                                    SOME ((k a,s1'),SOME e))
         (t,s)
End

Definition semtree_leaf_def:
  semtree_leaf f s t = last (semtree_path f s t)
End

Definition semtree_leaf_val_def:
  semtree_leaf_val f s t = THE $ SND $ semtree_leaf f s t
End

val ht = “ht:('a,'b) htree”;

(* A simple llist of answer types that produces a path of answer types
 as determined by an oracle choice function. *)
Definition htree_path_def:
  htree_path f s ^ht =
  LUNFOLD
  (λ(ht,s). case ht of
              Ret r => NONE
            | Tau u => SOME ((u,s),NONE)
            | Vis (INL (p,ps)) k => SOME ((h_prog (p,ps),s),NONE)
            | Vis (INR (e,g)) k => let (a,s') = (f s e) in
                                       SOME (((k o g) a,s'),SOME (g a)))
  (ht,s)
End

val mt = “mt:('a,'b) mtree”;

Definition mtree_path_def:
  mtree_path f s ^mt =
  LUNFOLD
  (λ(mt,s). case mt of
              Ret r => NONE
            | Tau u => SOME ((u,s),NONE)
            | Vis (e,g) k => let (a,s') = (f s e) in
                               SOME (((k o g) a,s'),SOME (g a)))
  (mt,s)
End

Theorem mtree_path_thm[simp]:
  mtree_path f s (Ret r) = LNIL ∧
  mtree_path f s (Tau u) = NONE:::mtree_path f s u
Proof
  rpt (strip_tac) >>
  rw [mtree_path_def] >>
  rw [Once LUNFOLD]
QED

(* Theorem evaluate_dec_corres: *)
(*   evaluate (Dec v e p,s) = (SOME r,s') ∧ r ≠ TimeOut ∧ s.clock = k ∧ s.ffi = ffis ⇒ *)
(*   itreeTau$itree_el (mrec_sem $ h_prog (Dec v e p,s)) (THE $ llist$toList (mtree_path query_oracle ffis (mrec_sem $ h_prog (Dec v e p,s)))) = Return (SOME r,s') *)
(* Proof *)
(*   rw [] >> *)
(*   fs [panSemTheory.evaluate_def] >> *)
(*   Cases_on ‘eval s e’ >> *)
(*   gs [] *)
(*   >- (rw [panItreeSemTheory.mrec_sem_def] >> *)
(*       rw [panItreeSemTheory.h_prog_def] >> *)
(*       rw [panItreeSemTheory.h_prog_rule_dec_def] >> *)
(*       rw [Once itreeTauTheory.itree_iter_thm] >> *)
(*       rw [Once itreeTauTheory.itree_iter_thm] >> *)
(*       rw [toList]) *)
(*   >- (rw [panItreeSemTheory.mrec_sem_def] >> *)
(*       rw [panItreeSemTheory.h_prog_def] >> *)
(*       rw [panItreeSemTheory.h_prog_rule_dec_def] >> *)
(*       rw [Once itreeTauTheory.itree_iter_thm] >> *)
(*       rw [itreeTauTheory.itree_bind_thm] *)
(*      (* XXX: Cannot proceed as there is nothing to establish: *)
(*       evaluate (p,s) = X ⇒ h_prog (p,s) ≈ X *) *)
(*       ) *)
(* QED *)

Theorem h_prog_paths_finite:
  LFINITE (mtree_path query_oracle s.ffi (mrec_sem $ h_prog (p,s)))
Proof
  cheat
QED

Theorem htree_path_thm[simp]:
  htree_path f s (Ret r) = LNIL ∧
  htree_path f s (Tau u) = NONE:::htree_path f s u
Proof
  rpt (strip_tac) >>
  rw [htree_path_def] >>
  rw [Once LUNFOLD]
QED

Theorem mrec_sem_ind:
  ∀P. ((∀p s e vname value. eval s e = SOME value ∧
                            P (mrec_sem $ h_prog (p,s with locals := s.locals |+ (vname,value)))) ⇒
       (∀vname e p s. P (mrec_sem $ h_prog (Dec vname e p,s)))) ∧
      (∀s. P (mrec_sem $ h_prog (Skip,s)))
Proof
  cheat
QED

Theorem mrec_sem_ind_dec:
  ∀P. (∀vname value p s. P (mrec_sem (h_prog (p,s with locals := s.locals |+ (vname,value))))) ⇒
  (∀v e prog s. P (mrec_sem (h_prog (Dec v e prog,s))))
Proof
  cheat
QED

Theorem evaluate_with_locals_lem:
  (λ(res,st).
     (res,st with locals := res_var st.locals (v,FLOOKUP s.locals v)))
  (evaluate (prog,s with locals := s.locals |+ (v,x))) = (SOME r,s') ⇒
  evaluate (prog,s with locals := s.locals |+ (v,x)) = (SOME r,s')
Proof
  cheat
QED

Definition the_mtree_path_def:
  the_mtree_path ffis t = THE $ toList $ mtree_path query_oracle ffis t
End

Definition leaf_of_def:
  leaf_of ffis t = itree_el t (the_mtree_path ffis t)
End

(* TODO: Consider the best way to reason about "leaves", not just those at the end of a tree
 but those under some oracle path choosing function which has its state updated as the path
 is traversed.

 This may end up being a specialisation of a more general theory of leaves over mrec. *)
(* TODO: Further refine this concept into a general law
 for mrec in terms of "leaves". *)
Theorem mrec_sem_leaf_compos:
  leaf_of ffis (mrec_sem (rh seed)) = Return x ⇒
  mrec_sem (Vis (INL seed) k) = mrec_sem (k x)
Proof
  cheat
QED


(* We need to be careful how we formulate the predicate P so that recInduct instantiates evaluate_ind
 to a useful set of subgoals.

 TODO: Consider using some other approach (besides itree_el on the mtree_path) that gives us
 compositional rules over the mrec semantics.

 *)
Theorem evaluate_mtree_path_corr:
  ∀p s. s.clock = k ∧ s.ffi = ffis ⇒
        leaf_of ffis (mrec_sem $ h_prog (p,s)) = Return (evaluate (p,s))
        (* itree_el (mrec_sem $ h_prog (p,s)) (the_mtree_path ffis (mrec_sem $ h_prog(p,s))) = Return (evaluate (p,s)) *)
        (* itreeTau$itree_el (mrec_sem $ h_prog (p,s)) (the_mtree_path (THE $ llist$toList (mtree_path query_oracle ffis (mrec_sem $ h_prog (p,s)))) = Return (evaluate (p,s)) *)
Proof
  recInduct panSemTheory.evaluate_ind >>
  rpt (strip_tac) >>
  (* Skip *)
  >- (rw [panSemTheory.evaluate_def] >>
      rw [panItreeSemTheory.h_prog_def] >>
      rw [the_mtree_path_def,leaf_of_def] >>
      rw [toList])
  (* Dec *)
  >- (Cases_on ‘eval s e’
      >- (rw [panItreeSemTheory.h_prog_def] >>
          rw [panItreeSemTheory.h_prog_rule_dec_def] >>
          fs [panSemTheory.evaluate_def] >>
          rw [the_mtree_path_def,leaf_of_def] >>
          rw [toList_THM])
      >- (rw [] >>
         drule mrec_sem_leaf_compos >>
         rw [] >>
         rw [panItreeSemTheory.h_prog_def] >>
         rw [panItreeSemTheory.h_prog_rule_dec_def] >>
         Cases_on ‘evaluate (prog,s with locals := s.locals |+ (v,x))’ >>
         rw [] >>
         rw [panSemTheory.evaluate_def] >>
         rw [leaf_of_def,the_mtree_path_def] >>
         rw [toList_THM])
QED

(* Theorem itree_leaf_always_ret: *)
(*   finite $ itree_path f s t ⇒ *)
(*   ∃s' r. itree_leaf f s t = (s',SOME r) *)
(* Proof *)
(*   disch_tac >> *)
(*   fs [pathTheory.finite_def,LFINITE] >> *)
(*   rw [itree_leaf_def] >> *)
(*   qexists_tac ‘FST $ last $ take n $ itree_path f s t’ >> *)
(*   qexists_tac ‘THE $ SND $ last $ take n $ itree_path f s t’ >> *)
(*   qabbrev_tac ‘last_n_path = last $ take n $ itree_path f s t’ >> *)
(*   cheat *)
(* QED *)

(* TODO: Redefine itree_path so it has the property: path (bind t k) = path
 t::(path (k (leaf t))) *)
(* TODO: cheat the above property and see if it solves the seq case. *)

(* XXX: The s in the snd itree_path needs to be that taken from leaf of first path. *)
(* Theorem path_bind_thm: *)
(*   itree_path f s (itree_bind t k) = *)
(*   plink (itree_path f s t) (itree_path f s (k (itree_leaf_val f s t))) *)
(* Proof *)
(*   cheat *)
(* QED *)

(* Theorem leaf_bind_thm: *)
(*   itree_leaf_val f s (itree_bind t k) = *)
(*   itree_leaf_val f s (k (itree_leaf_val f s t)) *)
(* Proof *)
(*   cheat *)
(* QED *)

(* Theorem leaf_bind_thm2: *)
(*   itree_leaf_val f s (g $ itree_bind t k) = *)
(*   itree_leaf_val f s (g $ k $ itree_leaf_val f s t) *)
(* Proof *)
(*   cheat *)
(* QED *)

(* Theorem leaf_val_path_eq: *)
(*   itree_path f s t = itree_path f s t' ⇒ *)
(*   itree_leaf_val f s t = itree_leaf_val f s t' *)
(* Proof *)
(*   cheat *)
(* QED *)

(* Definition itree_path_def: *)
(*   itree_path f s t = *)
(*   LUNFOLD *)
(*   (λseed. case seed of *)
(*          NONE => NONE *)
(*        | SOME (t',s') => *)
(*            (case t' of *)
(*               Ret r => SOME (NONE,[|r|]) *)
(*             | Tau t'' => SOME (SOME (t'',s'),LNIL) *)
(*             | Vis e k => *)
(*                 let (a,s'') = (f s' e) in *)
(*                     SOME (SOME (k a,s''),LNIL))) *)
(*   (SOME (t,s)) *)
(* End *)


(* Takes a function f : e -> a # f and an itree t, and returns either NONE for
infinite depth paths or SOME r where r is the result in the leaf of the tree
found by allowing f to decide branching *)

(* Definition itree_leaf_def: *)
(*   itree_leaf f s t = LHD $ LFLATTEN $ itree_path f s t *)
(* End *)

(* Definition htree_path_def: *)
(*   htree_path f s (t:('a,'b) htree) = *)
(*   LUNFOLD *)
(*   (λseed. case seed of *)
(*          NONE => NONE *)
(*        | SOME (t',s') => *)
(*            (case t' of *)
(*               Ret r => SOME (NONE,[|r|]) *)
(*             | Tau t'' => SOME (SOME (t'',s'),LNIL) *)
(*             | Vis e k => *)
(*                 let (a,s'') = (f s' e) in *)
(*                     SOME (SOME (k a,s''),LNIL))) *)
(*   (SOME (t,s)) *)
(* End *)

(* Definition htree_leaf_def: *)
(*   htree_leaf f s (t:('a,'b) htree) = LHD $ LFLATTEN $ htree_path f s t *)
(* End *)

val k = “k:α -> (δ,γ,α) itree”;

(* Theorem path_simps[simp]: *)
(*   (itree_path f s (Ret r) = [|[|r|]|]) ∧ *)
(*   (itree_path f s (Tau t) = LNIL:::(itree_path f s t)) ∧ *)
(*   (itree_path f s (Vis e k) = let (a,s') = (f s e) in *)
(*                                     LNIL:::(itree_path f s' (k a))) *)
(* Proof *)
(*   rpt strip_tac >> *)
(*   rw [itree_path_def] *)
(*   >- (rw [Ntimes LUNFOLD 2]) *)
(*   >- (rw [Once LUNFOLD]) *)
(*   >- (rw [Once LUNFOLD] >> *)
(*          Cases_on ‘f s e’ >> rw[]) *)
(* QED *)

Theorem itree_bind_ret_inv:
  itree_bind t k = Ret x ⇒ ∃r. (k r) = Ret x
Proof
  disch_tac >>
  Cases_on ‘t’ >>
  fs [itreeTauTheory.itree_bind_thm] >>
  metis_tac []
QED

Theorem itree_bind_ret_tree:
  itree_bind t k = Ret x ⇒
  ∃y. t = Ret y
Proof
  disch_tac >>
  Cases_on ‘t’
  >- (metis_tac [itreeTauTheory.itree_bind_thm]) >>
  fs [itreeTauTheory.itree_bind_def]
QED

Theorem itree_bind_ret_inv_gen:
  itree_bind t k = Ret x ⇒
  ∃y. t = Ret y ∧ (k y) = Ret x
Proof
  disch_tac >>
  Cases_on ‘t’
  >- (qexists_tac ‘x'’ >> rw [] >>
      fs [itreeTauTheory.itree_bind_thm]) >>
  fs [itreeTauTheory.itree_bind_def]
QED

(* Theorem itree_bind_tau_inv: *)
(*   itree_bind t k = Tau u ⇒ *)
(* Proof *)
(* QED *)

(* Triviality leaf_branch_thm: *)
(*   itree_leaf f s t = SOME r ⇒ *)
(*   LHD $ LFLATTEN $ itree_branch f s t = SOME r *)
(* Proof *)
(*   rw [itree_leaf_def] *)
(* QED *)

(* Triviality branch_leaves_eq: *)
(*   itree_branch f s t = itree_branch f s t' ⇒ *)
(*   itree_leaf f s t = itree_leaf f s t' *)
(* Proof *)
(*   rw [itree_leaf_def] *)
(* QED *)

(* What in fact is the direct composition of trees?
roduces one of a potentially infinite number of trees. *)


(* from h_prog_rule_seq we can show that seq composition of two trees in the semantics
 is the same as a bind with the first evaluate and an if condition that extends the tree
    with the second evaluate so long as the first evaluate has a result of NONE.

 hence:
    h_prog_rule_seq gives:
        (itree_evaluate p1 s) BIND (λ(res,s'). if res = NONE then itree_evaluate p2 s'))

 we then need to show that itree_leaf produces the intuitive results in a bound tree:

    itree_leaf (t1 BIND k) = itree_leaf
 *)

CoInductive itree_oracle_term_path:
(∀x. itree_oracle_term_path or (Ret x)) ∧
(∀u. itree_oracle_term_path or u ⇒ itree_oracle_term_path or (Tau u)) ∧
(∀e g. (itree_oracle_term_path or (g (query_oracle or e)) ⇒ itree_oracle_term_path or (Vis e g)))
      End

(* Maps a path in an itree to an io_event llist *)
Definition itree_oracle_beh_def:
  itree_oracle_beh ffis t =
  LFLATTEN $ LUNFOLD
           (λ(ffis,t).
              case t of
                Ret r => NONE
              | Tau u => SOME ((ffis,u),LNIL)
              | Vis e k => (case query_oracle ffis e of
                              (FFI_return ffis' bytes,_) =>
                                SOME ((ffis',k (FFI_return ffis' bytes)),[|make_io_event e bytes|])
                            | (FFI_final (Final_event ename conf bytes outcome),_) =>
                                SOME ((ffis,k (FFI_final (Final_event ename conf bytes outcome))),[|make_io_event e bytes|])))
           (ffis,t)
End

(* An eqv relation between itree behaviours (io_event llist) and FFI behaviours;
 a datatype of three elements, the non-divergent of which contain llists of IO
 events *)

(* XXX: This needs to be improved. *)
Definition same_behaviour_def:
  (same_behaviour or t (Diverge ioll) ⇔
     (itree_oracle_beh or t) = ioll) ∧
  (same_behaviour or t (Terminate outcome iol) ⇔
     (∃iotrace. LTAKE (LENGTH iol) (itree_oracle_beh or t) = SOME iotrace ∧ iotrace = iol) ∧
     (∃r. outcome = Success ⇔ (itree_leaf_val query_oracle or t) = SOME (Return r)) ∧
     (∃e. outcome = (FFI_outcome e) ⇔ (itree_leaf_val query_oracle or t) = NONE))
End

(* An eqv relation between evaluate and evaluate_itree outcomes; which we expect
 to match as follow the same pattern of rules for computing state and final
 outcomes. *)
Definition same_outcome_def:
  same_outcome ffis t (SOME r,s) ⇔
    itree_leaf_val query_oracle ffis t = (SOME r)
End

(* Main correspondence *)

(* Proves soundness: there is always an equivalent behaviour in the itree
 semantics that can be selected using the oracle that produced the behaviour in
 the big-step semantics. *)

(* Bisimulation relation on io_event llists *)
CoInductive ioe_trace_bisim:
  (ioe_trace_bisim ffis LNIL LNIL) ∧
  (ffis.oracle e ffis.ffi_state conf bytes = Oracle_return ffi' bytes' ∧
   LHD l1 = SOME (IO_event e conf (ZIP (bytes,bytes'))) ∧
   LHD l2 = SOME (IO_event e conf (ZIP (bytes,bytes'))) ∧
   ioe_trace_bisim (ffis with ffi_state := ffi') (THE (LTL l1)) (THE (LTL l2)) ⇒
   ioe_trace_bisim ffis l1 l2)
      End

Theorem fbs_eval_clock_and_ffi_eq:
  ∀s e k ffis.
       eval s e = eval (s with <| clock := k; ffi := ffis |>) e
Proof
  recInduct panSemTheory.eval_ind >>
  rw [panSemTheory.eval_def] >>
  metis_tac [OPT_MMAP_cong]
QED

Theorem opt_mmap_eval_clock_ffi_eq:
  ∀s e k ffis.
       OPT_MMAP (eval s) e = OPT_MMAP (eval (s with <| clock := k; ffi := ffis |>)) e
Proof
  rw [] >>
  ho_match_mp_tac OPT_MMAP_cong >>
  rw [fbs_eval_clock_and_ffi_eq]
QED

(* NB the choice of state (s) is irrelevant in the itree semantics and is
 provided only for allowing generalisation over every possible Pancake program
 (stored in state and accessed by an entrypoint). *)

Theorem itree_semantics_corres:
  same_behaviour ffis (itree_semantics s entry) (semantics (s with ffi := ffis) entry)
Proof
  cheat
QED

(* Need to be able to say:

 If an itree_evaluate has some leaf BLAH, then mrec applied to some Vis will have the __same leaf__ as
 Ret BLAH bound to the ktree from the Vis...


 If the leaf of some tree is BLAH then the result passed to the ktree in an itree_bind is BLAH'

 ----

 Need also to be able to express each mrec rule involving Vis as the direct bind
 between a tree and the corresponding ktree rather than mrec applied to a Vis node.

 *)


(* same_outcome should probably be called "itree_result" or similar *)

(* Need to reason compositionally about the leaves in an itree using an oracle *)

(* Need to relate same_outcome to h_prog rules
 possibly using some useful itree theorems; about binding, etc. *)

val s = “s:(α,β) state”;
val s' = “s':(α,β) state”;
val s'' = “s'':(α,β) state”;

(* Proof that knowledge of the leaf of (itree_evaluate c1 s) gives us knowledge of the leaf of
 h_prog (c1,s) *)
(* Theorem itree_evaluate_seq1_lem: *)
(* Proof *)
(* QED *)

(* TODO *)
(* Theorem htree_leaf_bind_thm: *)
(*   itree_leaf f s (itree_evaluate c1 s) = SOME r ⇒ *)
(*   itree_leaf f s (sem_outer  $ mrec_sem $ itree_bind (h_prog (c1,s)) k) = itree_leaf f s (sem_outer $ mrec_sem $ k $ ) *)
(* Proof *)
(* QED *)

(* XXX: Every htree produced by h_prog is only a single node. *)
(* TODO *)
(* Prove the sister theorem of leaf_bind_thm to show that:

 itree_leaf f s $ sem_outer $ mrec_sem $ itree_bind ht k =
 itree_leaf f s $ sem_outer $ mrec_sem $ k $ htree_leaf f s ht

 And then show that:

 itree_leaf f s $ itree_evaluate p1 s = SOME r ⇒
 htree_leaf f s $ h_prog (p1,s) = SOME r

 *)

(* itree_mrec sequentially composes htree's with monad_bind *)

(* htree theory *)
(* equational theory at the level of mrec_sem applied to htree's,
 which construct the itree semantics. *)

Triviality mrec_seq_simple:
  h_prog (c1,s) = Ret (SOME r,s') ⇒
  mrec_sem (h_prog_rule_seq c1 c2 s) = Tau (Ret (SOME r,s'))
Proof
  disch_tac >>
  rw [panItreeSemTheory.h_prog_rule_seq_def] >>
  rw [panItreeSemTheory.mrec_sem_def] >>
  rw [panItreeSemTheory.mrec_body_def] >>
  rw [Once itreeTauTheory.itree_iter_thm] >>
  rw [panItreeSemTheory.mrec_iter_body_def]
QED

Theorem itree_evaluate_htree_leaf:
  itree_leaf_val f s (itree_evaluate c1 s) = x ⇒
  itree_bind (h_prog (c1,s)) k = k x
Proof
  cheat
QED

Theorem itree_evaluate_seq_cases:
  (same_outcome ffis (itree_evaluate c1 ^s) (SOME r,^s') ∨
   ∃s'':((α,β) state). same_outcome s''.ffi (itree_evaluate c2 s'') (SOME r,s')) ⇒
  same_outcome ffis (itree_evaluate (Seq c1 c2) s) (SOME r,s')
Proof
  disch_tac >>
  pop_assum DISJ_CASES_TAC
  >- (gs [same_outcome_def] >>
      rw [panItreeSemTheory.itree_evaluate_def] >>
      rw [panItreeSemTheory.h_prog_rule_seq_def] >>
      ‘itree_leaf_val query_oracle ffis (itree_evaluate (Seq c1 c2) s) =
       itree_leaf_val query_oracle ffis (itree_evaluate c1 s)’ suffices_by (rw []) >>
      (* irule leaf_val_path_eq >> *)
      (* AP_TERM_TAC >> *)
      (* rw [itree_evaluate_eq_htree] >> *)
      rw [panItreeSemTheory.itree_evaluate_def] >>
     )
QED

Triviality evaluate_seq_cases:
  evaluate (Seq c1 c2,s) = (SOME r,s') ⇒
  evaluate (c1,s) = (SOME r,s') ∨
  ∃s''. evaluate (c1,s) = (NONE,s'') ∧ evaluate (c2,s'') = (SOME r,s')
Proof
  disch_tac >>
  fs [panSemTheory.evaluate_def] >>
  pairarg_tac >>
  Cases_on ‘res’ >>
  fs []
QED

(* Evaluate correspondence *)
(* Proves partial soundness: if a computation terminates,
the two semantics produce identical results. *)
Theorem itree_semantics_evaluate_corr:
  evaluate (p,s) = (SOME r,s') ∧ r ≠ TimeOut ∧ s.clock = k ∧ s.ffi = ffis ⇒
  same_outcome ffis (itree_evaluate p s) (SOME r,s')
Proof
  recInduct panSemTheory.evaluate_ind >>
  REVERSE (rpt strip_tac)
  (* ExtCall *)
  >- (fs [panSemTheory.evaluate_def] >>
      fs [AllCaseEqs()] >>
      rw [panItreeSemTheory.itree_evaluate_def] >>
      rw [panItreeSemTheory.itree_mrec_def] >>
      rw [panItreeSemTheory.h_prog_def] >>
      rw [panItreeSemTheory.h_prog_rule_ext_call_def] >>
      fs [GSYM fbs_eval_clock_and_ffi_eq] >>
      rw [same_outcome_def] >>
      rw [itreeTauTheory.itree_iter_def] >>
      rw [Once itreeTauTheory.itree_unfold] >>
      rw [Once itreeTauTheory.itree_unfold] >>
      rw [itree_leaf_def] >>
      rw [Once LUNFOLD]
      (* Case: everything evaluates as expected *)
      >- (rw [query_oracle_def] >>
          Cases_on ‘outcome’ >>
          rw [Once itreeTauTheory.itree_unfold] >>
          rw [Once itreeTauTheory.itree_unfold] >>
          rw [Once itreeTauTheory.itree_unfold] >>
          rw [Once itreeTauTheory.itree_unfold] >>
          rw [Once itreeTauTheory.itree_unfold] >>
          rw [Once LUNFOLD] >>
          rw [Once LUNFOLD] >>
          rw [Once LUNFOLD] >>
          rw [Once LUNFOLD] >>
          rw [Once LUNFOLD]
         ))
  (* Seq *)
  >- (irule itree_evaluate_seq_cases >>
      imp_res_tac evaluate_seq_cases >> fs []
      >- (disj2_tac >>
          qexists_tac ‘s'':(α,β) state’ >> gs []))
  (* Call *)
  >- (fs [panSemTheory.evaluate_def] >>
      every_case_tac >>
      rw [panItreeSemTheory.itree_evaluate_def] >>
      rw [panItreeSemTheory.itree_mrec_def] >>
      rw [panItreeSemTheory.h_prog_def] >>
      rw [panItreeSemTheory.h_prog_rule_call_def] >>
      fs [GSYM fbs_eval_clock_and_ffi_eq] >>
      fs [GSYM opt_mmap_eval_clock_ffi_eq] >>
      rw [itreeTauTheory.itree_iter_def] >>
      rw [Once itreeTauTheory.itree_unfold] >>
      rw [Once itreeTauTheory.itree_unfold] >>
      rw [same_outcome_def] >>
      rw [itree_leaf_def] >>
      rw [Once LUNFOLD] >>
      rw [itreeTauTheory.itree_bind_def]
      (* Case: evaluating the callee returns (NONE,s') *)
      >- (
       )
      (* TODO: Need to establish recursion thm for same_outcome
         - To match the recInduct on evaluate_def *)
      (* Skip *)
      >- (fs [panSemTheory.evaluate_def])
      (* Dec *)
      >- (rw [same_outcome_def] >>
          rw [panItreeSemTheory.itree_evaluate_def] >>
          rw [panItreeSemTheory.itree_mrec_def] >>
          rw [panItreeSemTheory.h_prog_def] >>
          rw [panItreeSemTheory.h_prog_rule_dec_def] >>
          Cases_on ‘eval s e’
          (* eval s e = NONE *)
          >- (rw [] >>
              fs [panSemTheory.evaluate_def] >>
              ‘eval (s with <|clock := k; ffi := ffis|>) e = NONE’ by rw [GSYM fbs_eval_clock_and_ffi_eq] >>
              fs[] >>
              rw [Once itreeTauTheory.itree_unfold] >>
              rw [itree_leaf_def] >>
              rw [Once LUNFOLD])
          (* eval s e = SOME x *)
          >- (
           rw [] >>
           )
         )
QED

(* Final goal:

   1. For every path that can be generated frong

   that produces an equivalent result in the functional semantics.
   2. For every oracle, there is a path producing a corresponding result in the ITree semantics.
 *)

val _ = export_theory();
