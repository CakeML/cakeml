open preamble FloverTactics AbbrevsTheory MachineTypeTheory CertificateCheckerTheory FloverMapTheory;
open simpLib realTheory realLib RealArith;

val _ = new_theory "certificate_Turbine";


val C12_def = Define `C12:(real expr) = Const M64 ((3)/(1))`;
val C34_def = Define `C34:(real expr) = Const M64 ((2)/(1))`;
val v0_def = Define `v0:(real expr) = Var 0`;
val MultC34v0 = Define `MultC34v0:(real expr) = Binop Mult C34 v0`;;
val SubC12MultC34v0 = Define `SubC12MultC34v0:(real expr) = Binop Sub C12 MultC34v0`;;
val w1_def = Define `w1:(real expr) = Var 1`;
val Multw1w1 = Define `Multw1w1:(real expr) = Binop Mult w1 w1`;;
val r2_def = Define `r2:(real expr) = Var 2`;
val MultMultw1w1r2 = Define `MultMultw1w1r2:(real expr) = Binop Mult Multw1w1 r2`;;
val MultMultMultw1w1r2r2 = Define `MultMultMultw1w1r2r2:(real expr) = Binop Mult MultMultw1w1r2 r2`;;
val MultSubC12MultC34v0MultMultMultw1w1r2r2 = Define `MultSubC12MultC34v0MultMultMultw1w1r2r2:(real expr) = Binop Mult SubC12MultC34v0 MultMultMultw1w1r2r2`;;
val CastM32MultSubC12MultC34v0MultMultMultw1w1r2r2 = Define `CastM32MultSubC12MultC34v0MultMultMultw1w1r2r2 : real expr = Downcast M32 MultSubC12MultC34v0MultMultMultw1w1r2r2`;;
val t13_def = Define `t13:(real expr) = Var 13`;
val Multr2r2 = Define `Multr2r2:(real expr) = Binop Mult r2 r2`;;
val DivC34Multr2r2 = Define `DivC34Multr2r2:(real expr) = Binop Div C34 Multr2r2`;;
val PlusC12DivC34Multr2r2 = Define `PlusC12DivC34Multr2r2:(real expr) = Binop Plus C12 DivC34Multr2r2`;;
val C56_def = Define `C56:(real expr) = Const M64 ((1)/(8))`;
val MultC56t13 = Define `MultC56t13:(real expr) = Binop Mult C56 t13`;;
val C78_def = Define `C78:(real expr) = Const M64 ((1)/(1))`;
val SubC78v0 = Define `SubC78v0:(real expr) = Binop Sub C78 v0`;;
val DivMultC56t13SubC78v0 = Define `DivMultC56t13SubC78v0:(real expr) = Binop Div MultC56t13 SubC78v0`;;
val SubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0 = Define `SubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0:(real expr) = Binop Sub PlusC12DivC34Multr2r2 DivMultC56t13SubC78v0`;;
val C910_def = Define `C910:(real expr) = Const M64 ((9)/(2))`;
val SubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910 = Define `SubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910:(real expr) = Binop Sub SubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0 C910`;;
val RetSubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910_def = Define `RetSubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910 = Ret SubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910`;
val Lett13CastM32MultSubC12MultC34v0MultMultMultw1w1r2r2RetSubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910_def = Define `Lett13CastM32MultSubC12MultC34v0MultMultMultw1w1r2r2RetSubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910 = Let M32 13 CastM32MultSubC12MultC34v0MultMultMultw1w1r2r2 RetSubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910`;


val defVars_turbine1_def = Define `
 defVars_turbine1 : typeMap =
(FloverMapTree_insert (Var 13) (M32) (FloverMapTree_insert (Var 2) (M64) (FloverMapTree_insert (Var 1) (M32) (FloverMapTree_insert (Var 0) (M64) (FloverMapTree_empty)))))`;


val thePrecondition_turbine1_def = Define `
 thePreconditionturbine1 (n:num):interval =
if n = 0 then ( (-9)/(2), (-3)/(10)) else if n = 1 then ( (2)/(5), (9)/(10)) else if n = 2 then ( (19)/(5), (39)/(5)) else (0,1)`;

val absenv_turbine1_def = RIGHT_CONV_RULE EVAL (Define `
  absenv_turbine1:analysisResult =
FloverMapTree_insert (Var 13) (( (25992)/(3125), (369603)/(625)) , (10897405971353755049080245699135739550190183673979589183045092457928612173839859739648954473537091916251058832293262719180360236323042346706121872242215634993452246199495497)/(77290750460345166893907037818639746885978546594128699973144705029030382845791208490723875331638451559249272320630043543547301573220859753114858173469341614973939616296468480000)) (FloverMapTree_insert SubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910 (( (-44359301)/(760500), (-38482181)/(24818750)), (3924349846867619024523804743689521136415633884966237668760105868141485103080789892791874334088512379963004537745179840616691260021849996287118236639658735119829579663257668085298417973172646741867372015640610327396350890666606735024098647217246573198355442540691795849983259740380905174891635457079240722649147427918404480547401564385180105138764405381418689892582742419738379435775390608252416095984592187865232067933)/(289471257054961384918669089220018025835341604313227770541160995424295555709348250342778631743642316479870781267270856088904640038932714136634089953398101164758970716395545343530457645687045965078633294178140327436188034453293631420208769682359066319399821254884280479132190096107830596203837864826407197311293140204503541675081921027240098320654944060638856094914489870539721475323553849736071133368093288584478932651212800)) (FloverMapTree_insert C910 (( (9)/(2), (9)/(2)), (9)/(18014398509481984)) (FloverMapTree_insert SubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0 (( (-40937051)/(760500), (36601097)/(12409375)), (28319873103826776464947213464790575057055921549352445438268229376608600293548033745790114102233591688051676708961661841771309871494843279332438419354684790731036193753329802429396227251368953438826447184060824564666298895296305161137440806186802425538914729570338764923694575029364957235205559059754031568704795535843563274542089062055949734441512569610195876945804133694810531003982114641309716298835101)/(2088954754572435181771249501559003700556749669776635545701045060538093691827347816700811818184296894250939844714110643162241665319392593822691122859111676003311186163381490669075340679234685540300993547189092467792040057557488413032938948593979423624776668063360655207948685801678688628651932159132228220025823585503125269111671088092597336021435534985260589887428244358367412469416168922280954552853200896000)) (FloverMapTree_insert DivMultC56t13SubC78v0 (( (6498)/(34375), (28431)/(500)), (16456674808504419713460842309222705244234918995462703995106669871372020549705087032844123801303587597901210141884478604114557173208540301233987276030311787825501243096660814344240885800119896913239042198947927639664154011428919139124399377764053092200132182505435422766091856575233)/(1213891353859412464434900904174446741241776050155371632271622943937060159864725579416247906825514944370014696693840097755322274675159229765418192176307809996891995110330960939446362702282885650589732445636662595002392072075773509234820271123343102516503350574033731716783419806030233600)) (FloverMapTree_insert SubC78v0 (( (13)/(10), (11)/(2)), (198158383604301835)/(162259276829213363391578010288128)) (FloverMapTree_insert v0 (( (-9)/(2), (-3)/(10)), (9)/(18014398509481984)) (FloverMapTree_insert C78 (( (1)/(1), (1)/(1)), (1)/(9007199254740992)) (FloverMapTree_insert MultC56t13 (( (3249)/(3125), (369603)/(5000)), (884102606936490680731752230426177174279994523509014443925849037762426785203206693475393155682163712955820237904855105473897926457187832473404235222481406653659342249462460296655110660556278927652484606793)/(50164565101131186554345988110352789550307653454047907443030175238311120551081474515091576922202953827161626518785268952493852922918165243750837466913718040942718731604847379667202603892176844761574680821760000)) (FloverMapTree_insert t13 (( (25992)/(3125), (369603)/(625)), (10897405971353755049080245699135739550190183673979589183045092457928612173839859739648954473537091916251058832293262719180360236323042346706121872242215634993452246199495497)/(77290750460345166893907037818639746885978546594128699973144705029030382845791208490723875331638451559249272320630043543547301573220859753114858173469341614973939616296468480000)) (FloverMapTree_insert C56 (( (1)/(8), (1)/(8)), (1)/(72057594037927936)) (FloverMapTree_insert PlusC12DivC34Multr2r2 (( (4613)/(1521), (1133)/(361)), (8322029150158154795029283197731963782947379348388746893328074046792142129613564671482176805148148674473395852369854279120184162789786105)/(9179088175630516919951303555378137396333525672516633107308163797460193153375266059317709546341232951835305179377098447440282925792142740031549969793024)) (FloverMapTree_insert DivC34Multr2r2 (( (50)/(1521), (50)/(361)), (229414357275415265918400599801295656426300156762605019414016380533868088676828989759617629892948859865380043151486648825)/(1019083503764952260967214087747716155389179978620521128374960961588978975253557253046489077956819108354314404804818844079182019267919872)) (FloverMapTree_insert Multr2r2 (( (361)/(25), (1521)/(25)), (370194540085850329677735429855512049)/(18268770466636286477546060408953537745699156787200)) (FloverMapTree_insert r2 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert r2 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert C34 (( (2)/(1), (2)/(1)), (1)/(4503599627370496)) (FloverMapTree_insert C12 (( (3)/(1), (3)/(1)), (3)/(9007199254740992)) (FloverMapTree_insert CastM32MultSubC12MultC34v0MultMultMultw1w1r2r2 (( (25992)/(3125), (369603)/(625)), (10897405971353755049080245699135739550190183673979589183045092457928612173839859739648954473537091916251058832293262719180360236323042346706121872242215634993452246199495497)/(77290750460345166893907037818639746885978546594128699973144705029030382845791208490723875331638451559249272320630043543547301573220859753114858173469341614973939616296468480000)) (FloverMapTree_insert MultSubC12MultC34v0MultMultMultw1w1r2r2 (( (25992)/(3125), (369603)/(625)), (487151995046295338893930542570079409858112847420176741543629287152035509221162888371301482936692608529037937923594248245190762922721096774209319428681696168589192009)/(4606887725612233095997991431870445423482569849141162632295173706354521682607603579206697662570384237721519012488725396606165264440826162881544719545205927787657953280000)) (FloverMapTree_insert MultMultMultw1w1r2r2 (( (1444)/(625), (123201)/(2500)), (684753699449180142984378891542871830422888059430458970343650825809787402527122252097)/(77706755689029162836778476272940756265696273562085580850072496389556171408208339927040000)) (FloverMapTree_insert r2 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert MultMultw1w1r2 (( (76)/(125), (3159)/(500)), (216416435308552377542006026969111606565975441280087)/(191561942608236107294793378393788647952342390272950272000)) (FloverMapTree_insert r2 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert Multw1w1 (( (4)/(25), (81)/(100)), (68398423417552977)/(472236648286964521369600)) (FloverMapTree_insert w1 (( (2)/(5), (9)/(10)), (9)/(167772160)) (FloverMapTree_insert w1 (( (2)/(5), (9)/(10)), (9)/(167772160)) (FloverMapTree_insert SubC12MultC34v0 (( (18)/(5), (12)/(1)), (30691534383948965906666771119623124331921047289865)/(6582018229284824168619876730229402019930943462534319453394436096)) (FloverMapTree_insert MultC34v0 (( (-9)/(1), (-3)/(5)), (2190500237194380648980683016896521)/(730750818665451459101842416358141509827966271488)) (FloverMapTree_insert v0 (( (-9)/(2), (-3)/(10)), (9)/(18014398509481984)) (FloverMapTree_insert C34 (( (2)/(1), (2)/(1)), (1)/(4503599627370496)) (FloverMapTree_insert C12 (( (3)/(1), (3)/(1)), (3)/(9007199254740992)) (FloverMapTree_empty))))))))))))))))))))))))))))))))`);

val _ = store_thm ("ErrorBound_turbine1_Sound",
``CertificateCheckerCmd Lett13CastM32MultSubC12MultC34v0MultMultMultw1w1r2r2RetSubSubPlusC12DivC34Multr2r2DivMultC56t13SubC78v0C910 absenv_turbine1 thePreconditionturbine1 defVars_turbine1``,
 flover_eval_tac \\ fs[REAL_INV_1OVER]);
val w5_def = Define `w5:(real expr) = Var 5`;
val Multw5w5 = Define `Multw5w5:(real expr) = Binop Mult w5 w5`;;
val r6_def = Define `r6:(real expr) = Var 6`;
val MultMultw5w5r6 = Define `MultMultw5w5r6:(real expr) = Binop Mult Multw5w5 r6`;;
val MultMultMultw5w5r6r6 = Define `MultMultMultw5w5r6r6:(real expr) = Binop Mult MultMultw5w5r6 r6`;;
val CastM32MultMultMultw5w5r6r6 = Define `CastM32MultMultMultw5w5r6r6 : real expr = Downcast M32 MultMultMultw5w5r6r6`;;
val t14_def = Define `t14:(real expr) = Var 14`;
val C1112_def = Define `C1112:(real expr) = Const M64 ((6)/(1))`;
val v4_def = Define `v4:(real expr) = Var 4`;
val MultC1112v4 = Define `MultC1112v4:(real expr) = Binop Mult C1112 v4`;;
val C1314_def = Define `C1314:(real expr) = Const M64 ((1)/(2))`;
val MultC1314v4 = Define `MultC1314v4:(real expr) = Binop Mult C1314 v4`;;
val MultMultC1314v4t14 = Define `MultMultC1314v4t14:(real expr) = Binop Mult MultC1314v4 t14`;;
val SubC78v4 = Define `SubC78v4:(real expr) = Binop Sub C78 v4`;;
val DivMultMultC1314v4t14SubC78v4 = Define `DivMultMultC1314v4t14SubC78v4:(real expr) = Binop Div MultMultC1314v4t14 SubC78v4`;;
val SubMultC1112v4DivMultMultC1314v4t14SubC78v4 = Define `SubMultC1112v4DivMultMultC1314v4t14SubC78v4:(real expr) = Binop Sub MultC1112v4 DivMultMultC1314v4t14SubC78v4`;;
val C1516_def = Define `C1516:(real expr) = Const M64 ((5)/(2))`;
val SubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516 = Define `SubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516:(real expr) = Binop Sub SubMultC1112v4DivMultMultC1314v4t14SubC78v4 C1516`;;
val RetSubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516_def = Define `RetSubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516 = Ret SubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516`;
val Lett14CastM32MultMultMultw5w5r6r6RetSubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516_def = Define `Lett14CastM32MultMultMultw5w5r6r6RetSubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516 = Let M32 14 CastM32MultMultMultw5w5r6r6 RetSubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516`;


val defVars_turbine2_def = Define `
 defVars_turbine2 : typeMap =
(FloverMapTree_insert (Var 14) (M32) (FloverMapTree_insert (Var 4) (M64) (FloverMapTree_insert (Var 6) (M64) (FloverMapTree_insert (Var 5) (M32) (FloverMapTree_empty)))))`;


val thePrecondition_turbine2_def = Define `
 thePreconditionturbine2 (n:num):interval =
if n = 4 then ( (-9)/(2), (-3)/(10)) else if n = 5 then ( (2)/(5), (9)/(10)) else if n = 6 then ( (19)/(5), (39)/(5)) else (0,1)`;

val absenv_turbine2_def = RIGHT_CONV_RULE EVAL (Define `
  absenv_turbine2:analysisResult =
FloverMapTree_insert (Var 14) (( (1444)/(625), (123201)/(2500)) , (3063536282053861697440306059151051029453602675884541762715181425583177585105789736780115213)/(260740604970814219042361048116400404614587954389239840081425977517360806369707098391474864128000)) (FloverMapTree_insert SubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516 (( (-2023793)/(68750), (80993)/(1000)), (335721894355205339078525188412104883872802567729054280920779764311100371865802191817593606471392791390128742898515404872685271219359461618139498144102267842506194674169277819336101523495526245076733172944771659754502809249458941572703844755421395311446320160698021877)/(16509204097989507930374681961157548682152814272687038616246747516879119730795908824571057558885998149436824571911254452841408673936186085191982602271310778776410788217303994849480756171817118737848131780953227819329968010162696376992906090187488439088487939856345858048000)) (FloverMapTree_insert C1516 (( (5)/(2), (5)/(2)), (5)/(18014398509481984)) (FloverMapTree_insert SubMultC1112v4DivMultMultC1314v4t14SubC78v4 (( (-925959)/(34375), (83493)/(1000)), (7454523536280440276658622658803713623359331324261421520780482601003522824455497655188070500170324482284337923197691858055507161949482034740973927167868530984568712435426035088413371953466103895638082099938318763762174358217441058440991468626979326769)/(366577970156478814675586485297865661662282438741634363138438501936258611797379210463422473306982455319698578841941626401488478180472309846215819334942737723368706164557373369238940789478878173609469199444382332838231875142003177203540300381489923411148800)) (FloverMapTree_insert DivMultMultC1314v4t14SubC78v4 (( (-85293)/(1000), (-2166)/(34375)), (4138091830078099445926671942221232302088613488075510230603821177184249992660729071011720456203717098394298939292015498717554234189950928323265453871533076563713949736780129443036555190568140682734489589004427616184335269453873075206133)/(203491651394038139219803399014777446164471651902446926528899296924423396480607456861768019444326713496106517254891980162883323813001362671113347499431266276120170524464788247142566384994476587971517611255424425230748861149756111068332032000)) (FloverMapTree_insert SubC78v4 (( (13)/(10), (11)/(2)), (198158383604301835)/(162259276829213363391578010288128)) (FloverMapTree_insert v4 (( (-9)/(2), (-3)/(10)), (9)/(18014398509481984)) (FloverMapTree_insert C78 (( (1)/(1), (1)/(1)), (1)/(9007199254740992)) (FloverMapTree_insert MultMultC1314v4t14 (( (-1108809)/(10000), (-1083)/(3125)), (181478265229015411373482819830419776936216309755786375463544932907981900577009286000071293904076708892500117098882809251577832013421206109655385784565798261)/(6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057152000)) (FloverMapTree_insert t14 (( (1444)/(625), (123201)/(2500)), (3063536282053861697440306059151051029453602675884541762715181425583177585105789736780115213)/(260740604970814219042361048116400404614587954389239840081425977517360806369707098391474864128000)) (FloverMapTree_insert MultC1314v4 (( (-9)/(4), (-3)/(20)), (2190500237194380648980683016896521)/(2923003274661805836407369665432566039311865085952)) (FloverMapTree_insert v4 (( (-9)/(2), (-3)/(10)), (9)/(18014398509481984)) (FloverMapTree_insert C1314 (( (1)/(2), (1)/(2)), (1)/(18014398509481984)) (FloverMapTree_insert MultC1112v4 (( (-27)/(1), (-9)/(5)), (6571500711583141946942049050689563)/(730750818665451459101842416358141509827966271488)) (FloverMapTree_insert v4 (( (-9)/(2), (-3)/(10)), (9)/(18014398509481984)) (FloverMapTree_insert C1112 (( (6)/(1), (6)/(1)), (3)/(4503599627370496)) (FloverMapTree_insert CastM32MultMultMultw5w5r6r6 (( (1444)/(625), (123201)/(2500)), (3063536282053861697440306059151051029453602675884541762715181425583177585105789736780115213)/(260740604970814219042361048116400404614587954389239840081425977517360806369707098391474864128000)) (FloverMapTree_insert MultMultMultw5w5r6r6 (( (1444)/(625), (123201)/(2500)), (684753699449180142984378891542871830422888059430458970343650825809787402527122252097)/(77706755689029162836778476272940756265696273562085580850072496389556171408208339927040000)) (FloverMapTree_insert r6 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert MultMultw5w5r6 (( (76)/(125), (3159)/(500)), (216416435308552377542006026969111606565975441280087)/(191561942608236107294793378393788647952342390272950272000)) (FloverMapTree_insert r6 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert Multw5w5 (( (4)/(25), (81)/(100)), (68398423417552977)/(472236648286964521369600)) (FloverMapTree_insert w5 (( (2)/(5), (9)/(10)), (9)/(167772160)) (FloverMapTree_insert w5 (( (2)/(5), (9)/(10)), (9)/(167772160)) (FloverMapTree_empty))))))))))))))))))))))))`);

val _ = store_thm ("ErrorBound_turbine2_Sound",
``CertificateCheckerCmd Lett14CastM32MultMultMultw5w5r6r6RetSubSubMultC1112v4DivMultMultC1314v4t14SubC78v4C1516 absenv_turbine2 thePreconditionturbine2 defVars_turbine2``,
 flover_eval_tac \\ fs[REAL_INV_1OVER]);
val v8_def = Define `v8:(real expr) = Var 8`;
val MultC34v8 = Define `MultC34v8:(real expr) = Binop Mult C34 v8`;;
val PlusC78MultC34v8 = Define `PlusC78MultC34v8:(real expr) = Binop Plus C78 MultC34v8`;;
val w9_def = Define `w9:(real expr) = Var 9`;
val Multw9w9 = Define `Multw9w9:(real expr) = Binop Mult w9 w9`;;
val r10_def = Define `r10:(real expr) = Var 10`;
val MultMultw9w9r10 = Define `MultMultw9w9r10:(real expr) = Binop Mult Multw9w9 r10`;;
val MultMultMultw9w9r10r10 = Define `MultMultMultw9w9r10r10:(real expr) = Binop Mult MultMultw9w9r10 r10`;;
val MultPlusC78MultC34v8MultMultMultw9w9r10r10 = Define `MultPlusC78MultC34v8MultMultMultw9w9r10r10:(real expr) = Binop Mult PlusC78MultC34v8 MultMultMultw9w9r10r10`;;
val CastM32MultPlusC78MultC34v8MultMultMultw9w9r10r10 = Define `CastM32MultPlusC78MultC34v8MultMultMultw9w9r10r10 : real expr = Downcast M32 MultPlusC78MultC34v8MultMultMultw9w9r10r10`;;
val t15_def = Define `t15:(real expr) = Var 15`;
val Multr10r10 = Define `Multr10r10:(real expr) = Binop Mult r10 r10`;;
val DivC34Multr10r10 = Define `DivC34Multr10r10:(real expr) = Binop Div C34 Multr10r10`;;
val SubC12DivC34Multr10r10 = Define `SubC12DivC34Multr10r10:(real expr) = Binop Sub C12 DivC34Multr10r10`;;
val MultC56t15 = Define `MultC56t15:(real expr) = Binop Mult C56 t15`;;
val SubC78v8 = Define `SubC78v8:(real expr) = Binop Sub C78 v8`;;
val DivMultC56t15SubC78v8 = Define `DivMultC56t15SubC78v8:(real expr) = Binop Div MultC56t15 SubC78v8`;;
val SubSubC12DivC34Multr10r10DivMultC56t15SubC78v8 = Define `SubSubC12DivC34Multr10r10DivMultC56t15SubC78v8:(real expr) = Binop Sub SubC12DivC34Multr10r10 DivMultC56t15SubC78v8`;;
val SubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314 = Define `SubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314:(real expr) = Binop Sub SubSubC12DivC34Multr10r10DivMultC56t15SubC78v8 C1314`;;
val RetSubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314_def = Define `RetSubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314 = Ret SubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314`;
val Lett15CastM32MultPlusC78MultC34v8MultMultMultw9w9r10r10RetSubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314_def = Define `Lett15CastM32MultPlusC78MultC34v8MultMultMultw9w9r10r10RetSubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314 = Let M32 15 CastM32MultPlusC78MultC34v8MultMultMultw9w9r10r10 RetSubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314`;


val defVars_turbine3_def = Define `
 defVars_turbine3 : typeMap =
(FloverMapTree_insert (Var 15) (M32) (FloverMapTree_insert (Var 10) (M64) (FloverMapTree_insert (Var 9) (M32) (FloverMapTree_insert (Var 8) (M64) (FloverMapTree_empty)))))`;


val thePrecondition_turbine3_def = Define `
 thePreconditionturbine3 (n:num):interval =
if n = 8 then ( (-9)/(2), (-3)/(10)) else if n = 9 then ( (2)/(5), (9)/(10)) else if n = 10 then ( (19)/(5), (39)/(5)) else (0,1)`;

val absenv_turbine3_def = RIGHT_CONV_RULE EVAL (Define `
  absenv_turbine3:analysisResult =
FloverMapTree_insert (Var 15) (( (-246402)/(625), (123201)/(6250)) , (1452987463523767450411980562389085269308107924715242754679652531884053745388232123039759789342169655003169693996403764558133051924540612926112958908140523528918561317098869)/(15458150092069033378781407563727949377195709318825739994628941005806076569158241698144775066327690311849854464126008708709460314644171950622971634693868322994787923259293696000)) (FloverMapTree_insert SubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314 (( (841303)/(1805000), (7676321)/(190125)), (8332702846064072405799341555861563415527060148289372415899980296040796411931731723547777829469507442252239848099520532982957667492076719935946026256200695936610163403706953117826846653028031033763104598797423407226633096907856222540303016845525584420203678564937055587852693679258468089161180654441340736387174909426800015590816832078640164327547721502895175256288014047682275320034809681409113598896563008455069478060557)/(921965953720052010965961049165757412285563009737630449173597770426381344934274177341749942103500777988388438336257676643161278524000694525179576501572952209757321731719811919144507601513241398775447041957376942884258889733740216073364931438313626227288430696806433326036025456103440448909223599472106923436468651551343780235135918471759713151285996833134756662302650237669012898905519011409386559777377124141565400494112768000)) (FloverMapTree_insert C1314 (( (1)/(2), (1)/(2)), (1)/(18014398509481984)) (FloverMapTree_insert SubSubC12DivC34Multr10r10DivMultC56t15SubC78v8 (( (1743803)/(1805000), (15542767)/(380250)), (2846510323819941585408640068931672305551311027743299660261323794137862184753487990595263404207183132045841416182041274984469979154646471084213386579676958503141671923468841230983313763746455210793309774087003861082339645766121164789816159653072982223527030481677363326199570141328347825067353476035506273285346181844914618729359040758142066470611543216951271512118316878931808148392843831422929955386921)/(314950101458613304328588386388895942545479180981708128428772947588820279690892440056430089510863224056295545818435143122922589540462267991728815446450683458960763452325209362414435979330767973768457488653124710528646039447129022272658487634169205408043251492629760323659955705483863824012137463992243639326970325198932732881451948666268521430924126813162365859950719918646163726158130083666974686430174904320)) (FloverMapTree_insert DivMultC56t15SubC78v8 (( (-9477)/(250), (9477)/(5000)), (2687923553307384002844571511798810723674370162670427442273306994541585992260872382551058012316508245456206604875014578467821418302189267729231013259274985921020211287486770762814404134956244508715910322724128313657260993696486048095682561265455840961345890100531864688090039191353333)/(297403381695556053786550721522739451604235132288066049906547621264579739166857766956980737172251161370653600689990823950053957295414011292527457083195413449238538802031085430164358862059306984394484449180982335775586057658564509762530966425219060116543320890638264270611937852477407232000)) (FloverMapTree_insert SubC78v8 (( (13)/(10), (11)/(2)), (198158383604301835)/(162259276829213363391578010288128)) (FloverMapTree_insert v8 (( (-9)/(2), (-3)/(10)), (9)/(18014398509481984)) (FloverMapTree_insert C78 (( (1)/(1), (1)/(1)), (1)/(9007199254740992)) (FloverMapTree_insert MultC56t15 (( (-123201)/(2500), (123201)/(50000)), (117880347646424413083189827929199179141778182017822848210952427458790074394008463806808628706507418848577571813635056365373945768875688050328060665394486646451527202522457814595694865175770271740771865973)/(10032913020226237310869197622070557910061530690809581488606035047662224110216294903018315384440590765432325303757053790498770584583633048750167493382743608188543746320969475933440520778435368952314936164352000)) (FloverMapTree_insert t15 (( (-246402)/(625), (123201)/(6250)), (1452987463523767450411980562389085269308107924715242754679652531884053745388232123039759789342169655003169693996403764558133051924540612926112958908140523528918561317098869)/(15458150092069033378781407563727949377195709318825739994628941005806076569158241698144775066327690311849854464126008708709460314644171950622971634693868322994787923259293696000)) (FloverMapTree_insert C56 (( (1)/(8), (1)/(8)), (1)/(72057594037927936)) (FloverMapTree_insert SubC12DivC34Multr10r10 (( (1033)/(361), (4513)/(1521)), (12392167119373151759702102498162892841225507379513713281870881992246961969803285224017813019700315634992758123332295025500661529849493862505)/(13961393115134016235245932707730146979823292547897798956215717135936953786283779676222236219985015319741499177832566738556670330129849107587987504055189504)) (FloverMapTree_insert DivC34Multr10r10 (( (50)/(1521), (50)/(361)), (229414357275415265918400599801295656426300156762605019414016380533868088676828989759617629892948859865380043151486648825)/(1019083503764952260967214087747716155389179978620521128374960961588978975253557253046489077956819108354314404804818844079182019267919872)) (FloverMapTree_insert Multr10r10 (( (361)/(25), (1521)/(25)), (370194540085850329677735429855512049)/(18268770466636286477546060408953537745699156787200)) (FloverMapTree_insert r10 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert r10 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert C34 (( (2)/(1), (2)/(1)), (1)/(4503599627370496)) (FloverMapTree_insert C12 (( (3)/(1), (3)/(1)), (3)/(9007199254740992)) (FloverMapTree_insert CastM32MultPlusC78MultC34v8MultMultMultw9w9r10r10 (( (-246402)/(625), (123201)/(6250)), (1452987463523767450411980562389085269308107924715242754679652531884053745388232123039759789342169655003169693996403764558133051924540612926112958908140523528918561317098869)/(15458150092069033378781407563727949377195709318825739994628941005806076569158241698144775066327690311849854464126008708709460314644171950622971634693868322994787923259293696000)) (FloverMapTree_insert MultPlusC78MultC34v8MultMultMultw9w9r10r10 (( (-246402)/(625), (123201)/(6250)), (324767996899172760127484044360410904702574696508204225141856961906805029959411899828255007894728891442898789807488557757307515664886825242376216708891473956295469897)/(4606887725612233095997991431870445423482569849141162632295173706354521682607603579206697662570384237721519012488725396606165264440826162881544719545205927787657953280000)) (FloverMapTree_insert MultMultMultw9w9r10r10 (( (1444)/(625), (123201)/(2500)), (684753699449180142984378891542871830422888059430458970343650825809787402527122252097)/(77706755689029162836778476272940756265696273562085580850072496389556171408208339927040000)) (FloverMapTree_insert r10 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert MultMultw9w9r10 (( (76)/(125), (3159)/(500)), (216416435308552377542006026969111606565975441280087)/(191561942608236107294793378393788647952342390272950272000)) (FloverMapTree_insert r10 (( (19)/(5), (39)/(5)), (39)/(45035996273704960)) (FloverMapTree_insert Multw9w9 (( (4)/(25), (81)/(100)), (68398423417552977)/(472236648286964521369600)) (FloverMapTree_insert w9 (( (2)/(5), (9)/(10)), (9)/(167772160)) (FloverMapTree_insert w9 (( (2)/(5), (9)/(10)), (9)/(167772160)) (FloverMapTree_insert PlusC78MultC34v8 (( (-8)/(1), (2)/(5)), (26307029471956256989796439792260911881375239372809)/(6582018229284824168619876730229402019930943462534319453394436096)) (FloverMapTree_insert MultC34v8 (( (-9)/(1), (-3)/(5)), (2190500237194380648980683016896521)/(730750818665451459101842416358141509827966271488)) (FloverMapTree_insert v8 (( (-9)/(2), (-3)/(10)), (9)/(18014398509481984)) (FloverMapTree_insert C34 (( (2)/(1), (2)/(1)), (1)/(4503599627370496)) (FloverMapTree_insert C78 (( (1)/(1), (1)/(1)), (1)/(9007199254740992)) (FloverMapTree_empty))))))))))))))))))))))))))))))))`);

val _ = store_thm ("ErrorBound_turbine3_Sound",
``CertificateCheckerCmd Lett15CastM32MultPlusC78MultC34v8MultMultMultw9w9r10r10RetSubSubSubC12DivC34Multr10r10DivMultC56t15SubC78v8C1314 absenv_turbine3 thePreconditionturbine3 defVars_turbine3``,
 flover_eval_tac \\ fs[REAL_INV_1OVER]);


 val _ = export_theory();
