(*
  Correctness proof for the Dafny to CakeML compiler.
*)

open preamble
open semanticPrimitivesTheory
open evaluateTheory
open dafny_semanticPrimitivesTheory
open dafny_evaluateTheory
open namespaceTheory
open mlstringTheory
open integerTheory

(* For compiler definitions *)
open result_monadTheory

val _ = new_theory "dafny_compilerProof";

(* ************************************************************************** *)
(* TODO Move definitions back to dafny_to_cakeml at the end *)

Overload Unit = ‚ÄúCon NONE []‚Äù
Overload False = ‚ÄúCon (SOME (Short "False")) []‚Äù
Overload True = ‚ÄúCon (SOME (Short "True")) []‚Äù

(* Generates strings of the form  0,  1, etc., to be used for matching tuples *)
Definition cml_tup_vname_def:
  cml_tup_vname (idx : num) = explode (¬´ ¬ª ^ (num_to_str idx))
End

(* Generates code of the form: case cml_te of ( 0,  1, ...) => cml_e *)
Definition cml_tup_case_def:
  cml_tup_case len cml_te cml_e =
  let tup_pvars = GENLIST (Œªn. Pvar (cml_tup_vname n)) len in
    Mat cml_te [Pcon NONE tup_pvars, cml_e]
End

Definition cml_tup_select_def:
  cml_tup_select len cml_te (idx: num) =
  cml_tup_case len cml_te (Var (Short (cml_tup_vname idx)))
End

Definition cml_get_arr_dim_def:
  cml_get_arr_dim cml_e = cml_tup_select 2 cml_e 0
End

Definition cml_get_arr_data_def:
  cml_get_arr_data cml_e = cml_tup_select 2 cml_e 1
End

Definition cml_arr_sel_def:
  cml_arr_sel cml_arr cml_idx = App Asub [cml_get_arr_data cml_arr; cml_idx]
End

Definition cml_fapp_aux_def:
  cml_fapp_aux id [] = App Opapp [id; Unit] ‚àß
  cml_fapp_aux id [cml_e] = App Opapp [id; cml_e] ‚àß
  cml_fapp_aux id (cml_e::rest) = App Opapp [id; cml_e]
End

Definition cml_fapp_def:
  cml_fapp mns n cml_es = cml_fapp_aux (Var (mk_id mns n)) (REVERSE cml_es)
End

Definition cml_read_var_def:
  cml_read_var v = App Opderef [Var (Short (explode v))]
End

Definition from_un_op_def:
  from_un_op Not cml_e = If cml_e False True
End

Definition from_bin_op_def:
  from_bin_op Lt cml_e‚ÇÄ cml_e‚ÇÅ =
    App (Opb Lt) [cml_e‚ÇÄ; cml_e‚ÇÅ] ‚àß
  from_bin_op Le cml_e‚ÇÄ cml_e‚ÇÅ =
    App (Opb Leq) [cml_e‚ÇÄ; cml_e‚ÇÅ] ‚àß
  from_bin_op Ge cml_e‚ÇÄ cml_e‚ÇÅ =
    App (Opb Geq) [cml_e‚ÇÄ; cml_e‚ÇÅ] ‚àß
  from_bin_op Eq cml_e‚ÇÄ cml_e‚ÇÅ =
    App Equality [cml_e‚ÇÄ; cml_e‚ÇÅ] ‚àß
  from_bin_op Neq cml_e‚ÇÄ cml_e‚ÇÅ =
  (* Make sure that cml_e‚ÇÅ is evaluated before the rest of the computation as
     the semantics demand *)
  (let n_e‚ÇÅ = " r" in
     Let (SOME n_e‚ÇÅ) cml_e‚ÇÅ
         (If (App Equality [cml_e‚ÇÄ; Var (Short n_e‚ÇÅ)]) False True)) ‚àß
  from_bin_op Sub cml_e‚ÇÄ cml_e‚ÇÅ =
    App (Opn Minus) [cml_e‚ÇÄ; cml_e‚ÇÅ] ‚àß
  from_bin_op Add cml_e‚ÇÄ cml_e‚ÇÅ =
    App (Opn Plus) [cml_e‚ÇÄ; cml_e‚ÇÅ] ‚àß
  from_bin_op Mul cml_e‚ÇÄ cml_e‚ÇÅ =
    App (Opn Times) [cml_e‚ÇÄ; cml_e‚ÇÅ] ‚àß
  from_bin_op And cml_e‚ÇÄ cml_e‚ÇÅ =
    Log And cml_e‚ÇÄ cml_e‚ÇÅ ‚àß
  from_bin_op Or cml_e‚ÇÄ cml_e‚ÇÅ =
    Log Or cml_e‚ÇÄ cml_e‚ÇÅ ‚àß
  from_bin_op Imp cml_e‚ÇÄ cml_e‚ÇÅ =
    If cml_e‚ÇÄ cml_e‚ÇÅ True ‚àß
  from_bin_op Div cml_e‚ÇÄ cml_e‚ÇÅ =
  (* Make sure that cml_e‚ÇÅ is evaluated before the rest of the computation as
     the semantics demand *)
  let n_e‚ÇÅ = " r" in
  (* See HOL's EDIV_DEF: if 0 < j then i div j else ~(i div ~j) *)
  let neg_cml_e‚ÇÅ = App (Opn Minus) [Lit (IntLit 0); Var (Short n_e‚ÇÅ)] in
    Let (SOME n_e‚ÇÅ) cml_e‚ÇÅ
        (If (App (Opb Lt) [Lit (IntLit 0); Var (Short n_e‚ÇÅ)])
            (App (Opn Divide) [cml_e‚ÇÄ; Var (Short n_e‚ÇÅ)])
            (App (Opn Minus)
                 [Lit (IntLit 0); App (Opn Divide) [cml_e‚ÇÄ; neg_cml_e‚ÇÅ]]))
Termination
  wf_rel_tac ‚Äòmeasure (Œªx. case x of
                           | (Neq, _, _) => bin_op_size Neq + 1
                           | (Imp, _, _) => bin_op_size Imp + 1
                           | (bop, _, _) => bin_op_size bop)‚Äô
End

Definition from_lit_def:
  from_lit (BoolL b) = (if b then True else False) ‚àß
  from_lit (IntL i) = Lit (IntLit i) ‚àß
  from_lit (StrL s) = Lit (StrLit (explode s))
End

Definition from_exp_def:
  from_exp (Lit l) = return (from_lit l) ‚àß
  from_exp (Var v) = return (cml_read_var v) ‚àß
  from_exp (If tst thn els) =
  do
    cml_tst <- from_exp tst;
    cml_thn <- from_exp thn;
    cml_els <- from_exp els;
    return (If cml_tst cml_thn cml_els)
  od ‚àß
  from_exp (UnOp uop e) =
  do
    cml_e <- from_exp e;
    return (from_un_op uop cml_e)
  od ‚àß
  from_exp (BinOp bop e‚ÇÄ e‚ÇÅ) =
  do
    cml_e‚ÇÄ <- from_exp e‚ÇÄ;
    cml_e‚ÇÅ <- from_exp e‚ÇÅ;
    (* Force left-to-right order *)
    n_e‚ÇÄ <<- " l";
    return (Let (SOME n_e‚ÇÄ) cml_e‚ÇÄ
             (from_bin_op bop (Var (Short n_e‚ÇÄ)) cml_e‚ÇÅ))
  od ‚àß
  from_exp (ArrLen arr) =
  do
    cml_arr <- from_exp arr;
    return (cml_get_arr_dim cml_arr)
  od ‚àß
  from_exp (ArrSel arr idx) =
  do
    cml_arr <- from_exp arr;
    cml_idx <- from_exp idx;
    return (cml_arr_sel cml_arr cml_idx)
  od ‚àß
  from_exp (FunCall n args) =
  do
    cml_args <- map_from_exp args;
    return (cml_fapp [] (explode n) cml_args)
  od ‚àß
  from_exp (Forall _ _) = fail ¬´from_exp:Forall: Unsupported¬ª ‚àß
  map_from_exp [] = return [] ‚àß
  map_from_exp (e::es) =
  do
    cml_e <- from_exp e;
    cml_es <- map_from_exp es;
    return (cml_e::cml_es)
  od
Termination
  wf_rel_tac ‚Äòmeasure (Œªx. case x of
                           | INL e => exp_size e
                           | INR es => list_size exp_size es)‚Äô
End

(* ************************************************************************** *)

Type dfy_state[pp] = ‚Äú:dafny_semanticPrimitives$state‚Äù
Type dfy_env[pp] = ‚Äú:dafny_semanticPrimitives$sem_env‚Äù
Type dfy_exp[pp] = ‚Äú:dafny_ast$exp‚Äù
Type dfy_exp_res[pp] = ‚Äú:'a dafny_semanticPrimitives$exp_result‚Äù

Type cml_state[pp] = ‚Äú:Œ± semanticPrimitives$state‚Äù
Type cml_env[pp] = ‚Äú:v semanticPrimitives$sem_env‚Äù
Type cml_exp[pp] = ‚Äú:ast$exp‚Äù
Type cml_res[pp] = ‚Äú:(v list, v) semanticPrimitives$result‚Äù

Definition env_rel_def:
  env_rel env_dfy env_cml ‚áî
    nsLookup env_cml.c (Short "True") = SOME (0, TypeStamp "True" 0) ‚àß
    nsLookup env_cml.c (Short "False") = SOME (0, TypeStamp "False" 0)
End

Inductive val_rel:
[~bool:]
  val_rel m (BoolV b) (Boolv b)
[~int:]
  val_rel m (IntV i) (Litv (IntLit i))
[~str:]
  val_rel m (StrV s) (Litv (StrLit (explode s)))
[~arr:]
  len' = &len ‚àß FLOOKUP m loc = SOME loc' ‚áí
  val_rel m (ArrV len loc) (Conv NONE [Litv (IntLit (len')); Loc T loc'])
End

Theorem val_rel_simp[simp] = LIST_CONJ $
  map (SCONV [val_rel_cases]) [‚Äúval_rel m (BoolV b) v‚Äù,
                               ‚Äúval_rel m (IntV i) v‚Äù,
                               ‚Äúval_rel m (StrV s) v‚Äù,
                               ‚Äúval_rel m (ArrV len loc) v‚Äù];

Definition array_rel_def:
  array_rel m s_heap c_store ‚áî
  INJ (Œªx. m ' x) (FDOM m) ùïå(:num) ‚àß
  ‚àÄloc vs.
    LLOOKUP s_heap loc = SOME (HArr vs) ‚áí
    ‚àÉloc' vs'.
      FLOOKUP m loc = SOME loc' ‚àß
      store_lookup loc' c_store = SOME (Varray vs') ‚àß
      LIST_REL (val_rel m) vs vs'
End

Definition locals_rel_def:
  locals_rel m (l: mlstring |-> num) s_locals t_refs (env_cml: cml_env) ‚áî
    INJ (Œªx. l ' x) (FDOM l) ùïå(:num) ‚àß
    ‚àÄvar dfy_v.
      (* SOME dfy_v means that the local was initialized *)
      read_local s_locals var = (SOME dfy_v) ‚àß
      (* Names starting with space are reserved for the compiler *)
      ¬¨(isPrefix ¬´ ¬ª var) ‚áí
      ‚àÉloc cml_v.
        FLOOKUP l var = SOME loc ‚àß
        (* locals map to references in CakeML *)
        store_lookup loc t_refs = SOME (Refv cml_v) ‚àß
        val_rel m dfy_v cml_v ‚àß
        nsLookup env_cml.v (Short (explode var)) = SOME (Loc T loc)
End

(* TODO *)
Definition print_rel_def:
  print_rel _ _ = ARB
End

Definition state_rel_def:
  state_rel m l s t env_cml ‚áî
    array_rel m s.heap t.refs ‚àß
    locals_rel m l s.locals t.refs env_cml ‚àß
    print_rel s.output t.ffi.io_events
End

(* We don't define the relation to be true between type errors, as we could
   otherwise define a "verified" compiler that always outputs garbage. *)
Definition exp_res_rel_def[simp]:
  (exp_res_rel m (Rval dfy_v) (Rval [cml_v]) ‚áî val_rel m dfy_v cml_v) ‚àß
  (exp_res_rel m (Rerr Rtimeout_error) (Rerr (Rabort Rtimeout_error)) ‚áî
     T) ‚àß
  (exp_res_rel _ _ _ ‚áî F)
End

Definition exp_ress_rel_def[simp]:
  (exp_ress_rel m (Rval dfy_vs) (Rval cml_vs) ‚áî
     LIST_REL (val_rel m) dfy_vs cml_vs) ‚àß
  (exp_ress_rel m (Rerr Rtimeout_error) (Rerr (Rabort Rtimeout_error)) ‚áî
     T) ‚àß
  (exp_ress_rel _ _ _ ‚áî F)
End

Triviality read_local_some_imp:
  read_local s.locals name = SOME dfy_v ‚àß
  ¬¨(isPrefix ¬´ ¬ª name) ‚àß
  state_rel m l s t env_cml ‚áí
  ‚àÉloc cml_v.
    FLOOKUP l name = SOME loc ‚àß
    store_lookup loc t.refs = SOME (Refv cml_v) ‚àß
    val_rel m dfy_v cml_v ‚àß
    nsLookup env_cml.v (Short (explode name)) = SOME (Loc T loc)
Proof
  gvs [state_rel_def, locals_rel_def]
QED

Triviality exp_res_rel_rval:
  exp_res_rel m (Rval dfy_v) r_cml ‚áí ‚àÉcml_v. r_cml = Rval [cml_v]
Proof
  namedCases_on ‚Äòr_cml‚Äô ["vs", "err"] \\ gvs []
  \\ namedCases_on ‚Äòvs‚Äô ["", "v rest"] \\ gvs []
  \\ Cases_on ‚Äòrest‚Äô \\ gvs []
QED

Triviality exp_res_rel_rerr:
  exp_res_rel m (Rerr dfy_err) r_cml ‚áí
  dfy_err = Rtimeout_error ‚àß r_cml = (Rerr (Rabort Rtimeout_error))
Proof
  namedCases_on ‚Äòr_cml‚Äô ["vs", "err"] \\ gvs []
  \\ namedCases_on ‚Äòerr‚Äô ["raise", "abort"] \\ gvs []
  \\ Cases_on ‚Äòabort‚Äô \\ gvs []
  \\ Cases_on ‚Äòdfy_err‚Äô \\ gvs []
QED

(* NOTE If we have multiple of these, can abstract aways into a function that
   takes a predicate, and walks the AST *)
Definition valid_name_def[simp]:
  (valid_name (Lit _) ‚áî T) ‚àß
  (valid_name (Var name) ‚áî ¬¨(isPrefix ¬´ ¬ª name)) ‚àß
  (valid_name (If tst thn els) ‚áî
     valid_name tst ‚àß valid_name thn ‚àß valid_name els) ‚àß
  (valid_name (UnOp _ e) ‚áî valid_name e) ‚àß
  (valid_name (BinOp _ e‚ÇÄ e‚ÇÅ) ‚áî
     valid_name e‚ÇÄ ‚àß valid_name e‚ÇÅ) ‚àß
  (valid_name (ArrLen arr) ‚áî valid_name arr) ‚àß
  (valid_name (ArrSel arr idx) ‚áî
     valid_name arr ‚àß valid_name idx) ‚àß
  (valid_name (FunCall name es) ‚áî
     ¬¨(isPrefix ¬´ ¬ª name) ‚àß EVERY valid_name es) ‚àß
  (valid_name (Forall (name, _) term) ‚áî
     ¬¨(isPrefix ¬´ ¬ª name) ‚àß valid_name term)
Termination
  wf_rel_tac ‚Äòmeasure $ exp_size‚Äô
End

(* TODO Is there a better way to write these nsLookup lemmas? Maybe in a more
     general form? *)
Triviality nslookup_nsoptbind[simp]:
  nsLookup (nsOptBind (SOME n) v env) (Short n) = SOME v
Proof
  Cases_on ‚Äòenv‚Äô \\ gvs [nsOptBind_def, nsBind_def, nsLookup_def]
QED

Triviality neq_nslookup_nsoptbind[simp]:
  n ‚â† n' ‚áí
  nsLookup (nsOptBind (SOME n') v env) (Short n) =
  nsLookup env (Short n)
Proof
  Cases_on ‚Äòenv‚Äô \\ gvs [nsOptBind_def, nsBind_def, nsLookup_def]
QED

Triviality isprefix_isprefix:
  isPrefix s‚ÇÅ s‚ÇÇ ‚áî explode s‚ÇÅ ‚âº explode s‚ÇÇ
Proof
  cheat
QED

Triviality prefix_space_imp:
  ¬¨isPrefix ¬´ ¬ª n ‚àß " " ‚âº n' ‚áí n' ‚â† explode n
Proof
  rpt strip_tac \\ gvs [isprefix_isprefix]
QED

Triviality state_rel_env_push_internal:
  " " ‚âº n ‚àß state_rel m l s t env ‚áí
  state_rel m l s t (env with v := nsOptBind (SOME n) v env.v)
Proof
  cheat
QED

Triviality state_rel_env_pop_internal:
  " " ‚âº n ‚àß
  state_rel m l s t (env with v := nsOptBind (SOME n) v env.v) ‚áí
  state_rel m l s t env
Proof
  cheat
QED

Triviality boolv_conv:
  Boolv b =
    Conv (SOME (TypeStamp (if b then "True" else "False") bool_type_num)) []
Proof
  Cases_on ‚Äòb‚Äô \\ gvs [Boolv_def]
QED

Triviality with_same_refs_ffi[simp]:
  t with <| refs := t.refs; ffi := t.ffi |> = t
Proof
  gvs [semanticPrimitivesTheory.state_component_equality]
QED

Triviality state_rel_flookup_m:
  state_rel m l s' t' env_cml ‚àß
  FLOOKUP m dfy_loc = SOME cml_loc ‚àß
  FLOOKUP m dfy_loc' = SOME cml_loc' ‚áí
  ((cml_loc' = cml_loc) ‚áî (dfy_loc' = dfy_loc))
Proof
  cheat
QED

Theorem correct_from_exp:
  (‚àÄs env_dfy e_dfy s' r_dfy t env_cml e_cml m l.
     evaluate_exp s env_dfy e_dfy = (s', r_dfy) ‚àß
     from_exp e_dfy = INR e_cml ‚àß state_rel m l s t env_cml ‚àß
     env_rel env_dfy env_cml ‚àß valid_name e_dfy ‚àß
     r_dfy ‚â† Rerr Rtype_error
     ‚áí ‚àÉt' r_cml.
         evaluate$evaluate t env_cml [e_cml] = (t', r_cml) ‚àß
         state_rel m l s' t' env_cml ‚àß exp_res_rel m r_dfy r_cml) ‚àß
  (‚àÄs env_dfy es_dfy s' rs_dfy t env_cml es_cml m l.
     evaluate_exps s env_dfy es_dfy = (s', rs_dfy) ‚àß
     map_from_exp es_dfy = INR es_cml ‚àß state_rel m l s t env_cml ‚àß
     env_rel env_dfy env_cml ‚àß EVERY valid_name es_dfy ‚àß
     rs_dfy ‚â† Rerr Rtype_error
     ‚áí ‚àÉt' rs_cml.
         evaluate$evaluate t env_cml es_cml = (t', rs_cml) ‚àß
         state_rel m l s' t' env_cml ‚àß exp_ress_rel m rs_dfy rs_cml)
Proof
  ho_match_mp_tac evaluate_exp_ind
  \\ rpt strip_tac
  >~ [‚ÄòLit l‚Äô] >-
   (Cases_on ‚Äòl‚Äô
    \\ gvs [from_exp_def, from_lit_def, evaluate_def, do_con_check_def,
            env_rel_def, build_conv_def, exp_res_rel_def, evaluate_exp_def,
            val_rel_cases, Boolv_def, bool_type_num_def, AllCaseEqs()])
  >~ [‚ÄòVar name‚Äô] >-
   (gvs [evaluate_exp_def, AllCaseEqs()]
    \\ drule_all read_local_some_imp \\ rpt strip_tac
    \\ gvs [from_exp_def, cml_read_var_def]
    \\ gvs [evaluate_def, do_app_def, state_rel_def])
  >~ [‚ÄòIf grd thn els‚Äô] >-
   (reverse $
      gvs [evaluate_exp_def, from_exp_def, oneline bind_def, AllCaseEqs()]
    \\ first_x_assum drule_all \\ rpt strip_tac
    >- (gvs [evaluate_def] \\ TOP_CASE_TAC \\ gvs [])
    \\ rename [‚Äòdo_cond v _ _ = SOME _‚Äô] \\ Cases_on ‚Äòv‚Äô
    \\ gvs [do_cond_def]
    \\ drule exp_res_rel_rval \\ rpt strip_tac \\ gvs [val_rel_cases]
    \\ gvs [evaluate_def, do_if_def]
    \\ rename [‚ÄòBoolv b‚Äô] \\ Cases_on ‚Äòb‚Äô
    \\ gvs [Boolv_def])
  >~ [‚ÄòUnOp uop e‚Äô] >-
   (reverse $
      gvs [evaluate_exp_def, from_exp_def, oneline bind_def,
           oneline from_un_op_def, AllCaseEqs()]
    \\ first_x_assum drule_all \\ rpt strip_tac
    >- (drule exp_res_rel_rerr \\ rpt strip_tac \\ gvs [evaluate_def])
    \\ gvs [oneline do_uop_def, AllCaseEqs()]
    \\ drule exp_res_rel_rval \\ rpt strip_tac \\ gvs [val_rel_cases]
    \\ gvs [evaluate_def, do_if_def]
    \\ rename [‚ÄòBoolv b‚Äô] \\ Cases_on ‚Äòb‚Äô
    \\ gvs [evaluate_def, do_con_check_def, build_conv_def, env_rel_def,
            val_rel_cases, Boolv_def, bool_type_num_def])
  >~ [‚ÄòBinOp bop e‚ÇÄ e‚ÇÅ‚Äô] >-
   (gvs [from_exp_def, oneline bind_def, AllCaseEqs()]
    \\ gvs [evaluate_exp_def]
    \\ namedCases_on ‚Äòevaluate_exp s env_dfy e‚ÇÄ‚Äô ["s‚ÇÅ r"] \\ gvs []
    \\ Cases_on ‚Äòr = Rerr Rtype_error‚Äô \\ gvs []
    \\ first_x_assum drule_all \\ rpt strip_tac \\ gvs []
    \\ rename [‚Äòevaluate _ _ _ = (t‚ÇÅ, _)‚Äô]
    \\ gvs [evaluate_def]
    \\ reverse $ Cases_on ‚Äòr‚Äô \\ gvs []
    >- (drule exp_res_rel_rerr \\ rpt strip_tac \\ gvs [])
    \\ drule exp_res_rel_rval \\ rpt strip_tac \\ gvs []
    \\ rename [‚Äòval_rel _ dfy_v‚ÇÄ cml_v‚ÇÄ‚Äô]
    \\ Cases_on ‚Äòdo_sc bop dfy_v‚ÇÄ‚Äô \\ gvs []
    >- (* Short-circuiting *)
     (gvs [oneline do_sc_def, val_rel_cases, evaluate_def, from_bin_op_def,
           do_log_def, Boolv_def, do_if_def, do_con_check_def, env_rel_def,
           build_conv_def, bool_type_num_def, AllCaseEqs()])
    \\ namedCases_on ‚Äòevaluate_exp s‚ÇÅ env_dfy e‚ÇÅ‚Äô ["s‚ÇÇ r"] \\ gvs []
    \\ Cases_on ‚Äòr = Rerr Rtype_error‚Äô \\ gvs []
    \\ ‚Äò" " ‚âº " l"‚Äô by gvs []  \\ drule_all state_rel_env_push_internal
    \\ disch_then $ qspec_then ‚Äòcml_v‚ÇÄ‚Äô assume_tac
    \\ last_x_assum drule
    \\ impl_tac >- gvs [env_rel_def]
    \\ rpt strip_tac
    \\ drule_all state_rel_env_pop_internal \\ rpt strip_tac \\ gvs []
    \\ reverse $ Cases_on ‚Äòr‚Äô \\ gvs []
    >- (drule exp_res_rel_rerr \\ rpt strip_tac \\ Cases_on ‚Äòbop‚Äô
        \\ gvs [oneline do_sc_def, val_rel_cases, from_bin_op_def,
                evaluate_def, do_log_def, do_if_def, AllCaseEqs()])
    \\ drule exp_res_rel_rval \\ rpt strip_tac \\ gvs []
    \\ rename [‚Äòval_rel _ dfy_v‚ÇÅ cml_v‚ÇÅ‚Äô]
    \\ Cases_on ‚Äòdo_bop bop dfy_v‚ÇÄ dfy_v‚ÇÅ‚Äô \\ gvs []
    \\ Cases_on ‚Äòbop = Div‚Äô \\ gvs [] >-
     (gvs [do_bop_def, AllCaseEqs()]
      \\ gvs [from_bin_op_def, EDIV_DEF]
      \\ gvs [evaluate_def, do_app_def, do_if_def, opb_lookup_def]
      \\ Cases_on ‚Äò0 < i‚ÇÅ‚Äô
      \\ gvs [evaluate_def, do_app_def, opn_lookup_def, Boolv_def])
    \\ Cases_on ‚Äòbop = Eq‚Äô \\ gvs [] >-
     (gvs [do_bop_def]
      \\ gvs [from_bin_op_def]
      \\ gvs [evaluate_def, do_app_def]
      \\ namedCases_on ‚Äòdfy_v‚ÇÄ‚Äô ["i", "b", "str", "len dfy_loc"] \\ gvs []
      \\ namedCases_on ‚Äòdfy_v‚ÇÅ‚Äô ["i'", "b'", "str'", "len' dfy_loc'"] \\ gvs []
      >~ [‚Äòdo_eq (Boolv _) (Boolv _)‚Äô] >-
       (Cases_on ‚Äòb‚Äô \\ Cases_on ‚Äòb'‚Äô
        \\ gvs [do_eq_def, lit_same_type_def, Boolv_def, ctor_same_type_def,
                same_type_def])
      >~ [‚Äòdo_eq (Conv _ _) (Conv _ _)‚Äô] >-
       (drule state_rel_flookup_m
        \\ disch_then drule \\ disch_then rev_drule \\ rpt strip_tac
        \\ gvs [do_eq_def, lit_same_type_def]
        \\ Cases_on ‚Äòlen = len'‚Äô \\ gvs []
        \\ Cases_on ‚Äòdfy_loc = dfy_loc'‚Äô \\ gvs [])
      \\ gvs [do_eq_def, lit_same_type_def])
    \\ Cases_on ‚Äòbop = Neq‚Äô \\ gvs [] >-
     (gvs [do_bop_def]
      \\ gvs [from_bin_op_def]
      \\ gvs [evaluate_def, do_app_def]
      \\ namedCases_on
           ‚Äòdfy_v‚ÇÄ‚Äô ["i", "b", "dfy_str", "len dfy_loc"] \\ gvs []
      \\ namedCases_on
           ‚Äòdfy_v‚ÇÅ‚Äô ["i'", "b'", "dfy_str'", "len' dfy_loc'"] \\ gvs []
      >~ [‚Äòdo_eq (Boolv _) (Boolv _)‚Äô] >-
       (Cases_on ‚Äòb‚Äô \\ Cases_on ‚Äòb'‚Äô
        \\ gvs [evaluate_def, do_eq_def, lit_same_type_def, Boolv_def,
                ctor_same_type_def, same_type_def, do_if_def, do_con_check_def,
                build_conv_def, env_rel_def, bool_type_num_def])
      >~ [‚Äòdo_eq (Conv _ _) (Conv _ _)‚Äô] >-
       (drule state_rel_flookup_m
        \\ disch_then drule \\ disch_then rev_drule \\ rpt strip_tac
        \\ gvs [do_eq_def, lit_same_type_def]
        \\ Cases_on ‚Äòlen = len'‚Äô \\ gvs []
        \\ Cases_on ‚Äòdfy_loc = dfy_loc'‚Äô
        \\ gvs [do_if_def, evaluate_def, do_con_check_def, env_rel_def,
                build_conv_def, Boolv_def, bool_type_num_def])
      >~ [‚Äòdo_eq (Litv (IntLit _)) (Litv (IntLit _))‚Äô] >-
       (gvs [do_eq_def, lit_same_type_def, do_if_def]
        \\ Cases_on ‚Äòi' = i‚Äô
        \\ gvs [evaluate_def, do_con_check_def, build_conv_def, env_rel_def,
                Boolv_def, bool_type_num_def])
      >~ [‚Äòdo_eq (Litv (StrLit _)) (Litv (StrLit _))‚Äô] >-
       (gvs [do_eq_def, lit_same_type_def, do_if_def]
        \\ Cases_on ‚Äòdfy_str = dfy_str'‚Äô
        \\ gvs [evaluate_def, do_con_check_def, build_conv_def, env_rel_def,
                Boolv_def, bool_type_num_def]))
      \\ gvs [oneline do_bop_def, do_sc_def, AllCaseEqs()]
      \\ gvs [from_bin_op_def]
      \\ gvs [evaluate_def, do_app_def, opb_lookup_def, opn_lookup_def,
              do_log_def, do_if_def])
  \\ cheat
QED

val _ = export_theory ();
