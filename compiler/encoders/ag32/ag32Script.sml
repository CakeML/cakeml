(* ag32Script.sml - generated by L3 - Tue Oct 09 22:00:02 2018 *)
open HolKernel boolLib bossLib Import

val () = Import.start "ag32"

val _ = Construct
  [("funcT",
    [("fAdd",[]),("fAddWithCarry",[]),("fSub",[]),("fCarry",[]),
     ("fOverflow",[]),("fInc",[]),("fDec",[]),("fMul",[]),("fMulHU",[]),
     ("fAnd",[]),("fOr",[]),("fXor",[]),("fEqual",[]),("fLess",[]),
     ("fLower",[]),("fSnd",[])])]
;
val _ = Construct
  [("shiftT",
    [("shiftLL",[]),("shiftLR",[]),("shiftAR",[]),("shiftRor",[])])]
;
val _ = Construct [("reg_immT",[("Imm",[FTy 6]),("Reg",[FTy 6])])]
;
val _ = Construct
  [("instruction",
    [("Accelerator",[PTy(FTy 6,CTy"reg_immT")]),("In",[FTy 6]),
     ("Interrupt",[]),("Jump",[PTy(CTy"funcT",PTy(FTy 6,CTy"reg_immT"))]),
     ("JumpIfNotZero",
      [PTy(CTy"funcT",PTy(CTy"reg_immT",PTy(CTy"reg_immT",CTy"reg_immT")))]),
     ("JumpIfZero",
      [PTy(CTy"funcT",PTy(CTy"reg_immT",PTy(CTy"reg_immT",CTy"reg_immT")))]),
     ("LoadConstant",[PTy(FTy 6,PTy(bTy,FTy 23))]),
     ("LoadMEM",[PTy(FTy 6,CTy"reg_immT")]),
     ("LoadMEMByte",[PTy(FTy 6,CTy"reg_immT")]),
     ("LoadUpperConstant",[PTy(FTy 6,FTy 9)]),
     ("Normal",
      [PTy(CTy"funcT",PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT")))]),
     ("Out",[PTy(CTy"funcT",PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT")))]),
     ("ReservedInstr",[]),
     ("Shift",
      [PTy(CTy"shiftT",PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT")))]),
     ("StoreMEM",[PTy(CTy"reg_immT",CTy"reg_immT")]),
     ("StoreMEMByte",[PTy(CTy"reg_immT",CTy"reg_immT")])])]
;
val _ = Record
  ("ag32_state",
   [("CarryFlag",bTy),("MEM",ATy(F32,F8)),("OverflowFlag",bTy),("PC",F32),
    ("R",ATy(FTy 6,F32)),("data_in",FTy 2),("data_out",FTy 10),
    ("io_events",LTy(ATy(F32,F8)))])
;
val qTy = CTy "ag32_state";
fun qVar v = Term.mk_var (v, ParseDatatype.pretypeToType qTy);
val ALU_def = Def
  ("ALU",TP[Var("func",CTy"funcT"),Var("a",F32),Var("b",F32)],
   Close
     (qVar"state",
      CS(Var("func",CTy"funcT"),
         [(LC("fAdd",CTy"funcT"),
           Let(Var("ret",F32),Bop(Add,Var("a",F32),Var("b",F32)),
               TP[Var("ret",F32),
                  Rupd
                    ("OverflowFlag",
                     TP[Rupd
                          ("CarryFlag",
                           TP[qVar"state",
                              Bop(Le,Bop(Exp,LN 2,LN 32),
                                  Bop(Add,Mop(Cast nTy,Var("a",F32)),
                                      Mop(Cast nTy,Var("b",F32))))]),
                        Mop(Not,
                            EQ(Mop(Cast iTy,Var("ret",F32)),
                               Bop(Add,Mop(Cast iTy,Var("a",F32)),
                                   Mop(Cast iTy,Var("b",F32)))))])])),
          (LC("fAddWithCarry",CTy"funcT"),
           TP[Bop(Add,Bop(Add,Var("a",F32),Var("b",F32)),
                  Mop(Cast F32,Dest("CarryFlag",bTy,qVar"state"))),
              Rupd
                ("CarryFlag",
                 TP[qVar"state",
                    Bop(Le,Bop(Exp,LN 2,LN 32),
                        Bop(Add,
                            Bop(Add,Mop(Cast nTy,Var("a",F32)),
                                Mop(Cast nTy,Var("b",F32))),
                            Mop(Cast nTy,Dest("CarryFlag",bTy,qVar"state"))))])]),
          (LC("fSub",CTy"funcT"),
           Let(Var("ret",F32),Bop(Sub,Var("a",F32),Var("b",F32)),
               TP[Var("ret",F32),
                  Rupd
                    ("OverflowFlag",
                     TP[qVar"state",
                        Mop(Not,
                            EQ(Mop(Cast iTy,Var("ret",F32)),
                               Bop(Sub,Mop(Cast iTy,Var("a",F32)),
                                   Mop(Cast iTy,Var("b",F32)))))])])),
          (LC("fCarry",CTy"funcT"),
           TP[Mop(Cast F32,Dest("CarryFlag",bTy,qVar"state")),qVar"state"]),
          (LC("fOverflow",CTy"funcT"),
           TP[Mop(Cast F32,Dest("OverflowFlag",bTy,qVar"state")),
              qVar"state"]),
          (LC("fInc",CTy"funcT"),
           TP[Bop(Add,Var("a",F32),LW(1,32)),qVar"state"]),
          (LC("fDec",CTy"funcT"),
           TP[Bop(Sub,Var("a",F32),LW(1,32)),qVar"state"]),
          (LC("fMul",CTy"funcT"),
           TP[Bop(Mul,Var("a",F32),Var("b",F32)),qVar"state"]),
          (LC("fMulHU",CTy"funcT"),
           TP[EX(Bop(Mul,Mop(Cast F64,Var("a",F32)),
                     Mop(Cast F64,Var("b",F32))),LN 63,LN 32,F32),
              qVar"state"]),
          (LC("fAnd",CTy"funcT"),
           TP[Bop(BAnd,Var("a",F32),Var("b",F32)),qVar"state"]),
          (LC("fOr",CTy"funcT"),
           TP[Bop(BOr,Var("a",F32),Var("b",F32)),qVar"state"]),
          (LC("fXor",CTy"funcT"),
           TP[Bop(BXor,Var("a",F32),Var("b",F32)),qVar"state"]),
          (LC("fEqual",CTy"funcT"),
           TP[Mop(Cast F32,EQ(Var("a",F32),Var("b",F32))),qVar"state"]),
          (LC("fLess",CTy"funcT"),
           TP[Mop(Cast F32,Bop(Lt,Var("a",F32),Var("b",F32))),qVar"state"]),
          (LC("fLower",CTy"funcT"),
           TP[Mop(Cast F32,Bop(Ult,Var("a",F32),Var("b",F32))),qVar"state"]),
          (LC("fSnd",CTy"funcT"),TP[Var("b",F32),qVar"state"])])))
;
val shift_def = Def
  ("shift",TP[Var("shiftOp",CTy"shiftT"),Var("a",F32),Var("b",F32)],
   CS(Var("shiftOp",CTy"shiftT"),
      [(LC("shiftLL",CTy"shiftT"),Bop(Lsl,Var("a",F32),Var("b",F32))),
       (LC("shiftLR",CTy"shiftT"),Bop(Lsr,Var("a",F32),Var("b",F32))),
       (LC("shiftAR",CTy"shiftT"),Bop(Asr,Var("a",F32),Var("b",F32))),
       (LC("shiftRor",CTy"shiftT"),Bop(Ror,Var("a",F32),Var("b",F32)))]))
;
val incPC_def = Def
  ("incPC",AVar uTy,
   Close
     (qVar"state",
      Rupd
        ("PC",TP[qVar"state",Bop(Add,Dest("PC",F32,qVar"state"),LW(4,32))])))
;
val norm_def = Def
  ("norm",
   TP[Var("func",CTy"funcT"),bVar"wback",bVar"out",Var("w",FTy 6),
      Var("a",F32),Var("b",F32)],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          Apply
            (Call
               ("ALU",ATy(qTy,PTy(F32,qTy)),
                TP[Var("func",CTy"funcT"),Var("a",F32),Var("b",F32)]),
             qVar"state"),
          Let(qVar"s",
              ITE(bVar"wback",
                  Rupd
                    ("R",
                     TP[qVar"s",
                        Fupd
                          (Dest("R",ATy(FTy 6,F32),qVar"s"),
                           Var("w",FTy 6),Var("v",F32))]),qVar"s"),
              Apply
                (Call("incPC",ATy(qTy,qTy),LU),
                 ITE(bVar"out",
                     Rupd
                       ("data_out",
                        TP[qVar"s",Mop(Cast(FTy 10),Var("v",F32))]),
                     qVar"s"))))))
;
val ri2word_def = Def
  ("ri2word",Var("ri",CTy"reg_immT"),
   Close
     (qVar"state",
      CS(Var("ri",CTy"reg_immT"),
         [(Call("Reg",CTy"reg_immT",Var("i",FTy 6)),
           Apply(Dest("R",ATy(FTy 6,F32),qVar"state"),Var("i",FTy 6))),
          (Call("Imm",CTy"reg_immT",Var("v",FTy 6)),
           Mop(SE F32,Var("v",FTy 6)))])))
;
val dfn'LoadUpperConstant_def = Def
  ("dfn'LoadUpperConstant",TP[Var("reg",FTy 6),Var("imm",FTy 9)],
   Close
     (qVar"state",
      Apply
        (Call("incPC",ATy(qTy,qTy),LU),
         Rupd
           ("R",
            TP[qVar"state",
               Fupd
                 (Dest("R",ATy(FTy 6,F32),qVar"state"),Var("reg",FTy 6),
                  BFI(LN 31,LN 23,Var("imm",FTy 9),
                      Apply
                        (Dest("R",ATy(FTy 6,F32),qVar"state"),
                         Var("reg",FTy 6))))]))))
;
val dfn'LoadConstant_def = Def
  ("dfn'LoadConstant",TP[Var("reg",FTy 6),bVar"negate",Var("imm",FTy 23)],
   Close
     (qVar"state",
      Let(Var("v",F32),Mop(Cast F32,Var("imm",FTy 23)),
          Apply
            (Call("incPC",ATy(qTy,qTy),LU),
             Rupd
               ("R",
                TP[qVar"state",
                   Fupd
                     (Dest("R",ATy(FTy 6,F32),qVar"state"),
                      Var("reg",FTy 6),
                      ITE(bVar"negate",Mop(Neg,Var("v",F32)),Var("v",F32)))])))))
;
val dfn'Normal_def = Def
  ("dfn'Normal",
   TP[Var("func",CTy"funcT"),Var("w",FTy 6),Var("a",CTy"reg_immT"),
      Var("b",CTy"reg_immT")],
   Close
     (qVar"state",
      Apply
        (Call
           ("norm",ATy(qTy,qTy),
            TP[Var("func",CTy"funcT"),LT,LF,Var("w",FTy 6),
               Apply
                 (Call("ri2word",ATy(qTy,F32),Var("a",CTy"reg_immT")),
                  qVar"state"),
               Apply
                 (Call("ri2word",ATy(qTy,F32),Var("b",CTy"reg_immT")),
                  qVar"state")]),qVar"state")))
;
val dfn'Shift_def = Def
  ("dfn'Shift",
   TP[Var("shiftOp",CTy"shiftT"),Var("w",FTy 6),Var("a",CTy"reg_immT"),
      Var("b",CTy"reg_immT")],
   Close
     (qVar"state",
      Apply
        (Call("incPC",ATy(qTy,qTy),LU),
         Rupd
           ("R",
            TP[qVar"state",
               Fupd
                 (Dest("R",ATy(FTy 6,F32),qVar"state"),Var("w",FTy 6),
                  Call
                    ("shift",F32,
                     TP[Var("shiftOp",CTy"shiftT"),
                        Apply
                          (Call
                             ("ri2word",ATy(qTy,F32),
                              Var("a",CTy"reg_immT")),qVar"state"),
                        Apply
                          (Call
                             ("ri2word",ATy(qTy,F32),
                              Var("b",CTy"reg_immT")),qVar"state")]))]))))
;
val dfn'StoreMEM_def = Def
  ("dfn'StoreMEM",TP[Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")],
   Close
     (qVar"state",
      Let(Var("v",F32),
          Apply
            (Call("ri2word",ATy(qTy,F32),Var("a",CTy"reg_immT")),
             qVar"state"),
          Let(Var("alignedAddr",F32),
              CC[EX(Apply
                      (Call("ri2word",ATy(qTy,F32),Var("b",CTy"reg_immT")),
                       qVar"state"),LN 31,LN 2,FTy 30),LW(0,2)],
              Let(qVar"s",
                  Rupd
                    ("MEM",
                     TP[qVar"state",
                        Fupd
                          (Dest("MEM",ATy(F32,F8),qVar"state"),
                           Var("alignedAddr",F32),
                           EX(Var("v",F32),LN 7,LN 0,F8))]),
                  Let(qVar"s",
                      Rupd
                        ("MEM",
                         TP[qVar"s",
                            Fupd
                              (Dest("MEM",ATy(F32,F8),qVar"s"),
                               Bop(Add,Var("alignedAddr",F32),LW(1,32)),
                               EX(Var("v",F32),LN 15,LN 8,F8))]),
                      Let(qVar"s",
                          Rupd
                            ("MEM",
                             TP[qVar"s",
                                Fupd
                                  (Dest("MEM",ATy(F32,F8),qVar"s"),
                                   Bop(Add,Var("alignedAddr",F32),LW(2,32)),
                                   EX(Var("v",F32),LN 23,LN 16,F8))]),
                          Apply
                            (Call("incPC",ATy(qTy,qTy),LU),
                             Rupd
                               ("MEM",
                                TP[qVar"s",
                                   Fupd
                                     (Dest("MEM",ATy(F32,F8),qVar"s"),
                                      Bop(Add,Var("alignedAddr",F32),
                                          LW(3,32)),
                                      EX(Var("v",F32),LN 31,LN 24,F8))])))))))))
;
val dfn'StoreMEMByte_def = Def
  ("dfn'StoreMEMByte",TP[Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")],
   Close
     (qVar"state",
      Apply
        (Call("incPC",ATy(qTy,qTy),LU),
         Rupd
           ("MEM",
            TP[qVar"state",
               Fupd
                 (Dest("MEM",ATy(F32,F8),qVar"state"),
                  Apply
                    (Call("ri2word",ATy(qTy,F32),Var("b",CTy"reg_immT")),
                     qVar"state"),
                  EX(Apply
                       (Call
                          ("ri2word",ATy(qTy,F32),Var("a",CTy"reg_immT")),
                        qVar"state"),LN 7,LN 0,F8))]))))
;
val dfn'LoadMEM_def = Def
  ("dfn'LoadMEM",TP[Var("w",FTy 6),Var("a",CTy"reg_immT")],
   Close
     (qVar"state",
      Let(Var("alignedAddr",F32),
          CC[EX(Apply
                  (Call("ri2word",ATy(qTy,F32),Var("a",CTy"reg_immT")),
                   qVar"state"),LN 31,LN 2,FTy 30),LW(0,2)],
          Apply
            (Call("incPC",ATy(qTy,qTy),LU),
             Rupd
               ("R",
                TP[qVar"state",
                   Fupd
                     (Dest("R",ATy(FTy 6,F32),qVar"state"),Var("w",FTy 6),
                      CC[Apply
                           (Dest("MEM",ATy(F32,F8),qVar"state"),
                            Bop(Add,Var("alignedAddr",F32),LW(3,32))),
                         Apply
                           (Dest("MEM",ATy(F32,F8),qVar"state"),
                            Bop(Add,Var("alignedAddr",F32),LW(2,32))),
                         Apply
                           (Dest("MEM",ATy(F32,F8),qVar"state"),
                            Bop(Add,Var("alignedAddr",F32),LW(1,32))),
                         Apply
                           (Dest("MEM",ATy(F32,F8),qVar"state"),
                            Var("alignedAddr",F32))])])))))
;
val dfn'LoadMEMByte_def = Def
  ("dfn'LoadMEMByte",TP[Var("w",FTy 6),Var("a",CTy"reg_immT")],
   Close
     (qVar"state",
      Apply
        (Call("incPC",ATy(qTy,qTy),LU),
         Rupd
           ("R",
            TP[qVar"state",
               Fupd
                 (Dest("R",ATy(FTy 6,F32),qVar"state"),Var("w",FTy 6),
                  Mop(Cast F32,
                      Apply
                        (Dest("MEM",ATy(F32,F8),qVar"state"),
                         Apply
                           (Call
                              ("ri2word",ATy(qTy,F32),
                               Var("a",CTy"reg_immT")),qVar"state"))))]))))
;
val dfn'Out_def = Def
  ("dfn'Out",
   TP[Var("func",CTy"funcT"),Var("w",FTy 6),Var("a",CTy"reg_immT"),
      Var("b",CTy"reg_immT")],
   Close
     (qVar"state",
      Apply
        (Call
           ("norm",ATy(qTy,qTy),
            TP[Var("func",CTy"funcT"),LT,LT,Var("w",FTy 6),
               Apply
                 (Call("ri2word",ATy(qTy,F32),Var("a",CTy"reg_immT")),
                  qVar"state"),
               Apply
                 (Call("ri2word",ATy(qTy,F32),Var("b",CTy"reg_immT")),
                  qVar"state")]),qVar"state")))
;
val dfn'In_def = Def
  ("dfn'In",Var("w",FTy 6),
   Close
     (qVar"state",
      Apply
        (Call("incPC",ATy(qTy,qTy),LU),
         Rupd
           ("R",
            TP[qVar"state",
               Fupd
                 (Dest("R",ATy(FTy 6,F32),qVar"state"),Var("w",FTy 6),
                  Mop(Cast F32,Dest("data_in",FTy 2,qVar"state")))]))))
;
val accelerator_f_def = Def
  ("accelerator_f",Var("arg",F32),
   Mop(Cast F32,
       Bop(Add,EX(Var("arg",F32),LN 31,LN 16,F16),
           EX(Var("arg",F32),LN 15,LN 0,F16))))
;
val dfn'Accelerator_def = Def
  ("dfn'Accelerator",TP[Var("w",FTy 6),Var("a",CTy"reg_immT")],
   Close
     (qVar"state",
      Apply
        (Call("incPC",ATy(qTy,qTy),LU),
         Rupd
           ("R",
            TP[qVar"state",
               Fupd
                 (Dest("R",ATy(FTy 6,F32),qVar"state"),Var("w",FTy 6),
                  Call
                    ("accelerator_f",F32,
                     Apply
                       (Call
                          ("ri2word",ATy(qTy,F32),Var("a",CTy"reg_immT")),
                        qVar"state")))]))))
;
val dfn'Jump_def = Def
  ("dfn'Jump",
   TP[Var("func",CTy"funcT"),Var("w",FTy 6),Var("a",CTy"reg_immT")],
   Close
     (qVar"state",
      Let(qVar"s",
          Let(TP[Var("v",F32),qVar"s"],
              Apply
                (Call
                   ("ALU",ATy(qTy,PTy(F32,qTy)),
                    TP[Var("func",CTy"funcT"),Dest("PC",F32,qVar"state"),
                       Apply
                         (Call
                            ("ri2word",ATy(qTy,F32),Var("a",CTy"reg_immT")),
                          qVar"state")]),qVar"state"),
              Rupd("PC",TP[qVar"s",Var("v",F32)])),
          Rupd
            ("R",
             TP[qVar"s",
                Fupd
                  (Dest("R",ATy(FTy 6,F32),qVar"s"),Var("w",FTy 6),
                   Bop(Add,Dest("PC",F32,qVar"state"),LW(4,32)))]))))
;
val dfn'JumpIfZero_def = Def
  ("dfn'JumpIfZero",
   TP[Var("func",CTy"funcT"),Var("w",CTy"reg_immT"),
      Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")],
   Close
     (qVar"state",
      Let(TP[bVar"v",qVar"s"],
          Let(TP[Var("v",F32),qVar"s"],
              Apply
                (Call
                   ("ALU",ATy(qTy,PTy(F32,qTy)),
                    TP[Var("func",CTy"funcT"),
                       Apply
                         (Call
                            ("ri2word",ATy(qTy,F32),Var("a",CTy"reg_immT")),
                          qVar"state"),
                       Apply
                         (Call
                            ("ri2word",ATy(qTy,F32),Var("b",CTy"reg_immT")),
                          qVar"state")]),qVar"state"),
              TP[EQ(Var("v",F32),LW(0,32)),qVar"s"]),
          ITE(bVar"v",
              Rupd
                ("PC",
                 TP[qVar"s",
                    Bop(Add,Dest("PC",F32,qVar"s"),
                        Apply
                          (Call
                             ("ri2word",ATy(qTy,F32),
                              Var("w",CTy"reg_immT")),qVar"s"))]),
              Apply(Call("incPC",ATy(qTy,qTy),LU),qVar"s")))))
;
val dfn'JumpIfNotZero_def = Def
  ("dfn'JumpIfNotZero",
   TP[Var("func",CTy"funcT"),Var("w",CTy"reg_immT"),
      Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")],
   Close
     (qVar"state",
      Let(TP[bVar"v",qVar"s"],
          Let(TP[bVar"v",qVar"s"],
              Let(TP[Var("v",F32),qVar"s"],
                  Apply
                    (Call
                       ("ALU",ATy(qTy,PTy(F32,qTy)),
                        TP[Var("func",CTy"funcT"),
                           Apply
                             (Call
                                ("ri2word",ATy(qTy,F32),
                                 Var("a",CTy"reg_immT")),qVar"state"),
                           Apply
                             (Call
                                ("ri2word",ATy(qTy,F32),
                                 Var("b",CTy"reg_immT")),qVar"state")]),
                     qVar"state"),TP[EQ(Var("v",F32),LW(0,32)),qVar"s"]),
              TP[Mop(Not,bVar"v"),qVar"s"]),
          ITE(bVar"v",
              Rupd
                ("PC",
                 TP[qVar"s",
                    Bop(Add,Dest("PC",F32,qVar"s"),
                        Apply
                          (Call
                             ("ri2word",ATy(qTy,F32),
                              Var("w",CTy"reg_immT")),qVar"s"))]),
              Apply(Call("incPC",ATy(qTy,qTy),LU),qVar"s")))))
;
val dfn'Interrupt_def = Def
  ("dfn'Interrupt",qVar"state",
   Apply
     (Call("incPC",ATy(qTy,qTy),LU),
      Rupd
        ("io_events",
         TP[qVar"state",
            CC[Dest("io_events",LTy(ATy(F32,F8)),qVar"state"),
               LL[Dest("MEM",ATy(F32,F8),qVar"state")]]])))
;
val dfn'ReservedInstr_def = Def0 ("dfn'ReservedInstr",LU)
;
val Run_def = Def
  ("Run",Var("v0",CTy"instruction"),
   Close
     (qVar"state",
      CS(Var("v0",CTy"instruction"),
         [(Const("Interrupt",CTy"instruction"),
           Apply(Const("dfn'Interrupt",ATy(qTy,qTy)),qVar"state")),
          (Const("ReservedInstr",CTy"instruction"),qVar"state"),
          (Call
             ("Accelerator",CTy"instruction",
              Var("v1",PTy(FTy 6,CTy"reg_immT"))),
           Apply
             (Call
                ("dfn'Accelerator",ATy(qTy,qTy),
                 Var("v1",PTy(FTy 6,CTy"reg_immT"))),qVar"state")),
          (Call("In",CTy"instruction",Var("v2",FTy 6)),
           Apply(Call("dfn'In",ATy(qTy,qTy),Var("v2",FTy 6)),qVar"state")),
          (Call
             ("Jump",CTy"instruction",
              Var("v3",PTy(CTy"funcT",PTy(FTy 6,CTy"reg_immT")))),
           Apply
             (Call
                ("dfn'Jump",ATy(qTy,qTy),
                 Var("v3",PTy(CTy"funcT",PTy(FTy 6,CTy"reg_immT")))),
              qVar"state")),
          (Call
             ("JumpIfNotZero",CTy"instruction",
              Var("v4",
                  PTy(CTy"funcT",
                      PTy(CTy"reg_immT",PTy(CTy"reg_immT",CTy"reg_immT"))))),
           Apply
             (Call
                ("dfn'JumpIfNotZero",ATy(qTy,qTy),
                 Var("v4",
                     PTy(CTy"funcT",
                         PTy(CTy"reg_immT",
                             PTy(CTy"reg_immT",CTy"reg_immT"))))),
              qVar"state")),
          (Call
             ("JumpIfZero",CTy"instruction",
              Var("v5",
                  PTy(CTy"funcT",
                      PTy(CTy"reg_immT",PTy(CTy"reg_immT",CTy"reg_immT"))))),
           Apply
             (Call
                ("dfn'JumpIfZero",ATy(qTy,qTy),
                 Var("v5",
                     PTy(CTy"funcT",
                         PTy(CTy"reg_immT",
                             PTy(CTy"reg_immT",CTy"reg_immT"))))),
              qVar"state")),
          (Call
             ("LoadConstant",CTy"instruction",
              Var("v6",PTy(FTy 6,PTy(bTy,FTy 23)))),
           Apply
             (Call
                ("dfn'LoadConstant",ATy(qTy,qTy),
                 Var("v6",PTy(FTy 6,PTy(bTy,FTy 23)))),qVar"state")),
          (Call
             ("LoadMEM",CTy"instruction",
              Var("v7",PTy(FTy 6,CTy"reg_immT"))),
           Apply
             (Call
                ("dfn'LoadMEM",ATy(qTy,qTy),
                 Var("v7",PTy(FTy 6,CTy"reg_immT"))),qVar"state")),
          (Call
             ("LoadMEMByte",CTy"instruction",
              Var("v8",PTy(FTy 6,CTy"reg_immT"))),
           Apply
             (Call
                ("dfn'LoadMEMByte",ATy(qTy,qTy),
                 Var("v8",PTy(FTy 6,CTy"reg_immT"))),qVar"state")),
          (Call
             ("LoadUpperConstant",CTy"instruction",
              Var("v9",PTy(FTy 6,FTy 9))),
           Apply
             (Call
                ("dfn'LoadUpperConstant",ATy(qTy,qTy),
                 Var("v9",PTy(FTy 6,FTy 9))),qVar"state")),
          (Call
             ("Normal",CTy"instruction",
              Var("v10",
                  PTy(CTy"funcT",
                      PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT"))))),
           Apply
             (Call
                ("dfn'Normal",ATy(qTy,qTy),
                 Var("v10",
                     PTy(CTy"funcT",
                         PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT"))))),
              qVar"state")),
          (Call
             ("Out",CTy"instruction",
              Var("v11",
                  PTy(CTy"funcT",
                      PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT"))))),
           Apply
             (Call
                ("dfn'Out",ATy(qTy,qTy),
                 Var("v11",
                     PTy(CTy"funcT",
                         PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT"))))),
              qVar"state")),
          (Call
             ("Shift",CTy"instruction",
              Var("v12",
                  PTy(CTy"shiftT",
                      PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT"))))),
           Apply
             (Call
                ("dfn'Shift",ATy(qTy,qTy),
                 Var("v12",
                     PTy(CTy"shiftT",
                         PTy(FTy 6,PTy(CTy"reg_immT",CTy"reg_immT"))))),
              qVar"state")),
          (Call
             ("StoreMEM",CTy"instruction",
              Var("v13",PTy(CTy"reg_immT",CTy"reg_immT"))),
           Apply
             (Call
                ("dfn'StoreMEM",ATy(qTy,qTy),
                 Var("v13",PTy(CTy"reg_immT",CTy"reg_immT"))),qVar"state")),
          (Call
             ("StoreMEMByte",CTy"instruction",
              Var("v14",PTy(CTy"reg_immT",CTy"reg_immT"))),
           Apply
             (Call
                ("dfn'StoreMEMByte",ATy(qTy,qTy),
                 Var("v14",PTy(CTy"reg_immT",CTy"reg_immT"))),qVar"state"))])))
;
val DecodeReg_imm_def = Def
  ("DecodeReg_imm",TP[Var("flag",F1),Var("v",FTy 6)],
   ITE(EQ(Var("flag",F1),LW(0,1)),
       Call("Reg",CTy"reg_immT",Var("v",FTy 6)),
       Call("Imm",CTy"reg_immT",Var("v",FTy 6))))
;
val Decode_def = Def
  ("Decode",Var("opc",F32),
   Let(TP[bVar"b'31",bVar"b'30",bVar"b'29",bVar"b'28",bVar"b'27",
          bVar"b'26",bVar"b'25",bVar"b'24",bVar"b'23",bVar"b'22",
          bVar"b'21",bVar"b'20",bVar"b'19",bVar"b'18",bVar"b'17",
          bVar"b'16",bVar"b'15",bVar"b'14",bVar"b'13",bVar"b'12",
          bVar"b'11",bVar"b'10",bVar"b'9",bVar"b'8",bVar"b'7",bVar"b'6",
          bVar"b'5",bVar"b'4",bVar"b'3",bVar"b'2",bVar"b'1",bVar"b'0"],
       BL(32,Var("opc",F32)),
       ITB([(Bop(And,Mop(Not,bVar"b'31"),
                 Bop(And,bVar"b'24",
                     Bop(And,Mop(Not,bVar"b'23"),
                         Bop(And,Mop(Not,bVar"b'22"),
                             Bop(And,Mop(Not,bVar"b'21"),
                                 Bop(And,Mop(Not,bVar"b'20"),
                                     Bop(And,Mop(Not,bVar"b'19"),
                                         Bop(And,Mop(Not,bVar"b'18"),
                                             Bop(And,Mop(Not,bVar"b'17"),
                                                 Bop(And,
                                                     Mop(Not,bVar"b'16"),
                                                     Bop(And,
                                                         Mop(Not,
                                                             bVar"b'15"),
                                                         Bop(And,
                                                             Mop(Not,
                                                                 bVar"b'14"),
                                                             Bop(And,
                                                                 Mop(Not,
                                                                     bVar"b'13"),
                                                                 Bop(And,
                                                                     Mop(Not,
                                                                         bVar"b'12"),
                                                                     Bop(And,
                                                                         Mop(Not,
                                                                             bVar"b'11"),
                                                                         Bop(And,
                                                                             Mop(Not,
                                                                                 bVar"b'10"),
                                                                             Mop(Not,
                                                                                 bVar"b'9"))))))))))))))))),
             Call
               ("LoadUpperConstant",CTy"instruction",
                TP[Mop(Cast(FTy 6),
                       LL[bVar"b'30",bVar"b'29",bVar"b'28",bVar"b'27",
                          bVar"b'26",bVar"b'25"]),
                   Mop(Cast(FTy 9),
                       LL[bVar"b'8",bVar"b'7",bVar"b'6",bVar"b'5",
                          bVar"b'4",bVar"b'3",bVar"b'2",bVar"b'1",
                          bVar"b'0"])])),
            (Bop(And,bVar"b'31",bVar"b'24"),
             Call
               ("LoadConstant",CTy"instruction",
                TP[Mop(Cast(FTy 6),
                       LL[bVar"b'30",bVar"b'29",bVar"b'28",bVar"b'27",
                          bVar"b'26",bVar"b'25"]),
                   Mop(Cast bTy,Mop(Cast F1,LL[bVar"b'23"])),
                   Mop(Cast(FTy 23),
                       LL[bVar"b'22",bVar"b'21",bVar"b'20",bVar"b'19",
                          bVar"b'18",bVar"b'17",bVar"b'16",bVar"b'15",
                          bVar"b'14",bVar"b'13",bVar"b'12",bVar"b'11",
                          bVar"b'10",bVar"b'9",bVar"b'8",bVar"b'7",
                          bVar"b'6",bVar"b'5",bVar"b'4",bVar"b'3",
                          bVar"b'2",bVar"b'1",bVar"b'0"])])),
            (bVar"b'24",Const("ReservedInstr",CTy"instruction"))],
           Let(Var("Op",FTy 6),
               Mop(Cast(FTy 6),
                   LL[bVar"b'5",bVar"b'4",bVar"b'3",bVar"b'2",bVar"b'1",
                      bVar"b'0"]),
               Let(Var("OpArg",F4),
                   Mop(Cast F4,LL[bVar"b'9",bVar"b'8",bVar"b'7",bVar"b'6"]),
                   Let(Var("w",CTy"reg_immT"),
                       Call
                         ("DecodeReg_imm",CTy"reg_immT",
                          TP[Mop(Cast F1,LL[bVar"b'31"]),
                             Mop(Cast(FTy 6),
                                 LL[bVar"b'30",bVar"b'29",bVar"b'28",
                                    bVar"b'27",bVar"b'26",bVar"b'25"])]),
                       Let(Var("a",CTy"reg_immT"),
                           Call
                             ("DecodeReg_imm",CTy"reg_immT",
                              TP[Mop(Cast F1,LL[bVar"b'23"]),
                                 Mop(Cast(FTy 6),
                                     LL[bVar"b'22",bVar"b'21",bVar"b'20",
                                        bVar"b'19",bVar"b'18",bVar"b'17"])]),
                           Let(Var("b",CTy"reg_immT"),
                               Call
                                 ("DecodeReg_imm",CTy"reg_immT",
                                  TP[Mop(Cast F1,LL[bVar"b'16"]),
                                     Mop(Cast(FTy 6),
                                         LL[bVar"b'15",bVar"b'14",
                                            bVar"b'13",bVar"b'12",
                                            bVar"b'11",bVar"b'10"])]),
                               Let(Var("func",CTy"funcT"),
                                   Mop(Cast(CTy"funcT"),Var("OpArg",F4)),
                                   CS(Var("Op",FTy 6),
                                      [(LW(10,6),
                                        Call
                                          ("JumpIfZero",CTy"instruction",
                                           TP[Var("func",CTy"funcT"),
                                              Var("w",CTy"reg_immT"),
                                              Var("a",CTy"reg_immT"),
                                              Var("b",CTy"reg_immT")])),
                                       (LW(11,6),
                                        Call
                                          ("JumpIfNotZero",
                                           CTy"instruction",
                                           TP[Var("func",CTy"funcT"),
                                              Var("w",CTy"reg_immT"),
                                              Var("a",CTy"reg_immT"),
                                              Var("b",CTy"reg_immT")])),
                                       (LW(12,6),
                                        Const
                                          ("Interrupt",CTy"instruction")),
                                       (AVar(FTy 6),
                                        CS(Var("w",CTy"reg_immT"),
                                           [(Call
                                               ("Imm",CTy"reg_immT",
                                                AVar(FTy 6)),
                                             Const
                                               ("ReservedInstr",
                                                CTy"instruction")),
                                            (Call
                                               ("Reg",CTy"reg_immT",
                                                Var("wi",FTy 6)),
                                             CS(Var("Op",FTy 6),
                                                [(LW(0,6),
                                                  Call
                                                    ("Normal",
                                                     CTy"instruction",
                                                     TP[Var("func",
                                                            CTy"funcT"),
                                                        Var("wi",FTy 6),
                                                        Var("a",
                                                            CTy"reg_immT"),
                                                        Var("b",
                                                            CTy"reg_immT")])),
                                                 (LW(1,6),
                                                  Call
                                                    ("Shift",
                                                     CTy"instruction",
                                                     TP[Mop(Cast
                                                              (CTy"shiftT"),
                                                            EX(Var("OpArg",
                                                                   F4),
                                                               LN 1,LN 0,
                                                               FTy 2)),
                                                        Var("wi",FTy 6),
                                                        Var("a",
                                                            CTy"reg_immT"),
                                                        Var("b",
                                                            CTy"reg_immT")])),
                                                 (LW(2,6),
                                                  Call
                                                    ("StoreMEM",
                                                     CTy"instruction",
                                                     TP[Var("a",
                                                            CTy"reg_immT"),
                                                        Var("b",
                                                            CTy"reg_immT")])),
                                                 (LW(3,6),
                                                  Call
                                                    ("StoreMEMByte",
                                                     CTy"instruction",
                                                     TP[Var("a",
                                                            CTy"reg_immT"),
                                                        Var("b",
                                                            CTy"reg_immT")])),
                                                 (LW(4,6),
                                                  Call
                                                    ("LoadMEM",
                                                     CTy"instruction",
                                                     TP[Var("wi",FTy 6),
                                                        Var("a",
                                                            CTy"reg_immT")])),
                                                 (LW(5,6),
                                                  Call
                                                    ("LoadMEMByte",
                                                     CTy"instruction",
                                                     TP[Var("wi",FTy 6),
                                                        Var("a",
                                                            CTy"reg_immT")])),
                                                 (LW(6,6),
                                                  Call
                                                    ("Out",
                                                     CTy"instruction",
                                                     TP[Var("func",
                                                            CTy"funcT"),
                                                        Var("wi",FTy 6),
                                                        Var("a",
                                                            CTy"reg_immT"),
                                                        Var("b",
                                                            CTy"reg_immT")])),
                                                 (LW(7,6),
                                                  Call
                                                    ("In",
                                                     CTy"instruction",
                                                     Var("wi",FTy 6))),
                                                 (LW(8,6),
                                                  Call
                                                    ("Accelerator",
                                                     CTy"instruction",
                                                     TP[Var("wi",FTy 6),
                                                        Var("a",
                                                            CTy"reg_immT")])),
                                                 (LW(9,6),
                                                  Call
                                                    ("Jump",
                                                     CTy"instruction",
                                                     TP[Var("func",
                                                            CTy"funcT"),
                                                        Var("wi",FTy 6),
                                                        Var("a",
                                                            CTy"reg_immT")])),
                                                 (AVar(FTy 6),
                                                  Const
                                                    ("ReservedInstr",
                                                     CTy"instruction"))]))]))]))))))))))
;
val Next_def = Def
  ("Next",qVar"state",
   Let(Var("v",F32),
       CC[EX(Dest("PC",F32,qVar"state"),LN 31,LN 2,FTy 30),LW(0,2)],
       Apply
         (Call
            ("Run",ATy(qTy,qTy),
             Call
               ("Decode",CTy"instruction",
                CC[Apply
                     (Dest("MEM",ATy(F32,F8),qVar"state"),
                      Bop(Add,Var("v",F32),LW(3,32))),
                   Apply
                     (Dest("MEM",ATy(F32,F8),qVar"state"),
                      Bop(Add,Var("v",F32),LW(2,32))),
                   Apply
                     (Dest("MEM",ATy(F32,F8),qVar"state"),
                      Bop(Add,Var("v",F32),LW(1,32))),
                   Apply(Dest("MEM",ATy(F32,F8),qVar"state"),Var("v",F32))])),
          qVar"state")))
;
val ri2bits_def = Def
  ("ri2bits",Var("ri",CTy"reg_immT"),
   CS(Var("ri",CTy"reg_immT"),
      [(Call("Reg",CTy"reg_immT",Var("i",FTy 6)),
        CC[LW(0,1),Var("i",FTy 6)]),
       (Call("Imm",CTy"reg_immT",Var("v",FTy 6)),
        CC[LW(1,1),Var("v",FTy 6)])]))
;
val enc_def = Def
  ("enc",
   TP[Var("func",CTy"funcT"),Var("w",CTy"reg_immT"),
      Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),Var("opc",FTy 6)],
   CC[Call("ri2bits",FTy 7,Var("w",CTy"reg_immT")),LW(0,1),
      Call("ri2bits",FTy 7,Var("a",CTy"reg_immT")),
      Call("ri2bits",FTy 7,Var("b",CTy"reg_immT")),
      Mop(Cast F4,Var("func",CTy"funcT")),Var("opc",FTy 6)])
;
val encShift_def = Def
  ("encShift",
   TP[Var("shift",CTy"shiftT"),Var("w",CTy"reg_immT"),
      Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),Var("opc",FTy 6)],
   CC[Call("ri2bits",FTy 7,Var("w",CTy"reg_immT")),LW(0,1),
      Call("ri2bits",FTy 7,Var("a",CTy"reg_immT")),
      Call("ri2bits",FTy 7,Var("b",CTy"reg_immT")),
      Mop(Cast F4,Var("shift",CTy"shiftT")),Var("opc",FTy 6)])
;
val Encode_def = Def
  ("Encode",Var("i",CTy"instruction"),
   CS(Var("i",CTy"instruction"),
      [(Call
          ("LoadUpperConstant",CTy"instruction",
           TP[Var("Rw",FTy 6),Var("const",FTy 9)]),
        CC[LW(0,1),Var("Rw",FTy 6),LW(1,1),LW(0,15),Var("const",FTy 9)]),
       (Call
          ("LoadConstant",CTy"instruction",
           TP[Var("Rw",FTy 6),bVar"neg",Var("const",FTy 23)]),
        CC[LW(1,1),Var("Rw",FTy 6),LW(1,1),Mop(Cast F1,bVar"neg"),
           Var("const",FTy 23)]),
       (Call
          ("Normal",CTy"instruction",
           TP[Var("func",CTy"funcT"),Var("w",FTy 6),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[Var("func",CTy"funcT"),
              Call("Reg",CTy"reg_immT",Var("w",FTy 6)),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),LW(0,6)])),
       (Call
          ("Shift",CTy"instruction",
           TP[Var("shift",CTy"shiftT"),Var("w",FTy 6),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")]),
        Call
          ("encShift",F32,
           TP[Var("shift",CTy"shiftT"),
              Call("Reg",CTy"reg_immT",Var("w",FTy 6)),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),LW(1,6)])),
       (Call
          ("StoreMEM",CTy"instruction",
           TP[Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[LC("fAdd",CTy"funcT"),Call("Reg",CTy"reg_immT",LW(0,6)),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),LW(2,6)])),
       (Call
          ("StoreMEMByte",CTy"instruction",
           TP[Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[LC("fAdd",CTy"funcT"),Call("Reg",CTy"reg_immT",LW(0,6)),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),LW(3,6)])),
       (Call
          ("LoadMEM",CTy"instruction",
           TP[Var("w",FTy 6),Var("a",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[LC("fAdd",CTy"funcT"),
              Call("Reg",CTy"reg_immT",Var("w",FTy 6)),
              Var("a",CTy"reg_immT"),Call("Imm",CTy"reg_immT",LW(0,6)),
              LW(4,6)])),
       (Call
          ("LoadMEMByte",CTy"instruction",
           TP[Var("w",FTy 6),Var("a",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[LC("fAdd",CTy"funcT"),
              Call("Reg",CTy"reg_immT",Var("w",FTy 6)),
              Var("a",CTy"reg_immT"),Call("Imm",CTy"reg_immT",LW(0,6)),
              LW(5,6)])),
       (Call
          ("Out",CTy"instruction",
           TP[Var("func",CTy"funcT"),Var("w",FTy 6),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[Var("func",CTy"funcT"),
              Call("Reg",CTy"reg_immT",Var("w",FTy 6)),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),LW(6,6)])),
       (Call("In",CTy"instruction",Var("w",FTy 6)),
        Call
          ("enc",F32,
           TP[LC("fAdd",CTy"funcT"),
              Call("Reg",CTy"reg_immT",Var("w",FTy 6)),
              Call("Imm",CTy"reg_immT",LW(0,6)),
              Call("Imm",CTy"reg_immT",LW(0,6)),LW(7,6)])),
       (Call
          ("Accelerator",CTy"instruction",
           TP[Var("w",FTy 6),Var("a",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[LC("fAdd",CTy"funcT"),
              Call("Reg",CTy"reg_immT",Var("w",FTy 6)),
              Var("a",CTy"reg_immT"),Call("Imm",CTy"reg_immT",LW(0,6)),
              LW(8,6)])),
       (Call
          ("Jump",CTy"instruction",
           TP[Var("func",CTy"funcT"),Var("w",FTy 6),Var("a",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[Var("func",CTy"funcT"),
              Call("Reg",CTy"reg_immT",Var("w",FTy 6)),
              Var("a",CTy"reg_immT"),Call("Imm",CTy"reg_immT",LW(0,6)),
              LW(9,6)])),
       (Call
          ("JumpIfZero",CTy"instruction",
           TP[Var("func",CTy"funcT"),Var("w",CTy"reg_immT"),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[Var("func",CTy"funcT"),Var("w",CTy"reg_immT"),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),LW(10,6)])),
       (Call
          ("JumpIfNotZero",CTy"instruction",
           TP[Var("func",CTy"funcT"),Var("w",CTy"reg_immT"),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT")]),
        Call
          ("enc",F32,
           TP[Var("func",CTy"funcT"),Var("w",CTy"reg_immT"),
              Var("a",CTy"reg_immT"),Var("b",CTy"reg_immT"),LW(11,6)])),
       (Const("Interrupt",CTy"instruction"),
        Call
          ("enc",F32,
           TP[LC("fAdd",CTy"funcT"),Call("Imm",CTy"reg_immT",LW(0,6)),
              Call("Imm",CTy"reg_immT",LW(0,6)),
              Call("Imm",CTy"reg_immT",LW(0,6)),LW(12,6)])),
       (AVar(CTy"instruction"),LW(63,32))]))

val () = Import.finish 1