(*
  Concrete encodings of the wasm binary format

  Sketch/draft/incomplete

  Blame: CHRC
*)

open preamble;
open wordsTheory wordsLib wasmLangTheory;

Definition encode_numtype_def:
 encode_numtype (NT Int   w32) = 0x7F ∧
 encode_numtype (NT Int   w64) = 0x7E ∧
 encode_numtype (NT Float w32) = 0x7D ∧
 encode_numtype (NT Float w64) = 0x7C
End

Definition decode_numtype_def:
 dencode_numtype 0x7F = (NT Int   w32)  ∧
 dencode_numtype 0x7E = (NT Int   w64)  ∧
 dencode_numtype 0x7D = (NT Float w32)  ∧
 dencode_numtype 0x7C = (NT Float w64)
End

(* How Should I type this?
byte_Stream -> num_instr *)
Definition decode_numInstr_def: decode_numInstr bytes = case ??? bytes of
  | 0x45 ⇒ SOME (N_Test (Eqz w32))
  | 0x46 ⇒ SOME (N_compare (Eq Int w32))
  | 0x47 ⇒ SOME (N_compare (Ne Int w32))
  | 0x48 ⇒ SOME (N_compare (Lt_   Signed w32))
  | 0x49 ⇒ SOME (N_compare (Lt_ Unsigned w32))
  | 0x4A ⇒ SOME (N_compare (Gt_   Signed w32))
  | 0x4B ⇒ SOME (N_compare (Gt_ Unsigned w32))
  | 0x4C ⇒ SOME (N_compare (Le_   Signed w32))
  | 0x4D ⇒ SOME (N_compare (Le_ Unsigned w32))
  | 0x4E ⇒ SOME (N_compare (Ge_   Signed w32))
  | 0x4F ⇒ SOME (N_compare (Ge_ Unsigned w32))
  | 0x50 ⇒ SOME (N_Test (Eqz w64))
  | 0x51 ⇒ SOME (N_compare (Eq Int w64))
  | 0x52 ⇒ SOME (N_compare (Ne Int w64))
  | 0x53 ⇒ SOME (N_compare (Lt_   Signed w64))
  | 0x54 ⇒ SOME (N_compare (Lt_ Unsigned w64))
  | 0x55 ⇒ SOME (N_compare (Gt_   Signed w64))
  | 0x56 ⇒ SOME (N_compare (Gt_ Unsigned w64))
  | 0x57 ⇒ SOME (N_compare (Le_   Signed w64))
  | 0x58 ⇒ SOME (N_compare (Le_ Unsigned w64))
  | 0x59 ⇒ SOME (N_compare (Ge_   Signed w64))
  | 0x5A ⇒ SOME (N_compare (Ge_ Unsigned w64))
  | 0x5B ⇒ SOME (N_compare (Eq Float w32))
  | 0x5C ⇒ SOME (N_compare (Ne Float w32))
  | 0x5D ⇒ SOME (N_compare (Lt w32))
  | 0x5E ⇒ SOME (N_compare (Gt w32))
  | 0x5F ⇒ SOME (N_compare (Le w32))
  | 0x60 ⇒ SOME (N_compare (Ge w32))
  | 0x61 ⇒ SOME (N_compare (Eq Float w64))
  | 0x62 ⇒ SOME (N_compare (Ne Float w64))
  | 0x63 ⇒ SOME (N_compare (Lt w64))
  | 0x64 ⇒ SOME (N_compare (Gt w64))
  | 0x65 ⇒ SOME (N_compare (Le w64))
  | 0x66 ⇒ SOME (N_compare (Ge w64))
  | 0x67 ⇒ SOME (N_unary (Clz    w32))
  | 0x68 ⇒ SOME (N_unary (Ctz    w32))
  | 0x69 ⇒ SOME (N_unary (Popcnt w32))
  | 0x6A ⇒ SOME (N_binary (Add Int w32))
  | 0x6B ⇒ SOME (N_binary (Sub Int w32))
  | 0x6C ⇒ SOME (N_binary (Mul Int w32))
  | 0x6D ⇒ SOME (N_binary (Div_   Signed w32))
  | 0x6E ⇒ SOME (N_binary (Div_ Unsigned w32))
  | 0x6F ⇒ SOME (N_binary (Rem_   Signed w32))
  | 0x70 ⇒ SOME (N_binary (Rem_ Unsigned w32))
  | 0x71 ⇒ SOME (N_binary (And w32))
  | 0x72 ⇒ SOME (N_binary (Or w32))
  | 0x73 ⇒ SOME (N_binary (Xor w32))
  | 0x74 ⇒ SOME (N_binary (Shl w32))
  | 0x75 ⇒ SOME (N_binary (Shr_   Signed w32))
  | 0x76 ⇒ SOME (N_binary (Shr_ Unsigned w32))
  | 0x77 ⇒ SOME (N_binary (Rotl w32))
  | 0x78 ⇒ SOME (N_binary (Rotr w32))
  | 0x79 ⇒ SOME (N_unary (Clz    w64))
  | 0x7A ⇒ SOME (N_unary (Ctz    w64))
  | 0x7B ⇒ SOME (N_unary (Popcnt w64))
  | 0x7C ⇒ SOME (N_binary (Add Int w64))
  | 0x7D ⇒ SOME (N_binary (Sub Int w64))
  | 0x7E ⇒ SOME (N_binary (Mul Int w64))
  | 0x7F ⇒ SOME (N_binary (Div_   Signed w64))
  | 0x80 ⇒ SOME (N_binary (Div_ Unsigned w64))
  | 0x81 ⇒ SOME (N_binary (Rem_   Signed w64))
  | 0x82 ⇒ SOME (N_binary (Rem_ Unsigned w64))
  | 0x83 ⇒ SOME (N_binary (And w64))
  | 0x84 ⇒ SOME (N_binary (Or w64))
  | 0x85 ⇒ SOME (N_binary (Xor w64))
  | 0x86 ⇒ SOME (N_binary (Shl w64))
  | 0x87 ⇒ SOME (N_binary (Shr_   Signed w64))
  | 0x88 ⇒ SOME (N_binary (Shr_ Unsigned w64))
  | 0x89 ⇒ SOME (N_binary (Rotl w64))
  | 0x8A ⇒ SOME (N_binary (Rotr w64))
  | 0x8B ⇒ SOME (N_unary (Abs w32))
  | 0x8C ⇒ SOME (N_unary (Neg w32))
  | 0x8D ⇒ SOME (N_unary (Ceil w32))
  | 0x8E ⇒ SOME (N_unary (Floor w32))
  | 0x8F ⇒ SOME (N_unary (Trunc w32))
  | 0x90 ⇒ SOME (N_unary (Nearest w32))
  | 0x91 ⇒ SOME (N_unary (Sqrt w32))
  | 0x92 ⇒ SOME (N_binary (Add Float w32))
  | 0x93 ⇒ SOME (N_binary (Sub Float w32))
  | 0x94 ⇒ SOME (N_binary (Mul Float w32))
  | 0x95 ⇒ SOME (N_binary (Div w32))
  | 0x96 ⇒ SOME (N_binary (Min w32))
  | 0x97 ⇒ SOME (N_binary (Max w32))
  | 0x98 ⇒ SOME (N_binary (Copysign w32))
  | 0x99 ⇒ SOME (N_unary (Abs w64))
  | 0x9A ⇒ SOME (N_unary (Neg w64))
  | 0x9B ⇒ SOME (N_unary (Ceil w64))
  | 0x9C ⇒ SOME (N_unary (Floor w64))
  | 0x9D ⇒ SOME (N_unary (Trunc w64))
  | 0x9E ⇒ SOME (N_unary (Nearest w64))
  | 0x9F ⇒ SOME (N_unary (Sqrt w64))
  | 0xA0 ⇒ SOME (N_binary (Add Float w64))
  | 0xA1 ⇒ SOME (N_binary (Sub Float w64))
  | 0xA2 ⇒ SOME (N_binary (Mul Float w64))
  | 0xA3 ⇒ SOME (N_binary (Div w64))
  | 0xA4 ⇒ SOME (N_binary (Min w64))
  | 0xA5 ⇒ SOME (N_binary (Max w64))
  | 0xA6 ⇒ SOME (N_binary (Copysign w64))
  | 0xA7 ⇒ SOME (N_convert Wrap_i64)
  | 0xA8 ⇒ SOME (N_convert (Trunc_f w32   Signed w32))
  | 0xA9 ⇒ SOME (N_convert (Trunc_f w32 Unsigned w32))
  | 0xAA ⇒ SOME (N_convert (Trunc_f w64   Signed w32))
  | 0xAB ⇒ SOME (N_convert (Trunc_f w64 Unsigned w32))
  | 0xAC ⇒ SOME (N_unary (Extend_i32_   Signed))
  | 0xAD ⇒ SOME (N_unary (Extend_i32_ Unsigned))
  | 0xAE ⇒ SOME (N_convert (Trunc_f w32   Signed w64))
  | 0xAF ⇒ SOME (N_convert (Trunc_f w32 Unsigned w64))
  | 0xB0 ⇒ SOME (N_convert (Trunc_f w64   Signed w64))
  | 0xB1 ⇒ SOME (N_convert (Trunc_f w64 Unsigned w64))
  | 0xB2 ⇒ SOME (N_convert (Convert w32   Signed w32))
  | 0xB3 ⇒ SOME (N_convert (Convert w32 Unsigned w32))
  | 0xB4 ⇒ SOME (N_convert (Convert w64   Signed w32))
  | 0xB5 ⇒ SOME (N_convert (Convert w64 Unsigned w32))
  | 0xB6 ⇒ SOME (N_convert Demote)
  | 0xB7 ⇒ SOME (N_convert (Convert w32   Signed w64))
  | 0xB8 ⇒ SOME (N_convert (Convert w32 Unsigned w64))
  | 0xB9 ⇒ SOME (N_convert (Convert w64   Signed w64))
  | 0xBA ⇒ SOME (N_convert (Convert w64 Unsigned w64))
  | 0xBB ⇒ SOME (N_convert Promote)
  | 0xBC ⇒ SOME (N_convert (Reinterpret_f w32 w32))
  | 0xBD ⇒ SOME (N_convert (Reinterpret_f w64 w64))
  | 0xBE ⇒ SOME (N_convert (Reinterpret_i w32 w32))
  | 0xBF ⇒ SOME (N_convert (Reinterpret_i w64 w64))
  | 0xC0 ⇒ SOME (N_unary (Extend8_s  w32))
  | 0xC1 ⇒ SOME (N_unary (Extend16_s w32))
  | 0xC2 ⇒ SOME (N_unary (Extend8_s  w64))
  | 0xC3 ⇒ SOME (N_unary (Extend16_s w64))
  | 0xC4 ⇒ SOME (N_unary  Extend32_s)


  | 0x41 n:i32 ⇒ SOME ((N_const32 Int) n)
  | 0x42 n:i64 ⇒ SOME ((N_const64 Int) n)
  | 0x43 z:f32 ⇒ SOME ((N_const32 Float) z)
  | 0x44 z:f64 ⇒ SOME ((N_const64 Float) z)


  (* Curiosity (ie, not technically impt): why is the encoding not contiguous??? *)
  | 0xFC 0:u32 ⇒ SOME (N_convert (Trunc_sat_f w32   Signed w32))
  | 0xFC 1:u32 ⇒ SOME (N_convert (Trunc_sat_f w32 Unsigned w32))
  | 0xFC 2:u32 ⇒ SOME (N_convert (Trunc_sat_f w64   Signed w32))
  | 0xFC 3:u32 ⇒ SOME (N_convert (Trunc_sat_f w64 Unsigned w32))
  | 0xFC 4:u32 ⇒ SOME (N_convert (Trunc_sat_f w32   Signed w64))
  | 0xFC 5:u32 ⇒ SOME (N_convert (Trunc_sat_f w32 Unsigned w64))
  | 0xFC 6:u32 ⇒ SOME (N_convert (Trunc_sat_f w64   Signed w64))
  | 0xFC 7:u32 ⇒ SOME (N_convert (Trunc_sat_f w64 Unsigned w64))
  | _ ⇒ NONE
End
