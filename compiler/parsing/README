## Manifest

* `cmlPEG`: theory defining the PEG for CakeML.  Includes a proof that the PEG is well-formed.

* `cmlParse`: theory defining the overall parsing functions that go from tokens to abstract syntax trees.  (In other words, these include calls to the functions in `semantics/cmlPtreeConversion`.)  The function used in the REPL is `parse_top`.

* `fromSexp`: theory defining functions for converting from an S-expression encoding of abstract syntax into the abstract syntax tree type. The S-expressions are parsed as *per* the PEG in HOL’s `examples/formal-language/context-free/simpleSexpPEGScript.sml`

* `lexer_impl`: code for consuming tokens until a top-level semicolon is found (semicolons can be hidden in `let`-`in`-`end` blocks, structures, signatures, and between parentheses).

### Proofs Subdirectory

* `pegComplete`: proof of PEG’s completeness (as above)

* `pegSound`: proof of PEG’s soundness (as above)


<!-- Local variables: -->
<!-- mode: markdown -->
<!-- flyspell-mode: nil -->
<!-- smart-quotes-mode: nil -->
<!-- end: -->
