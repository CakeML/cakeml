#!/usr/bin/env groovy

node("Builder") {

    def build_dir = pwd()  // Record the root build dir
    def build_image        // The Docker image to run in

    stage('Cleaning') {
        sh 'ls -A1 | xargs rm -rf'
    }

    stage('Get CakeML source') {
        checkout([$class: 'GitSCM',
            branches: scm.branches,
            doGenerateSubmoduleConfigurations: false,
            shallow: true,
            extensions: [[$class: 'RelativeTargetDirectory',
                relativeTargetDir: 'cakeml']],
            submoduleCfg: [],
            userRemoteConfigs: scm.userRemoteConfigs])
    }

    stage("Build Docker image") {
        dir('cakeml/developers') {
            build_image = docker.build("cake_ml:latest")
        }
    }

    stage('HOL') {
        checkout([$class: 'GitSCM',
            branches: [[name: '*/master']],
            doGenerateSubmoduleConfigurations: false,
            shallow: true,
            extensions: [[$class: 'RelativeTargetDirectory',
                relativeTargetDir: 'HOL']],
            submoduleCfg: [],
            userRemoteConfigs: [[url: 'https://github.com/HOL-Theorem-Prover/HOL.git']]])

        build_image.inside('-e HOME=/tmp') {
            sh '''cd HOL && echo 'val polymllibdir = "/usr/lib/x86_64-linux-gnu/"; print(OS.FileSys.getDir());' > tools-poly/poly-includes.ML'''
            sh 'cd HOL && cat tools-poly/poly-includes.ML' // TODO: debugging (remove)
            sh (script: 'cd HOL && poly --script tools/smart-configure.sml', returnStatus: true) // TODO: debugging: remove returnStatus
            sh 'cd HOL && bin/build --nograph'
        }
    }

    stage('CakeML') {
        withEnv(["PATH+EXTRA=${build_dir}/HOL/bin",  // The PATH+SOMETHING syntax preserves the existing PATH
                 'LC_ALL=en_AU.UTF-8',
                 'LANG=en_AU.UTF-8']) {
            build_image.inside('-e HOME=/tmp') {
                sh 'cd cakeml && bash ./developers/build-email.sh'
            }
        }
    }
}
