(*
   Extensions to Lem's built-in library to target things we need in HOL.
*)
open import Pervasives
import List_extra
import String

(* TODO: look for these in the built-in library *)

val rtc : forall 'a. ('a -> 'a -> bool) -> ('a -> 'a -> bool)
declare hol    target_rep function rtc = `RTC`
declare isabelle target_rep function rtc = `rtranclp`

val disjoint : forall 'a. set 'a -> set 'a -> bool
declare hol    target_rep function disjoint = `DISJOINT`
declare isabelle target_rep function disjoint = `(% M N. M \<inter> N = {})`

val all2 : forall 'a 'b. ('a -> 'b -> bool) -> list 'a -> list 'b -> bool

declare hol    target_rep function all2 = `EVERY2`
declare isabelle    target_rep function all2 = `list_all2`

let rec the _ (Just x) = x and the x Nothing = x

val fapply : forall 'a 'b. MapKeyType 'b => 'a -> 'b -> Map.map 'b 'a -> 'a
let fapply d x f = match Map.lookup x f with Just d -> d | Nothing -> d end

let rec
lunion [] s = s
and
lunion (x::xs) s =
  if List.elem x s
  then lunion xs s
  else x::(lunion xs s)

(* TODO: proper support for nat sets as sptrees... *)
open import {hol} `sptreeTheory`
type nat_set
declare hol target_rep type nat_set = `spt` unit
declare isabelle target_rep type nat_set = set nat
val nat_set_empty : nat_set
val nat_set_is_empty : nat_set -> bool
val nat_set_insert : nat_set -> nat -> nat_set
val nat_set_delete : nat_set -> nat -> nat_set
val nat_set_to_set : nat_set -> set nat
val nat_set_elem : nat_set -> nat -> bool
val nat_set_from_list : list nat -> nat_set
val nat_set_upto : nat -> nat_set
declare hol target_rep function nat_set_empty = `sptree$LN`
declare isabelle target_rep function nat_set_empty = `Set.empty`
declare hol target_rep function nat_set_is_empty s = s = nat_set_empty
declare hol target_rep function nat_set_insert s n = `sptree$insert` n () s
declare isabelle target_rep function nat_set_insert s n = `Set.insert` n s
declare hol target_rep function nat_set_delete s n = `sptree$delete` n s
declare hol target_rep function nat_set_to_set s = `sptree$domain` s
declare isabelle target_rep function nat_set_to_set s = `s`
declare hol target_rep function nat_set_elem s n = n IN (nat_set_to_set s)
declare hol target_rep function nat_set_from_list = List.foldl nat_set_insert nat_set_empty
declare hol target_rep function nat_set_upto n = `sptree$fromList` (genlist (fun _ -> ()) n)

type nat_map 'a
declare hol target_rep type nat_map 'a = `spt` 'a
declare isabelle target_rep type nat_map 'a = map nat 'a
val nat_map_empty : forall 'a. nat_map 'a
val nat_map_domain : forall 'a. nat_map 'a -> set nat
val nat_map_insert : forall 'a. nat_map 'a -> nat -> 'a -> nat_map 'a
val nat_map_lookup : forall 'a. nat_map 'a -> nat -> maybe 'a
val nat_map_to_list : forall 'a. nat_map 'a -> list 'a
val nat_map_map : forall 'a 'b. ('a -> 'b) -> nat_map 'a -> nat_map 'b
declare hol target_rep function nat_map_empty = `sptree$LN`
declare hol target_rep function nat_map_domain s = `sptree$domain` s
declare hol target_rep function nat_map_insert s k v = `sptree$insert` k v s
declare hol target_rep function nat_map_lookup s k = `sptree$lookup` k s
declare hol target_rep function nat_map_to_list s = `sptree$toList` s
declare hol target_rep function nat_map_map f s = `sptree$map` f s

(* TODO: proper support for lazy lists *)

open import {hol} `llistTheory`
open import {isabelle} `Coinductive.Coinductive_List`
type llist 'a
declare hol target_rep type llist 'a = `llist` 'a
declare isabelle target_rep type llist 'a = `llist` 'a
val lhd : forall 'a. llist 'a -> maybe 'a
val ltl : forall 'a. llist 'a -> maybe (llist 'a)
val lnil : forall 'a. llist 'a
val lcons : forall 'a. 'a -> llist 'a -> llist 'a
declare hol target_rep function lhd = `LHD`
declare isabelle target_rep function lhd = `lhd'`
declare hol target_rep function ltl = `LTL`
declare isabelle target_rep function ltl = `ltl'`
declare hol target_rep function lnil = `LNIL`
declare isabelle target_rep function lnil = `LNil`
declare hol target_rep function lcons = `LCONS`
declare isabelle target_rep function lcons = `LCons`


(* TODO: proper support for words... *)
open import {hol} `wordsTheory` `integer_wordTheory`
type word8
declare hol target_rep type word8 = `word8`
declare isabelle target_rep type word8 = `8 word`
val natFromWord8 : word8 -> nat
declare hol target_rep function natFromWord8 = `w2n`
declare isabelle target_rep function natFromWord8 = `unat`
val word_to_hex_string : word8 -> string
declare hol target_rep function word_to_hex_string = `word_to_hex_string`
val word8FromNat : nat -> word8
declare hol target_rep function word8FromNat = `n2w`
declare isabelle target_rep function word8FromNat = `of_nat`
val word8FromInteger : integer -> word8
declare hol target_rep function word8FromInteger = `i2w`
declare isabelle target_rep function word8FromInteger = `word_of_int`
val integerFromWord8 : word8 -> integer
declare hol target_rep function integerFromWord8 = `w2i`
instance (Numeral word8)
  let fromNumeral w = word8FromNat (fromNumeral w)
end
type word64
declare hol target_rep type word64 = `word64`
declare isabelle target_rep type word64 = `64 word`
val natFromWord64 : word64 -> nat
declare hol target_rep function natFromWord64 = `w2n`
declare isabelle target_rep function natFromWord64 = `unat`
val word64FromNat : nat -> word64
declare hol target_rep function word64FromNat = `n2w`
declare isabelle target_rep function word64FromNat = `of_nat`
val word64FromInteger : integer -> word64
declare hol target_rep function word64FromInteger = `i2w`
declare isabelle target_rep function word64FromInteger = `word_of_int`
val integerFromWord64 : word64 -> integer
declare hol target_rep function integerFromWord64 = `w2i`
instance (Numeral word64)
  let fromNumeral w = word64FromNat (fromNumeral w)
end
val word8FromWord64 : word64 -> word8
declare hol target_rep function word8FromWord64 = `w2w`
val word64FromWord8 : word8 -> word64
declare hol target_rep function word64FromWord8 = `w2w`
val W8and : word8 -> word8 -> word8
declare hol target_rep function W8and = `word_and`
declare isabelle target_rep function W8and = `Bits.bitAND`
val W8or : word8 -> word8 -> word8
declare hol target_rep function W8or = `word_or`
declare isabelle target_rep function W8or = `Bits.bitOR`
val W8xor : word8 -> word8 -> word8
declare hol target_rep function W8xor = `word_xor`
declare isabelle target_rep function W8xor = `Bits.bitXOR`
val W8add : word8 -> word8 -> word8
declare hol target_rep function W8add = `word_add`
declare isabelle target_rep function W8add = `Groups.plus`
val W8sub : word8 -> word8 -> word8
declare hol target_rep function W8sub = `word_sub`
declare isabelle target_rep function W8sub = `Groups.minus`
val W64and : word64 -> word64 -> word64
declare hol target_rep function W64and = `word_and`
declare isabelle target_rep function W64and = `Bits.bitAND`
val W64or : word64 -> word64 -> word64
declare hol target_rep function W64or = `word_or`
declare isabelle target_rep function W64or = `Bits.bitOR`
val W64xor : word64 -> word64 -> word64
declare hol target_rep function W64xor = `word_xor`
declare isabelle target_rep function W64xor = `Bits.bitXOR`
val W64add : word64 -> word64 -> word64
declare hol target_rep function W64add = `word_add`
declare isabelle target_rep function W64add = `Groups.plus`
val W64sub : word64 -> word64 -> word64
declare hol target_rep function W64sub = `word_sub`
declare isabelle target_rep function W64sub = `Groups.minus`

val W8lsl : word8 -> nat -> word8
declare hol target_rep function W8lsl = `word_lsl`
declare isabelle target_rep function W8lsl = `shiftl`
val W8lsr : word8 -> nat -> word8
declare hol target_rep function W8lsr = `word_lsr`
declare isabelle target_rep function W8lsr = `shiftr`
val W8asr : word8 -> nat -> word8
declare hol target_rep function W8asr = `word_asr`
declare isabelle target_rep function W8asr = `sshiftr`
val W8ror : word8 -> nat -> word8
declare hol target_rep function W8ror = `word_ror`
declare isabelle target_rep function W8ror = `(% a b. word_rotr b a)`
val W64lsl : word64 -> nat -> word64
declare hol target_rep function W64lsl = `word_lsl`
declare isabelle target_rep function W64lsl = `shiftl`
val W64lsr : word64 -> nat -> word64
declare hol target_rep function W64lsr = `word_lsr`
declare isabelle target_rep function W64lsr = `shiftr`
val W64asr : word64 -> nat -> word64
declare hol target_rep function W64asr = `word_asr`
declare isabelle target_rep function W64asr = `sshiftr`
val W64ror : word64 -> nat -> word64
declare hol target_rep function W64ror = `word_ror`
declare isabelle target_rep function W64ror = `(% a b. word_rotr b a)`

open import {hol} `alistTheory`
type alist 'a 'b = list ('a * 'b)
declare hol target_rep function lookup x y = `ALOOKUP` y x
val alistToFmap : forall 'k 'v. alist 'k 'v -> Map.map 'k 'v
declare hol target_rep function alistToFmap = `alist_to_fmap`
declare isabelle target_rep function alistToFmap = `map_of`

val opt_bind : forall 'a 'b. maybe 'a -> 'b -> alist 'a 'b -> alist 'a 'b
let opt_bind n v e =
  match n with
    | Nothing -> e
    | Just n' -> (n',v)::e
  end

(* Lists of indices *)

let rec
lshift (n : nat) ls =
  List.map (fun v -> v - n) (List.filter (fun v -> n <= v) ls)

open import {hol} `locationTheory`
type locn = <| row : nat;  col : nat; offset : nat |>
type locs = (locn * locn)
declare hol target_rep type locn = `locn`
declare hol target_rep type locs = `locs`
val unknown_loc : locs
declare hol target_rep function unknown_loc = `unknown_loc`
declare isabelle target_rep function unknown_loc = `undefined`
